<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="class_channelmediaoptions_ng">
    <title><ph keyref="ChannelMediaOptions"/></title>
    <shortdesc id="short"><ph id="shortdesc">频道媒体设置选项。</ph></shortdesc>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="unity" outputclass="language-csharp">public class ChannelMediaOptions {
        public bool publishCameraTrack { set; get; }
        public bool publishSecondaryCameraTrack { set; get; }
        public bool publishAudioTrack { set; get; }
        public bool publishScreenTrack { set; get; }
        public bool publishSecondaryScreenTrack { set; get; }
        public bool publishCustomAudioTrack { set; get; }
        public bool publishCustomAudioTrackEnableAec { set; get; }
        public bool publishDirectCustomAudioTrack { set; get; }
        public bool publishCustomVideoTrack { set; get; }
        public bool publishEncodedVideoTrack { set; get; }
        public bool publishMediaPlayerAudioTrack { set; get; }
        public bool publishMediaPlayerVideoTrack { set; get; }
        public bool publishTrancodedVideoTrack { set; get; }
        public bool autoSubscribeAudio { set; get; }
        public bool autoSubscribeVideo { set; get; }
        public bool enableAudioRecordingOrPlayout { set; get; }
        public int publishMediaPlayerId { set; get; }
        public CLIENT_ROLE_TYPE clientRoleType { set; get; }
        public AUDIENCE_LATENCY_LEVEL_TYPE audienceLatencyLevel { set; get; }
        public VIDEO_STREAM_TYPE defaultVideoStreamType { set; get; }
        public CHANNEL_PROFILE_TYPE channelProfile { set; get; }
        public int audioDelayMs { set; get; }
        public int mediaPlayerAudioDelayMs { set; get; }
        public string token { set; get; }
    };</codeblock></p>
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public class ChannelMediaOptions {
  public Boolean publishCameraTrack;
  public Boolean publishScreenCaptureVideo;
  public Boolean publishScreenCaptureAudio;
  public Boolean publishCustomAudioTrack;
  public Boolean publishCustomAudioTrackEnableAec;
  public Boolean publishCustomAudioTrackAec;
  public Boolean publishDirectCustomAudioTrack;
  public Boolean publishCustomVideoTrack;
  public Boolean publishEncodedVideoTrack;
  public Boolean publishMediaPlayerAudioTrack;
  public Boolean publishMediaPlayerVideoTrack;
  public Boolean publishRhythmPlayerTrack;
  public Integer publishMediaPlayerId;
  public Boolean publishMicrophoneTrack;
  public Boolean autoSubscribeAudio;
  public Boolean autoSubscribeVideo;
  public Boolean enableAudioRecordingOrPlayout;
  public Integer clientRoleType;
  public Integer audienceLatencyLevel;
  public Integer defaultVideoStreamType;
  public Integer channelProfile;
  public Integer audioDelayMs;
  public Integer mediaPlayerAudioDelayMs;
  public String token;
  public Boolean enableBuiltInMediaEncryption;
  public Integer publishCustomAudioSourceId;

  public Integer customVideoTrackId;

  public Boolean isAudioFilterable;

  public Boolean isInteractiveAudience;</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">__attribute__((visibility("default"))) @interface AgoraRtcChannelMediaOptions : NSObject
@property(strong, nonatomic) AgoraRtcBoolOptional* _Nullable publishCameraTrack;
#if TARGET_OS_IPHONE
@property(strong, nonatomic) AgoraRtcBoolOptional* _Nullable publishScreenCaptureVideo;
@property(strong, nonatomic) AgoraRtcBoolOptional* _Nullable publishScreenCaptureAudio;
#elif TARGET_OS_MAC
@property(strong, nonatomic) AgoraRtcBoolOptional* _Nullable publishScreenTrack;
#endif
@property(strong, nonatomic) AgoraRtcBoolOptional* _Nullable publishCustomAudioTrack;
@property(strong, nonatomic) AgoraRtcBoolOptional* _Nullable publishCustomAudioTrackEnableAec;
@property(strong, nonatomic) AgoraRtcBoolOptional* _Nullable publishCustomAudioTrackAec;
@property(strong, nonatomic) AgoraRtcBoolOptional* _Nullable publishDirectCustomAudioTrack;
@property(strong, nonatomic) AgoraRtcBoolOptional* _Nullable publishCustomVideoTrack;
@property(strong, nonatomic) AgoraRtcBoolOptional* _Nullable publishEncodedVideoTrack;
@property(strong, nonatomic) AgoraRtcBoolOptional* _Nullable publishMediaPlayerAudioTrack;
@property(strong, nonatomic) AgoraRtcBoolOptional* _Nullable publishMediaPlayerVideoTrack;
@property(strong, nonatomic) AgoraRtcIntOptional* _Nullable publishMediaPlayerId;

@property(strong, nonatomic) AgoraRtcIntOptional* _Nullable publishCustomAudioSourceId;

@property(strong, nonatomic) AgoraRtcBoolOptional* _Nullable publishMicrophoneTrack;
@property(strong, nonatomic) AgoraRtcBoolOptional* _Nullable autoSubscribeAudio;
@property(strong, nonatomic) AgoraRtcBoolOptional* _Nullable autoSubscribeVideo;
@property(strong, nonatomic) AgoraRtcBoolOptional* _Nullable enableAudioRecordingOrPlayout;
@property(strong, nonatomic) AgoraRtcIntOptional* _Nullable clientRoleType;
@property(strong, nonatomic) AgoraRtcIntOptional* _Nullable audienceLatencyLevel;
@property(strong, nonatomic) AgoraRtcIntOptional* _Nullable defaultVideoStreamType;
@property(strong, nonatomic) AgoraRtcIntOptional* _Nullable channelProfile;
@property(strong, nonatomic) AgoraRtcIntOptional* _Nullable audioDelayMs;
@property(strong, nonatomic) AgoraRtcIntOptional* _Nullable mediaPlayerAudioDelayMs;
@property(copy, nonatomic) NSString * _Nullable token;
@property(strong, nonatomic) AgoraRtcBoolOptional* _Nullable enableBuiltInMediaEncryption;

@property(strong, nonatomic) AgoraRtcBoolOptional* _Nullable publishRhythmPlayerTrack;

@property(strong, nonatomic) AgoraRtcIntOptional* _Nullable customVideoTrackId;

@property(strong, nonatomic) AgoraRtcBoolOptional* _Nullable isAudioFilterable;

@property(strong, nonatomic) AgoraRtcBoolOptional* _Nullable isInteractiveAudience;

@end</codeblock>
            <codeblock props="cpp" outputclass="language-cpp">struct ChannelMediaOptions {
  Optional&lt;bool> publishCameraTrack;
  Optional&lt;bool> publishSecondaryCameraTrack;
  Optional&lt;bool> publishMicrophoneTrack;

  #if defined(__ANDROID__) || (defined(TARGET_OS_IPHONE) &amp;&amp; TARGET_OS_IPHONE)
  Optional&lt;bool> publishScreenCaptureVideo;
  Optional&lt;bool> publishScreenCaptureAudio;
  #else
  Optional&lt;bool> publishScreenTrack;
  Optional&lt;bool> publishSecondaryScreenTrack;
  #endif

  Optional&lt;bool> publishCustomAudioTrack;
  Optional&lt;int> publishCustomAudioSourceId;
  Optional&lt;bool> publishCustomAudioTrackEnableAec;
  Optional&lt;bool> publishDirectCustomAudioTrack;
  Optional&lt;bool> publishCustomAudioTrackAec;
  Optional&lt;bool> publishCustomVideoTrack;
  Optional&lt;bool> publishEncodedVideoTrack;
  Optional&lt;bool> publishMediaPlayerAudioTrack;
  Optional&lt;bool> publishMediaPlayerVideoTrack;
  Optional&lt;bool> publishTrancodedVideoTrack;
  Optional&lt;bool> autoSubscribeAudio;
  Optional&lt;bool> autoSubscribeVideo;
  Optional&lt;bool> enableAudioRecordingOrPlayout;
  Optional&lt;int> publishMediaPlayerId;
  Optional&lt;CLIENT_ROLE_TYPE> clientRoleType;
  Optional&lt;AUDIENCE_LATENCY_LEVEL_TYPE> audienceLatencyLevel;
  Optional&lt;VIDEO_STREAM_TYPE> defaultVideoStreamType;
  Optional&lt;CHANNEL_PROFILE_TYPE> channelProfile;
  Optional&lt;int> audioDelayMs;
  Optional&lt;int> mediaPlayerAudioDelayMs;
  Optional&lt;const char*> token;
  Optional&lt;bool> enableBuiltInMediaEncryption;
  Optional&lt;bool> publishRhythmPlayerTrack;
  Optional&lt;bool> isInteractiveAudience;

  Optional&lt;video_track_id_t> customVideoTrackId;

  Optional&lt;bool> isAudioFilterable;

  ChannelMediaOptions() {}
  ~ChannelMediaOptions() {}</codeblock>
            <codeblock props="electron" outputclass="language-typescript"/>
            <codeblock props="rn" outputclass="language-typescript"/>
            <codeblock props="flutter" outputclass="language-dart"/> </p>
        </section>
        <section id="detailed_desc">Agora 支持在同一时间、同一 <xref
            keyref="RtcConnection"/> 中发布多路音频流、一路视频流。例如，<parmname props="native">publishMicrophoneTrack</parmname><parmname props="unity">publishAudioTrack</parmname>、<parmname>publishCustomAudioTrack</parmname> 和 <parmname>publishMediaPlayerAudioTrack</parmname> 可以同时为 <codeph><ph keyref="true"/></codeph>；
            <parmname>publishCameraTrack</parmname>、<parmname props="android ios">publishScreenCaptureVideo</parmname><parmname props="mac cpp">publishScreenTrack</parmname>、<parmname>publishCustomVideoTrack</parmname> 或 <parmname>publishEncodedVideoTrack</parmname> 之中同一时间只能有一个为 <codeph><ph keyref="true"/></codeph>。</section>
        <section id="parameters">
            <title><text conref="../conref/conref_api_metadata.dita#conref_api_metadata/property"/></title>
            <parml>
            <plentry>
                <pt>publishCameraTrack</pt>
                <pd>设置是否发布摄像头采集的视频：

                    
                    <ul id="ul_vx5_np5_3qb">
                    <li><codeph><ph keyref="true"/></codeph>：（默认）发布摄像头采集的视频。</li>
                    <li><codeph><ph keyref="false"/></codeph>：不发布摄像头采集的视频。</li>
                    </ul></pd>
            </plentry>
            <plentry props="cpp unity">
                <pt>publishSecondaryCameraTrack</pt>
                <pd>设置是否发布第二个摄像头采集的视频：

                    
                    <ul>
                    <li><codeph><ph keyref="true"/></codeph>：（默认）发布第二个摄像头采集的视频。</li>
                    <li><codeph><ph keyref="false"/></codeph>：不发布第二个摄像头采集的视频。</li>
                    </ul></pd>
            </plentry>
            <plentry>
                <pt props="native">publishMicrophoneTrack</pt>
                <pt props="unity">publishAudioTrack</pt>
                <pd>设置是否发布采集到的音频：

                    
                    
                    
                    
                    
                    
                    <ul>
                    <li><codeph><ph keyref="true"/></codeph>：（默认）发布采集到的音频。</li>
                    <li><codeph><ph keyref="false"/></codeph>：不发布采集到的音频。</li>
                    </ul>
                    <note type="note">自 v4.0.0 起，该参数名称由 <parmname>publishAudioTrack</parmname> 改为 <parmname>publishMicrophoneTrack</parmname>。</note>
                </pd>
            </plentry>
            <plentry>
                <pt props="android ios cpp">publishScreenCaptureVideo</pt>
                <pt props="mac cpp">publishScreenTrack</pt>
                <pd>
                    <p>设置是否发布屏幕采集的视频：

                    
                    
                    
                    <ul>
                    <li><codeph><ph keyref="true"/></codeph>：发布屏幕采集到的视频。</li>
                    <li><codeph><ph keyref="false"
                        /></codeph>：（默认）不发布屏幕采集到的视频。</li>
                    </ul></p>
                    <note type="attention" props="cpp">该参数仅适用于 Android 和 iOS 平台。</note> </pd>
            </plentry>
            <plentry>
                <pt props="android ios cpp">publishScreenCaptureAudio</pt>
                <pd>
                    <p>设置是否发布屏幕采集的音频：

                    
                    
                    
                    <ul>
                    <li><codeph><ph keyref="true"/></codeph>：发布屏幕采集到的音频。</li>
                    <li><codeph><ph keyref="false"/></codeph>：（默认）不发布屏幕采集到的音频。</li>
                    </ul></p>
                    <p>
                    <note type="attention" props="cpp">该参数仅适用于 Android 和 iOS 平台。</note></p>
                </pd>
            </plentry>
            <plentry props="cpp unity">
                <pt>publishSecondaryScreenTrack</pt>
                <pd>
                    <p>设置是否发布第二个屏幕采集的视频：

                    
                    
                    
                    <ul>
                    <li><codeph><ph keyref="true"/></codeph>：发布第二个屏幕采集到的视频。</li>
                    <li><codeph><ph keyref="false"/></codeph>：（默认）不发布第二个屏幕采集到的视频。</li>
                    </ul></p>
                </pd>
            </plentry>
            <plentry props="cpp unity">
                <pt>publishTrancodedVideoTrack</pt>
                <pd>
                    <p>设置是否发布本地的转码视频：

                    
                    <ul>
                    <li><codeph><ph keyref="true"/>：发布本地的转码视频。</codeph></li>
                    <li><codeph><ph keyref="false"/>：（默认）不发布本地的转码视频。</codeph></li>
                    </ul></p>
                </pd>
            </plentry>
            <plentry>
                <pt>publishCustomAudioTrack</pt>
                <pd>设置是否发布自定义采集的音频：

                    
                    <ul>
                    <li><codeph><ph keyref="true"/></codeph>：发布自定义采集到的音频。</li>
                    <li><codeph><ph keyref="false"/></codeph>：（默认）不发布自定义采集到的音频。</li>
                    </ul></pd>
            </plentry>
            <plentry props="native">
                <pt>publishCustomAudioSourceId</pt>
                <pd>待发布的自定义音频源的 ID。默认值为 0。


                    
                    <p>如果你已在 <xref keyref="setExternalAudioSource2"/> 中设置了 <parmname>sourceNumber</parmname> 大于 1，SDK 会创建对应数量的自采集音频轨道，并从 0 开始为每一个音频轨道分配一个 ID。</p>
                </pd>
            </plentry>
            <plentry props="cpp unity">
                <pt>publishCustomAudioTrackEnableAec</pt>
                <pd>设置发布自定义采集的音频时是否启用 AEC：

                    
                    <ul>
                    <li><codeph><ph keyref="true"/></codeph>：发布自定义采集的音频时启用 AEC。</li>
                    <li><codeph><ph keyref="false"/></codeph>：（默认）发布自定义采集的音频时不启用 AEC。</li>
                    </ul></pd>
            </plentry>
            <plentry>
                <pt>publishCustomVideoTrack</pt>
                <pd>设置是否发布自定义采集的视频：

                    
                    <ul>
                    <li><codeph><ph keyref="true"/></codeph>：发布自定义采集的视频。</li>
                    <li><codeph><ph keyref="false"/></codeph>：（默认）不发布自定义采集到的视频。</li>
                    </ul></pd>
            </plentry>
            <plentry>
                <pt>publishEncodedVideoTrack</pt>
                <pd>设置是否发布编码后的视频：

                    
                    <ul id="ul_ljg_4q5_3qb">
                    <li><codeph><ph keyref="true"/></codeph>：发布编码后的视频 。</li>
                    <li><codeph><ph keyref="false"/></codeph>：（默认）不发布编码后的视频。</li>
                    </ul></pd>
            </plentry>
            <plentry>
                <pt>publishMediaPlayerAudioTrack</pt>
                <pd>设置是否发布媒体播放器的音频：

                    
                    <ul id="ul_gr3_rq5_3qb">
                    <li><codeph><ph keyref="true"/></codeph>：发布媒体播放器的音频。</li>
                    <li><codeph><ph keyref="false"/></codeph>：（默认）不发布媒体播放器的音频。</li>
                    </ul></pd>
            </plentry>
            <plentry>
                <pt>publishMediaPlayerVideoTrack</pt>
                <pd>设置是否发布媒体播放器的视频：

                    
                    <ul id="ul_gtd_tq5_3qb">
                    <li><codeph><ph keyref="true"/></codeph>：发布媒体播放器的视频。</li>
                    <li><codeph><ph keyref="false"/></codeph>：（默认）不发布媒体播放器的视频。</li>
                    </ul></pd>
            </plentry>
            <plentry>
                <pt>autoSubscribeAudio</pt>
                <pd>设置是否自动订阅所有音频流：

                    
                    <ul id="ul_gxf_vq5_3qb">
                    <li><codeph><ph keyref="true"/></codeph>：（默认）自动订阅所有音频流。</li>
                    <li><codeph><ph keyref="false"/></codeph>：不自动订阅任何音频流。</li>
                    </ul></pd>
            </plentry>
            <plentry>
                <pt>autoSubscribeVideo</pt>
                <pd>设置是否自动订阅所有视频流：

                    
                    <ul id="ul_gfh_xq5_3qb">
                    <li><codeph><ph keyref="true"/></codeph>：（默认）自动订阅所有视频流。</li>
                    <li><codeph><ph keyref="false"/></codeph>：不自动订阅任何视频流。</li>
                    </ul></pd>
            </plentry>
            <plentry>
                <pt>enableAudioRecordingOrPlayout</pt>
                <pd>设置是否开启音频录制或播放：

                    
                    <ul>
                    <li><codeph><ph keyref="true"/></codeph>：（默认）开启音频录制和播放。</li>
                    <li><codeph><ph keyref="false"/></codeph>：不开启音频录制或播放。</li>
                    </ul></pd>
            </plentry>
            <plentry>
                <pt>publishMediaPlayerId</pt>
                <pd>待发布的媒体播放器的 ID。默认值为 0。</pd>
            </plentry>
            <plentry>
                <pt>clientRoleType</pt>
                <pd conkeyref="setClientRole1/clientrole"/>
            </plentry>
            <plentry conkeyref="ClientRoleOptions/audiencelatencylevel">
                <pt/>
                <pd/>
            </plentry>
            <plentry>
                <pt>defaultVideoStreamType</pt>
                <pd conkeyref="setRemoteDefaultVideoStreamType/defaultstreamtype"/>
            </plentry>
            <plentry>
                <pt>channelProfile</pt>
                <pd conkeyref="setChannelProfile/channelprofiletype"/>
            </plentry>
            <plentry props="hide">
                <pt>audioDelayMs</pt>
                <pd>
                    <p>发送音频帧的时延（以毫秒为单位），用于控制 A/V 同步。</p>
                    <p>如果要关闭时延，将此参数值设置为 0。</p>
                </pd>
            </plentry>
            <plentry props="hide">
                <pt>publishCustomAudioTrackAec</pt>
                <pd>设置是否发布经过外部回声消除模块处理的音频帧。


                    
                    <ul>
                    <li><codeph><ph keyref="true"/></codeph>：发布。</li>
                    <li><codeph><ph keyref="false"/></codeph>：不发布。</li>
                    </ul> </pd>
            </plentry>
            <plentry>
                <pt>token</pt>
                <pd>
                    <p>（可选）在服务端生成的用于鉴权的动态密钥。详见<xref keyref="guide-token">使用 Token 鉴权</xref>。</p>
                    <note type="caution">
                    <ul>
                    <li>该参数仅在调用 <xref keyref="updateChannelMediaOptions"/> 或 <xref keyref="updateChannelMediaOptionsEx"/> 时生效。</li>
                    <li>请确保用于生成 token 的 App ID、频道名和用户名和 <xref keyref="create2"/> 方法初始化引擎时用的 App ID，以及 <xref keyref="joinChannel2"/> 或 <xref keyref="joinChannelEx"/> 方法加入频道时设置的频道名和用户名是一致的。</li>
                    </ul></note></pd>
            </plentry>
            <plentry props="hide">
                <pt>startPreview</pt>
                <pd>设置是否在加入频道时自动开启预览。
                        
                    
                    
                    
                    <ul>
                    <li><codeph><ph keyref="true"/></codeph>：（默认）自动开启预览。该参数值生效的前提是已通过 <xref keyref="setupLocalVideo"/> 方法设置了本地视频属性；否则，不会开启预览。</li>
                    <li><codeph><ph keyref="false"/></codeph>：不自动开启预览。</li>
                    </ul></pd>
            </plentry>
            <plentry>
                <pt>publishRhythmPlayerTrack</pt>
                <pd>设置是否发布虚拟节拍器声音至远端：
                
                    
                    <ul>
                    <li><codeph><ph keyref="true"/></codeph>：（默认）发布。本地用户和远端用户都能听到节拍器。</li>
                    <li><codeph><ph keyref="false"/></codeph>：不发布。只有本地用户能听到节拍器。</li>
                    </ul></pd>
            </plentry>
            <plentry>
                <pt>isInteractiveAudience</pt>
                <pd>是否开启互动模式：
                
                    
                    <ul>
                    <li><codeph><ph keyref="true"/></codeph>：开启互动模式。成功开启后，本地用户收到低延时和流畅的远端用户视频。</li>
                    <li><codeph><ph keyref="false"/></codeph>：（默认）不开启互动模式。本地用户收到默认设置的远端用户视频。</li>
                    </ul>
                    <note type="attention">
                    <ul>
                    <li>该参数用于实现跨直播间连麦场景。连麦主播需要调用 <xref keyref="joinChannelEx"/> 方法，以观众身份加入对方的直播间，并将 <parmname>isInteractiveAudience</parmname> 设置为 <ph keyref="true"/>。</li>
                    <li>仅当用户角色为 <apiname keyref="CLIENT_ROLE_AUDIENCE"/> 时，该参数生效。</li>
                    </ul> </note> </pd>
            </plentry>
            <plentry id="customvideotrackid">
                <pt>customVideoTrackId</pt>
                <pd>调用 <xref keyref="createCustomVideoTrack"/> 方法返回的视频轨道 ID。</pd>
            </plentry>
            </parml> </section>
    </refbody>
</reference>

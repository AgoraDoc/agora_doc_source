<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="class_screencapturesourceinfo">
    <title><ph keyref="ScreenCaptureSourceInfo"/></title>
    <shortdesc id="short"><ph id="shortdesc">可共享窗口或屏幕的信息。</ph><ph props="native unity">在 <xref
        keyref="IScreenCaptureSourceList"/> 中返回。</ph></shortdesc>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java"/>
            <codeblock props="ios mac" outputclass="language-objectivec"/>
            <codeblock props="cpp" outputclass="language-cpp">struct ScreenCaptureSourceInfo {
  ScreenCaptureSourceType type;
  view_t sourceId;
  const char* sourceName;
  ThumbImageBuffer thumbImage;
  ThumbImageBuffer iconImage;
  const char* processPath;
  const char* sourceTitle;
  bool primaryMonitor;
  ScreenCaptureSourceInfo() : type(ScreenCaptureSourceType_Unknown), sourceId(nullptr), sourceName(nullptr), processPath(nullptr), sourceTitle(nullptr), primaryMonitor(false) {}
};</codeblock>
            <codeblock props="electron" outputclass="language-typescript"/>
            <codeblock props="unity" outputclass="language-csharp">public class ScreenCaptureSourceInfo
    {
        public ScreenCaptureSourceType type { set; get; }
        /** in Mac: pointer to NSNumber */
        public view_t sourceId { set; get; }
        public string sourceName { set; get; }
        public ThumbImageBuffer thumbImage { set; get; }
        public ThumbImageBuffer iconImage { set; get; }

        public string processPath { set; get; }
        public string sourceTitle { set; get; }
        public bool primaryMonitor { set; get; }

        public ScreenCaptureSourceInfo()
        {
            type = ScreenCaptureSourceType.ScreenCaptureSourceType_Unknown;
            sourceId = 0;
            sourceName = "";
            processPath = "";
            sourceTitle = "";
            primaryMonitor = false;
            thumbImage = new ThumbImageBuffer();
            iconImage = new ThumbImageBuffer();
        }
    };</codeblock>
            <codeblock props="rn" outputclass="language-typescript"/>
            <codeblock props="flutter" outputclass="language-dart">There are no corresponding names available</codeblock>
            </p>
        </section>
        <section id="parameters">
            <title><text
            conref="../conref/conref_api_metadata.dita#conref_api_metadata/property"
            /></title>
            <parml>
            <plentry>
                <pt>type</pt>
                <pd>共享目标的类型。详见 <xref keyref="ScreenCaptureSourceType"/>。</pd>
            </plentry>
            <plentry>
                <pt>sourceId</pt>
                <pd>对于窗口，表示窗口 ID（Window ID)；对于屏幕，表示屏幕 ID（Display ID）。</pd>
            </plentry>
            <plentry>
                <pt>sourceName</pt>
                <pd>窗口或屏幕的名称。UTF-8 编码。</pd>
            </plentry>
            <plentry>
                <pt>thumbImage</pt>
                <pd>缩略图的图像内容。详见 <xref keyref="ThumbImageBuffer"/>。</pd>
            </plentry>
            <plentry>
                <pt>iconImage</pt>
                <pd>图标的图像内容。详见 <xref keyref="ThumbImageBuffer"/>。</pd>
            </plentry>
            <plentry>
                <pt>processPath</pt>
                <pd>窗口所属的进程。UTF-8 编码。</pd>
            </plentry>
            <plentry>
                <pt>sourceTitle</pt>
                <pd>窗口标题。UTF-8 编码。</pd>
            </plentry>
            <plentry>
                <pt>primaryMonitor</pt>
                <pd>屏幕是否为主显示屏：

                    
                    <ul>
                    <li><codeph><ph keyref="true"/></codeph>: 是。</li>
                    <li><codeph><ph keyref="false"/></codeph>: 否。</li>
                    </ul></pd>
            </plentry>
            </parml> </section>
    </refbody>
</reference>

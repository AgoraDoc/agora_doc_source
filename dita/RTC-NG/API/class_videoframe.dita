<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="class_videoframe">
    <title><ph keyref="VideoFrame" /></title>
    <shortdesc id="short"><ph id="shortdesc">视频帧的属性设置。</ph></shortdesc>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java" />
            <codeblock props="ios mac" outputclass="language-objectivec">__attribute__((visibility("default"))) @interface AgoraOutputVideoFrame : NSObject
@property (nonatomic, assign) NSInteger type;
@property (nonatomic, assign) int width;
@property (nonatomic, assign) int height;
@property (nonatomic, assign) int yStride;
@property (nonatomic, assign) int uStride;
@property (nonatomic, assign) int vStride;
@property (nonatomic, assign) uint8_t* _Nullable yBuffer;
@property (nonatomic, assign) uint8_t* _Nullable uBuffer;
@property (nonatomic, assign) uint8_t* _Nullable vBuffer;
@property (nonatomic, assign) int rotation;
@property (nonatomic, assign) int64_t renderTimeMs;
@property (nonatomic, assign) int avSyncType;
@property(assign, nonatomic) CVPixelBufferRef _Nullable pixelBuffer;

@end</codeblock>
            <codeblock props="cpp" outputclass="language-cpp">struct VideoFrame {
  VideoFrame():
  type(VIDEO_PIXEL_DEFAULT),
  width(0),
  height(0),
  yStride(0),
  uStride(0),
  vStride(0),
  yBuffer(NULL),
  uBuffer(NULL),
  vBuffer(NULL),
  rotation(0),
  renderTimeMs(0),
  avsync_type(0),
  metadata_buffer(NULL),
  metadata_size(0),
  sharedContext(0),
  textureId(0),
  alphaBuffer(NULL){}
</codeblock>
            <codeblock props="electron" outputclass="language-typescript">export class VideoFrame {
  
  type?: VideoPixelFormat;
  
  width?: number;
  
  height?: number;
  
  yStride?: number;
  
  uStride?: number;
  
  vStride?: number;
  
  yBuffer?: Uint8Array;
  
  uBuffer?: Uint8Array;
  
  vBuffer?: Uint8Array;
  
  rotation?: number;
  
  renderTimeMs?: number;
  
  avsync_type?: number;
  
  metadata_buffer?: Uint8Array;
  
  metadata_size?: number;
  
  textureId?: number;
  
  matrix?: number[];
  
  alphaBuffer?: Uint8Array;
}</codeblock>
            <codeblock props="unity" outputclass="language-csharp">public class VideoFrame
    {
        public VideoFrame()
        {
            type = VIDEO_PIXEL_FORMAT.VIDEO_PIXEL_DEFAULT;
            width = 0;
            height = 0;
            yStride = 0;
            uStride = 0;
            vStride = 0;
            yBuffer = new byte[0];
            uBuffer = new byte[0];
            vBuffer = new byte[0];
            yBufferPtr = IntPtr.Zero;
            uBufferPtr = IntPtr.Zero;
            vBufferPtr = IntPtr.Zero;
            rotation = 0;
            renderTimeMs = 0;
            avsync_type = 0;
            metadata_buffer = IntPtr.Zero;
            metadata_size = 0;
            sharedContext = IntPtr.Zero;
            textureId = 0;
            matrix = new float[16];
        }

        public VIDEO_PIXEL_FORMAT type;

        public int width;

        public int height;

        public int yStride;

        public int uStride;

        public int vStride;

        public byte[] yBuffer;

        public IntPtr yBufferPtr;

        public byte[] uBuffer;

        public IntPtr uBufferPtr;

        public byte[] vBuffer;

        public IntPtr vBufferPtr;

        public int rotation;

        public long renderTimeMs;

        public int avsync_type;

        public IntPtr metadata_buffer;

        public int metadata_size;

        public IntPtr sharedContext;

        public int textureId;

        public float[] matrix;

        public byte[] alphaBuffer;

        public IntPtr alphaBufferPtr;
    };</codeblock>
            <codeblock props="rn" outputclass="language-typescript">export class VideoFrame {
  
  type?: VideoPixelFormat;
  
  width?: number;
  
  height?: number;
  
  yStride?: number;
  
  uStride?: number;
  
  vStride?: number;
  
  yBuffer?: Uint8Array;
  
  uBuffer?: Uint8Array;
  
  vBuffer?: Uint8Array;
  
  rotation?: number;
  
  renderTimeMs?: number;
  
  avsync_type?: number;
  
  metadata_buffer?: Uint8Array;
  
  metadata_size?: number;
  
  textureId?: number;
  
  matrix?: number[];
  
  alphaBuffer?: Uint8Array;
}</codeblock>
            <codeblock props="flutter" outputclass="language-dart">class VideoFrame {
  const VideoFrame(
      {this.type,
      this.width,
      this.height,
      this.yStride,
      this.uStride,
      this.vStride,
      this.yBuffer,
      this.uBuffer,
      this.vBuffer,
      this.rotation,
      this.renderTimeMs,
      this.avsyncType,
      this.metadataBuffer,
      this.metadataSize,
      this.textureId,
      this.matrix,
      this.alphaBuffer});

  @JsonKey(name: 'type')
  final VideoPixelFormat? type;

  @JsonKey(name: 'width')
  final int? width;

  @JsonKey(name: 'height')
  final int? height;

  @JsonKey(name: 'yStride')
  final int? yStride;

  @JsonKey(name: 'uStride')
  final int? uStride;

  @JsonKey(name: 'vStride')
  final int? vStride;

  @JsonKey(name: 'yBuffer', ignore: true)
  final Uint8List? yBuffer;

  @JsonKey(name: 'uBuffer', ignore: true)
  final Uint8List? uBuffer;

  @JsonKey(name: 'vBuffer', ignore: true)
  final Uint8List? vBuffer;

  @JsonKey(name: 'rotation')
  final int? rotation;

  @JsonKey(name: 'renderTimeMs')
  final int? renderTimeMs;

  @JsonKey(name: 'avsync_type')
  final int? avsyncType;

  @JsonKey(name: 'metadata_buffer', ignore: true)
  final Uint8List? metadataBuffer;

  @JsonKey(name: 'metadata_size')
  final int? metadataSize;

  @JsonKey(name: 'textureId')
  final int? textureId;

  @JsonKey(name: 'matrix')
  final List&lt;double>? matrix;

  @JsonKey(name: 'alphaBuffer', ignore: true)
  final Uint8List? alphaBuffer;

  factory VideoFrame.fromJson(Map&lt;String, dynamic> json) =>
      _$VideoFrameFromJson(json);

  Map&lt;String, dynamic> toJson() => _$VideoFrameToJson(this);
}</codeblock> </p>
        </section>
        <section id="detailed_desc">
            <p>视频数据的格式为 YUV420。缓冲区给出的是指向指针的指针，该接口不能修改缓冲区的指针，只能修改缓冲区的内容。</p>
        </section>
        <section id="parameters">
            <title><text conref="../conref/conref_api_metadata.dita#conref_api_metadata/property" /></title>
            <parml>
            <plentry>
                <pt>type</pt>
                <pd props="cpp unity" conkeyref="ExternalVideoFrame/windows-format" />
                <pd props="ios mac" conkeyref="ExternalVideoFrame/oc-format" />
            </plentry>
            <plentry>
                <pt>width</pt>
                <pd>视频像素宽度。</pd>
            </plentry>
            <plentry>
                <pt>height</pt>
                <pd>视频像素高度。</pd>
            </plentry>
            <plentry>
                <pt>yStride</pt>
                <pd>对 YUV 数据，表示 Y 缓冲区的行跨度；对 RGBA 数据，表示总的数据长度。</pd>
            </plentry>
            <plentry>
                <pt>uStride</pt>
                <pd>对 YUV 数据，表示 U 缓冲区的行跨度；对 RGBA 数据，值为 0。</pd>
            </plentry>
            <plentry>
                <pt>vStride</pt>
                <pd>对 YUV 数据，表示 V 缓冲区的行跨度；对 RGBA 数据，值为 0。</pd>
            </plentry>
            <plentry>
                <pt>yBuffer</pt>
                <pd>对 YUV 数据，表示 Y 缓冲区的指针；对 RGBA 数据，表示数据缓冲区。</pd>
            </plentry>
            <plentry>
                <pt>uBuffer</pt>
                <pd>对 YUV 数据，表示 U 缓冲区的指针；对 RGBA 数据，值为空。</pd>
            </plentry>
            <plentry>
                <pt>vBuffer</pt>
                <pd>对 YUV 数据，表示 V 缓冲区的指针；对 RGBA 数据，值为空。</pd>
            </plentry>
            <plentry>
                <pt>rotation</pt>
                <pd>在渲染视频前设置该帧的顺时针旋转角度，目前支持 0 度、90 度、180 度，和 270 度。</pd>
            </plentry>
            <plentry>
                <pt>renderTimeMs</pt>
                <pd>视频帧被渲染时的 Unix 时间戳（毫秒）。该时间戳可用于指导渲染视频帧。该参数为必填。</pd>
            </plentry>
            <plentry>
                <pt>avsync_type</pt>
                <pd>保留参数。</pd>
            </plentry>
            <plentry>
                <pt>metadata_buffer</pt>
                <pd>该参数仅适用于 Texture 格式的视频数据。指 MetaData 的数据缓冲区，默认值为 <codeph>NULL</codeph>。</pd>
            </plentry>
            <plentry>
                <pt>metadata_size</pt>
                <pd>该参数仅适用于 Texture 格式的视频数据。指 MetaData 的大小，默认值为 <codeph>0</codeph>。</pd>
            </plentry>
            <plentry>
                <pt>sharedContext</pt>
                <pd></pd>
            </plentry>
            <plentry>
                <pt>textureId</pt>
                <pd>该参数仅适用于 Texture 格式的视频数据。为一个输入的 4x4 变换矩阵，典型值为一个单位矩阵。</pd>
            </plentry>
            <plentry>
                <pt>matrix</pt>
                <pd></pd>
            </plentry>
            <plentry props="ios mac">
                <pt>pixelBuffer</pt>
                <pd>将数据填充到 CVPixelBuffer。</pd>
            </plentry>
            <plentry props="hide">
                <pt>alphaBuffer</pt>
                <pd>
                    <p>表示人像分割算法的输出数据，跟视频帧的尺寸一致。每个像素点的取值范围为 [0,255]，其中 0 表示背景；255 代表前景（人像）。</p>
                    <p>在用户自定义视频渲染场景下，该参数可帮助实现将视频背景自渲染为各种效果，例如：透明、纯色、图片、视频等等。

                    <note>该参数需要<xref keyref="ticket-link" />联系技术支持开通。</note></p>
                </pd>
            </plentry>
            </parml> </section>
    </refbody>
</reference>
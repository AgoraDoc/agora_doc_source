<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="class_screencaptureparameters">
    <title><ph keyref="ScreenCaptureParameters" /></title>
    <shortdesc id="short"><ph id="shortdesc">屏幕共享的参数配置。</ph></shortdesc>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="mac" outputclass="language-objectivec">__attribute__((visibility("default"))) @interface AgoraScreenCaptureParameters: NSObject
@property (assign, nonatomic) CGSize dimensions;
@property (assign, nonatomic) NSInteger frameRate;
@property (assign, nonatomic) NSInteger bitrate;

@end</codeblock>
            <codeblock props="android" outputclass="language-java">public class ScreenCaptureParameters {
  private VideoDimensions videoDimensions;
  private int frameRate;
  private int bitrate;

  public ScreenCaptureParameters() {
    videoDimensions = new VideoDimensions(1080, 1920);
    frameRate = 5;
    bitrate = 4098;
  }

  public ScreenCaptureParameters setVideoDimensions(VideoDimensions videoDimensions) {
    this.videoDimensions = videoDimensions;
    return this;
  }

  public ScreenCaptureParameters setFrameRate(int frameRate) {
    this.frameRate = frameRate;
    return this;
  }

  public ScreenCaptureParameters setBitrate(int bitrate) {
    this.bitrate = bitrate;
    return this;
  }

  public VideoDimensions getVideoDimensions() {
    return videoDimensions;
  }

  @CalledByNative
  int getWidth() {
    return videoDimensions != null ? videoDimensions.width : 0;
  }

  @CalledByNative
  int getHeight() {
    return videoDimensions != null ? videoDimensions.height : 0;
  }

  @CalledByNative
  public int getFrameRate() {
    return frameRate;
  }

  @CalledByNative
  public int getBitrate() {
    return bitrate;
  }
}</codeblock>
            <codeblock props="cpp" outputclass="language-cpp">struct ScreenCaptureParameters {
  VideoDimensions dimensions;
  int frameRate;
  int bitrate;
  bool captureMouseCursor;
  bool windowFocus;
  view_t *excludeWindowList;
  int excludeWindowCount;

  ScreenCaptureParameters()
    : dimensions(1920, 1080), frameRate(5), bitrate(STANDARD_BITRATE), captureMouseCursor(true), windowFocus(false), excludeWindowList(OPTIONAL_NULLPTR), excludeWindowCount(0) {}
  ScreenCaptureParameters(const VideoDimensions&amp; d, int f, int b)
    : dimensions(d), frameRate(f), bitrate(b), captureMouseCursor(true), windowFocus(false), excludeWindowList(OPTIONAL_NULLPTR), excludeWindowCount(0) {}
  ScreenCaptureParameters(int width, int height, int f, int b)
    : dimensions(width, height), frameRate(f), bitrate(b), captureMouseCursor(true), windowFocus(false), excludeWindowList(OPTIONAL_NULLPTR), excludeWindowCount(0) {}
  ScreenCaptureParameters(int width, int height, int f, int b, bool cur, bool fcs)
    : dimensions(width, height), frameRate(f), bitrate(b), captureMouseCursor(cur), windowFocus(fcs), excludeWindowList(OPTIONAL_NULLPTR), excludeWindowCount(0) {}
  ScreenCaptureParameters(int width, int height, int f, int b, view_t *ex, int cnt)
    : dimensions(width, height), frameRate(f), bitrate(b), captureMouseCursor(true), windowFocus(false), excludeWindowList(ex), excludeWindowCount(cnt) {}
  ScreenCaptureParameters(int width, int height, int f, int b, bool cur, bool fcs, view_t *ex, int cnt)
    : dimensions(width, height), frameRate(f), bitrate(b), captureMouseCursor(cur), windowFocus(fcs), excludeWindowList(ex), excludeWindowCount(cnt) {}
};</codeblock>
            <codeblock props="electron" outputclass="language-typescript">export class ScreenCaptureParameters {
  dimensions?: VideoDimensions
  frameRate?: number
  bitrate?: number
  captureMouseCursor?: boolean
  windowFocus?: boolean
  excludeWindowList?: any[]
  excludeWindowCount?: number
}</codeblock>
            <codeblock props="unity" outputclass="language-csharp">public class ScreenCaptureParameters
    {
        public ScreenCaptureParameters()
        {
            dimensions = new VideoDimensions(1920, 1080);
            frameRate = 5;
            bitrate = (int)BITRATE.STANDARD_BITRATE;
            captureMouseCursor = true;
            windowFocus = false;
            excludeWindowList = new view_t[0];
            excludeWindowCount = 0;
        }

        public ScreenCaptureParameters(ref VideoDimensions d, int f, int b)
        {
            dimensions = new VideoDimensions(d.width, d.height);
            frameRate = f;
            bitrate = b;
            captureMouseCursor = true;
            windowFocus = false;
            excludeWindowList = new view_t[0];
            excludeWindowCount = 0;
        }

        public ScreenCaptureParameters(int width, int height, int f, int b)
        {
            dimensions = new VideoDimensions(width, height);
            frameRate = f;
            bitrate = b;
            captureMouseCursor = true;
            windowFocus = false;
            excludeWindowList = new view_t[0];
            excludeWindowCount = 0;
        }

        public ScreenCaptureParameters(int width, int height, int f, int b, bool cur, bool fcs)
        {
            dimensions = new VideoDimensions(width, height);
            frameRate = f;
            bitrate = b;
            captureMouseCursor = cur;
            windowFocus = fcs;
            excludeWindowList = new view_t[0];
            excludeWindowCount = 0;
        }

        public ScreenCaptureParameters(int width, int height, int f, int b, view_t[] ex, int cnt)
        {
            dimensions = new VideoDimensions(width, height);
            frameRate = f;
            bitrate = b;
            captureMouseCursor = true;
            windowFocus = false;
            excludeWindowList = ex;
            excludeWindowCount = cnt;
        }

        public ScreenCaptureParameters(int width, int height, int f, int b, bool cur, bool fcs, view_t[] ex, int cnt)
        {
            dimensions = new VideoDimensions(width, height);
            frameRate = f;
            bitrate = b;
            captureMouseCursor = cur;
            windowFocus = fcs;
            excludeWindowList = ex;
            excludeWindowCount = cnt;
        }
        public VideoDimensions dimensions { set; get; }
        public int frameRate { set; get; }
        public int bitrate { set; get; }
        public bool captureMouseCursor { set; get; }
        public bool windowFocus { set; get; }
        public view_t[] excludeWindowList { set; get; }
        public int excludeWindowCount { set; get; }
    }</codeblock>
            <codeblock props="rn" outputclass="language-typescript" />
            <codeblock props="flutter" outputclass="language-dart">There are no corresponding names available</codeblock>
            </p>
        </section>
        <section id="parameters">
            <title><text conref="../conref/conref_api_metadata.dita#conref_api_metadata/property" /></title>
            <parml>
            <plentry>
                <pt props="ios mac cpp unity flutter electron rn">dimensions</pt>
                <pt props="android">videoDimensions</pt>
                <pd>
                    <p>编码共享视频的最大像素值。<ph props="android cpp">详见 <xref keyref="VideoDimensions" />。默认值为 1920 × 1080，即 2073600 像素。该像素值为计费标准。</ph></p>
                    <p>当共享的屏幕分辨率宽高比与该值设置不一致时，SDK 按如下策略进行编码。假设 <codeph>dimensions</codeph> 设为 1920 × 1080：

                    
                    
                    <ul>
                    <li>如果屏幕分辨率小于 <codeph>dimensions</codeph>，如 1000 × 1000，SDK 直接按 1000 × 1000 进行编码。</li>
                    <li>如果屏幕分辨率大于 <codeph>dimensions</codeph>，如 2000 × 1500，SDK 按屏幕分辨率的宽高比，即 4:3，取 dimensions 以内的最大分辨率进行编码，即 1440 × 1080。</li>
                    </ul></p>
                </pd>
            </plentry>
            <plentry>
                <pt>frameRate</pt>
                <pd>共享视频的帧率，单位为 fps；默认值为 5，建议不要超过 15。</pd>
            </plentry>
            <plentry>
                <pt>bitrate</pt>
                <pd>共享视频的码率，单位为 Kbps；默认值为 0，表示 SDK 根据当前共享屏幕的分辨率计算出一个合理的值。</pd>
            </plentry>
            <plentry props="cpp unity electron rn">
                <pt>captureMouseCursor</pt>
                <pd>
                    <p>是否采集鼠标用于屏幕共享：

                    
                    
                    <ul>
                    <li><codeph><ph keyref="true" /></codeph>:（默认）采集鼠标。</li>
                    <li><codeph><ph keyref="false" /></codeph>: 不采集鼠标。</li>
                    </ul></p>
                </pd>
            </plentry>
            <plentry props="cpp unity electron rn">
                <pt>windowFocus</pt>
                <pd>
                    <p>调用 <xref keyref="startScreenCaptureByWindowId" /> 方法共享窗口时，是否将该窗口前置：

                    
                    
                    <ul>
                    <li><codeph><ph keyref="true" /></codeph>: 前置窗口。</li>
                    <li><codeph><ph keyref="false" /></codeph>:（默认）不前置窗口。</li>
                    </ul></p>
                </pd>
            </plentry>
            <plentry props="cpp unity electron rn">
                <pt>excludeWindowList</pt>
                <pd>
                    <p>待屏蔽窗口的 ID 列表。调用 <xref keyref="startScreenCaptureByScreenRect" />开启屏幕共享时，你可以通过该参数屏蔽指定的窗口。你可以在调用 <xref keyref="updateScreenCaptureParameters" /> 更新屏幕共享的配置参数时，通过该参数动态屏蔽指定的窗口。</p>
                </pd>
            </plentry>
            <plentry props="cpp unity electron rn">
                <pt>excludeWindowCount</pt>
                <pd>
                    <p>待屏蔽窗口的数量。</p>
                </pd>
            </plentry>
            </parml> </section>
    </refbody>
</reference>
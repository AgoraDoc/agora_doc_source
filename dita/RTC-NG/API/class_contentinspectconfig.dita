<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="class_contentinspectconfig">
    <title><ph keyref="ContentInspectConfig"/></title>
    <shortdesc id="short"><ph id="shortdesc">内容审核配置。</ph></shortdesc>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="unity" outputclass="language-csharp">public class ContentInspectConfig
    {
        public bool DeviceWork;
        public bool CloudWork;
        public CONTENT_INSPECT_DEVICE_TYPE DeviceworkType;</codeblock>
            <codeblock props="android">public class ContentInspectConfig {
  public final static int CONTENT_INSPECT_TYPE_WORK_DEVICE = 0;
  public final static int CONTENT_INSPECT_TYPE_WORK_CLOUD = 1;
  public final static int CONTENT_INSPECT_TYPE_WORK_DEVICE_CLOUD = 2;
  public final static int CONTENT_INSPECT_TYPE_INVALID = 0;
  public final static int CONTENT_INSPECT_TYPE_MODERATION = 1;
  public final static int CONTENT_INSPECT_TYPE_SUPERVISE = 2;
  public final static int CONTENT_INSPECT_DEVICE_INVALID = 0;
  public final static int CONTENT_INSPECT_DEVICE_AGORA = 1;
  public final static int CONTENT_INSPECT_DEVICE_HIVE = 2;
  public final static int CONTENT_INSPECT_DEVICE_TUPU = 3;
  public final static int CONTENT_INSPECT_VENDOR_AGORA = 1;
  public final static int CONTENT_INSPECT_VENDOR_TUPU = 2;
  public static final int CONTENT_INSPECT_VENDOR_HIVE = 3;
  public static final int MAX_CONTENT_INSPECT_MODULE_COUNT = 32;
  public String extraInfo;
  public int ContentWorkType;
  public int DeviceworkType;
  public ContentInspectModule[] modules;
  public int moduleCount;
  public static class ContentInspectModule {
    public int type;
    public int vendor;
    public String callbackUrl;
    public String token;
    public int frequency;
    public ContentInspectModule() {
      type = CONTENT_INSPECT_TYPE_INVALID;
      vendor = CONTENT_INSPECT_VENDOR_AGORA;
      frequency = 0;
    }
  }
  public ContentInspectConfig() {
    modules = new ContentInspectModule[MAX_CONTENT_INSPECT_MODULE_COUNT];
    for (int i = 0; i &lt; MAX_CONTENT_INSPECT_MODULE_COUNT; i++) {
      modules[i] = new ContentInspectModule();
    }
    moduleCount = 0;
  }
}</codeblock>
            <codeblock props="ios mac">__attribute__((visibility("default"))) @interface AgoraContentInspectConfig: NSObject
@property (nonatomic, copy) NSString* _Nullable extraInfo;
@property (assign, nonatomic) AgoraContentInspectWorkType ContentWorkType;
@property (assign, nonatomic) AgoraContentInspectDeviceType deviceworkType;
@property(copy, nonatomic) NSArray&lt;AgoraContentInspectModule*>* _Nullable modules;
@end
</codeblock>
            <codeblock props="cpp" outputclass="language-cpp">struct ContentInspectConfig {
  CONTENT_INSPECT_WORK_TYPE ContentWorkType;
 
  CONTENT_INSPECT_DEVICE_TYPE DeviceworkType;
  const char* extraInfo;
 
  ContentInspectModule modules[MAX_CONTENT_INSPECT_MODULE_COUNT];
  int moduleCount;
   ContentInspectConfig&amp; operator=(const ContentInspectConfig&amp; rth)
    {
        ContentWorkType = rth.ContentWorkType;
        DeviceworkType = rth.DeviceworkType;
        extraInfo = rth.extraInfo;
        moduleCount = rth.moduleCount;
        memcpy(&amp;modules, &amp;rth.modules,  MAX_CONTENT_INSPECT_MODULE_COUNT * sizeof(ContentInspectModule));
        return *this;
    }
  ContentInspectConfig() :ContentWorkType(CONTENT_INSPECT_WORK_CLOUD),DeviceworkType(CONTENT_INSPECT_DEVICE_INVALID),extraInfo(NULL), moduleCount(0){}
};</codeblock>
            <codeblock props="electron" outputclass="language-typescript"/>
            <codeblock props="rn" outputclass="language-typescript"/>
            <codeblock props="flutter" outputclass="language-dart">class ContentInspectConfig {
                  final String? extraInfo;

                  final List&lt;ContentInspectModule&gt; modules;

                  final int moduleCount;

                  const ContentInspectConfig(
                      {required this.modules, this.extraInfo, this.moduleCount = 0});

                  factory ContentInspectConfig.fromJson(Map&lt;String, dynamic&gt; json) =>
                      _$ContentInspectConfigFromJson(json);

                  Map&lt;String, dynamic&gt; toJson() => _$ContentInspectConfigToJson(this);
                }</codeblock> </p>
        </section>
        <section id="detailed_desc"/>
        <section id="parameters">
            <title><text
            conref="../conref/conref_api_metadata.dita#conref_api_metadata/property"
            /></title>
            <parml>
            <plentry>
                <pt props="native">ContentWorkType</pt>
                <pd>鉴黄服务的类型。详见<xref keyref="CONTENT_INSPECT_WORK_TYPE"/>。
                    
                    <ul props="android">
                    <li><codeph>CONTENT_INSPECT_TYPE_WORK_DEVICE(0)</codeph>：客户端，即通过客户端 Agora SDK 对视频内容进行截图并进行鉴黄。</li>
                    <li><codeph>CONTENT_INSPECT_TYPE_WORK_CLOUD(1)</codeph>：云端，即通过客户端 Agora SDK 对视频内容进行截图并上传至云端服务器，由云端内容审核服务进行鉴黄。</li>
                    <li><codeph>CONTENT_INSPECT_TYPE_WORK_DEVICE_CLOUD</codeph>：端云融合，即先通过客户端 Agora SDK 对视频内容截图并进行鉴黄，如果审核结果不确定，则将视频截图上传至云端服务器，由云端内容审核服务再次鉴黄。</li>
                    </ul> </pd>
            </plentry>
            <plentry props="native">
                <pt>DeviceworkType</pt>
                <pd>客户端鉴黄算法类型。详见<xref keyref="CONTENT_INSPECT_DEVICE_TYPE"/>。 
                    
                    <ul props="android">
                    <li><codeph>CONTENT_INSPECT_DEVICE_INVALID (0)</codeph>：（默认）无效值。</li>
                    <li><codeph>CONTENT_INSPECT_DEVICE_AGORA (1)</codeph>：通过 Agora SDK 进行鉴黄。</li>
                    </ul></pd>
            </plentry>
            <plentry props="unity">
                <pt>DeviceWork</pt>
                <pd props="native">是否在设备端进行鉴黄。
                    
                    <ul>
                    <li><codeph><ph keyref="true"/></codeph>: 在设备端进行鉴黄。</li>
                    <li><codeph><ph keyref="false"
                        /></codeph>:（默认）不在设备端进行鉴黄。</li>
                    </ul></pd>
            </plentry>
            <plentry>
                <pt props="android cpp unity">CloudWork</pt>
                <pt props="ios mac">cloudwork</pt>
                <pd>是否在云端进行鉴黄。
                    
                    <ul>
                    <li><codeph><ph keyref="true"/></codeph>: 在云端进行鉴黄。</li>
                    <li><codeph><ph keyref="false"/></codeph>:（默认）不在云端进行鉴黄。</li>
                    </ul></pd>
            </plentry>
            <plentry>
                <pt props="android cpp unity">DeviceworkType</pt>
                <pt props="ios mac">deviceworkType</pt>
                <pd>在设备端进行鉴黄的具体类型。详见<xref keyref="CONTENT_INSPECT_DEVICE_TYPE"
                    />。</pd>
            </plentry>
            <plentry>
                <pt>extraInfo</pt>
                <pd>
                    <p>附加信息，最大长度为 1024 字节。</p>
                    <p>SDK 会将附加信息和截图一起上传至 Agora 内容审核服务器；审核完成后，Agora 内容审核服务器会将附加信息随审核结果一起发送给你的服务器。</p>
                </pd>
            </plentry>
            <plentry>
                <pt>modules</pt>
                <pd>
                    <p>内容审核模块。详见 <xref keyref="ContentInspectModule"/>。</p>
                    <p>最多支持配置 32 个 <xref keyref="ContentInspectModule"
                    /> 实例，<parmname>MAX_CONTENT_INSPECT_MODULE_COUNT</parmname> 的取值范围为 [1,32] 中的整数。</p>
                </pd>
            </plentry>
            <plentry>
                <pt>moduleCount</pt>
                <pd>内容审核模块数，即配置的 <xref keyref="ContentInspectModule"
                    /> 实例的数量。最大值为 32。</pd>
            </plentry>
            </parml> </section>
    </refbody>
</reference>

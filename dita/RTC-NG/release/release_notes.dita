<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="release_notes">
    <title>v4.3.1</title>
    <body>
        <p>该版本于 20xx 年 x 月 x 日发布。</p>
    </body>
    <topic id="level2">
        <title/>
        <topic id="compatibility" props="android">
            <title>升级必看</title>
            <body>
                <p>为确保参数命名的一致性，该版本该版本将 <codeph><xref keyref="joinChannel1"/></codeph> 中的 <codeph>channelName</codeph> 改为 <codeph>channelId</codeph>，将 <codeph>optionalUid</codeph> 改为 <codeph>uid</codeph>。为确保项目的正常运行，你需要在升级到该版本后更新 App 中的代码。</p>
            </body>
        </topic>
        <topic id="newfeature">
            <title>新增特性</title>
            <body>
                <ol>
                    <li><ph><b>语音驱动虚拟人</b></ph>
                        <p>SDK 新增语音驱动插件，可以将语音信息转换为对应口型的人脸信息，用于驱动虚拟人面部做出语音对应的口型变化。你可以通过该版本新增的 <xref keyref="registerFaceInfoObserver"/> 方法和 <xref keyref="onFaceInfo"/> 回调获取语音驱动插件处理后的人脸信息。该人脸信息为符合 ARkit 标准的 BS（Blend Shape）数据，你可以使用第三方 3D 渲染引擎对 BS 数据进一步处理。</p>
                        <p>语音驱动插件为可裁剪动态库，集成后 App 增加的体积等信息详见<xref keyref="reduce-app-size"/>。</p>
                        <note type="attention">
                            <ul>
                                <li>声网 SDK 拓展插件 MetaKit 可帮助你简化语音驱动虚拟人的实现流程，无需自行搭建采集、编码和传输的框架。有关 MetaKit 的介绍和集成指导，详见 <xref keyref="metakit-overview"/>。</li>
                                <li>语音驱动虚拟人功能处于公测阶段，如需使用请<xref keyref="ticket-link"/>。</li>
                            </ul>
                        </note>
                    </li>
                    <li props="android ios flutter unity rn"><ph><b>摄像头广角和超广角 (Android, iOS)</b></ph>
                        <p>为了让用户捕捉到更宽阔的视野和更完整的画面内容，该版本新增了对广角和超广角摄像头的支持。你可以先调用 <xref keyref="queryCameraFocalLengthCapability"/> 查询设备支持的焦距能力，然后调用 <xref keyref="setCameraCapturerConfiguration"/> 并将 <codeph>cameraFocalLengthType</codeph> 设置为支持的焦距类型，包括广角、超广角等。</p>
                    </li>
                    <li props="android flutter unity rn"><ph><b>摄像头多路采集 (Android)</b></ph>
                        <p>该版本针对 Android 摄像头采集新增以下功能：
                        <ol>
                        <li>支持第三个和第四个摄像头视频流的采集和发布。<ul>
                            <li props="android">在 <xref keyref="VIDEO_SOURCE_TYPE"/> 中新增 <codeph><apiname keyref="VIDEO_SOURCE_CAMERA_THIRD"/></codeph>(11) 和 <codeph><apiname keyref="VIDEO_SOURCE_CAMERA_FOURTH"/></codeph>(12) 枚举，分别用于指定视频源为第三个和第四个摄像头。此项改动允许你在调用 <xref keyref="startCameraCapture"/> 开启摄像头采集时，指定最多 4 路摄像头采集的视频流。</li>
                            <li props="flutter unity rn"><xref keyref="VIDEO_SOURCE_TYPE"/> 中的 <codeph><apiname keyref="VIDEO_SOURCE_CAMERA_THIRD"/></codeph>(11) 和 <codeph><apiname keyref="VIDEO_SOURCE_CAMERA_FOURTH"/></codeph>(12) 枚举新增对 Android 的支持，分别用于指定视频源为第三个和第四个摄像头。此项改动允许你在调用 <xref keyref="startCameraCapture"/> 开启摄像头采集时，指定最多 4 路摄像头采集的视频流。</li>
                            <li props="android">在 <xref keyref="ChannelMediaOptions"/> 中新增 <codeph>publishThirdCameraTrack</codeph> 和 <codeph>publishFourthCameraTrack</codeph> 成员。调用 <xref keyref="joinChannel2"/> 加入频道时，将这两个成员参数设置为 <codeph><ph keyref="true"/></codeph> 即可在频道内发布第三个和第四个摄像头采集的视频流。</li>
                            <li props="flutter unity rn"><xref keyref="ChannelMediaOptions"/> 中的 <codeph>publishThirdCameraTrack</codeph> 和 <codeph>publishFourthCameraTrack</codeph> 成员新增对 Android 的支持。调用 <xref keyref="joinChannel2"/> 加入频道时，将这两个成员参数设置为 <codeph><ph keyref="true"/></codeph> 即可在频道内发布第三个和第四个摄像头采集的视频流。</li></ul></li>
                        <li>支持通过摄像头 ID 指定摄像头。
                            <ul props="android">
                            <li>在 <xref keyref="CameraCapturerConfiguration"/> 中新增 <codeph>cameraId</codeph> 成员。对于多摄像头的设备，<codeph>cameraDirection</codeph> 无法识别或访问全部可用摄像头。这种情况下，你可以通过 Android 原生系统 API 获取摄像头 ID，再调用 <xref keyref="startCameraCapture"/> 并传入 <codeph>cameraId</codeph> 指定所需的摄像头。</li>
                            <li>新增 <xref keyref="switchCamera2"/>，支持通过 <codeph>cameraId</codeph> 切换摄像头，允许 App 在运行期间基于可用摄像头的实际情况动态调整摄像头使用。</li></ul>
                            <p props="flutter unity rn">在 <xref keyref="CameraCapturerConfiguration"/> 中新增 <codeph>cameraId</codeph> 成员。对于多摄像头的设备，特别是当设备支持外接摄像头时，<codeph>cameraDirection</codeph> 无法识别或访问全部可用摄像头。这种情况下，你通过系统 API 获取摄像头 ID，再调用 <xref keyref="startCameraCapture"/> 并传入 <codeph>cameraId</codeph> 指定摄像头。</p></li>
                        </ol>
                        </p>
                    </li>
                    <li><ph><b>数据流加密</b></ph>
                        <p>该版本在 <codeph><xref keyref="EncryptionConfig"/></codeph> 中新增 <codeph>datastreamEncryptionEnabled</codeph> 成员用于启用数据流加密。你可以在调用 <codeph><xref keyref="enableEncryption"/></codeph> 开启加密时来进行设置。如果在数据流加密或解密的过程中遇到问题导致失败，你可以通过新增的 <codeph><apiname keyref="ENCRYPTION_ERROR_DATASTREAM_DECRYPTION_FAILURE"/></codeph>  和 <codeph><apiname keyref="ENCRYPTION_ERROR_DATASTREAM_ENCRYPTION_FAILURE"/></codeph> 枚举得知。</p>
                    </li>                    <li><ph><b></b></ph>
                        <p></p>
                    </li>
                    <li><ph><b>其他</b></ph>
                        <p>
                        <ul>
                        <li>新增 <codeph><xref keyref="enableEncryptionEx"/></codeph> 方法，用于多频道场景下开启媒体流或数据流加密。</li>
                        <li>新增 <codeph><xref keyref="setAudioMixingPlaybackSpeed"/></codeph> 方法，用于设置音乐文件的播放速度。</li>
                        <li>新增 <codeph><xref keyref="getCallIdEx"/></codeph> 方法，用于多频道场景下获取通话 ID。。</li>
                        </ul></p>
                    </li>
                </ol>
            </body>
        </topic>
        <topic id="improvement">
            <title>改进</title>
            <body>
                <ol>
                    <li props="mac"><ph><b>获取音频设备类型</b></ph>
                        <p>该版本在 <codeph><xref keyref="AgoraRtcDeviceInfo"/></codeph> 中新增 <codeph>deviceTypeName</codeph> 成员，用于获取音频设备的类型，如 built-in、USB、HDMI 等。</p>
                    </li>
                    <li><ph><b>虚拟背景算法优化</b></ph>
                        <p>为了提高纯色背景下开启虚拟背景时人像分割的精确度和稳定性，该版本优化了绿幕分割算法：
                        <ul>
                            <li>支持识别任意纯色背景，不再局限于绿幕。</li>
                            <li>对背景颜色的识别更加准确，并且在分割人像时露出的背景更少。</li>
                            <li>分割后的人像边缘（尤其是手指边缘）更加稳定，显著减少边缘的画面闪动现象。</li>
                        </ul></p>
                    </li>
                    <li props="ios mac"><ph><b>音频自采集优化</b></ph>
                        <p>为提升音频自采集的灵活性，该版本废弃 <xref keyref="pushExternalAudioFrameSampleBuffer1"/> 并新增 <xref keyref="pushExternalAudioFrameSampleBuffer2"/>。相比废弃方法，新增方法中增加了 <codeph>sampleRate</codeph>、<codeph>channels</codeph>、<codeph>trackId</codeph> 参数，支持你通过自定义音频轨道将外部 CMSampleBuffer 音频数据推送到频道内，并支持设置外部音频源的采样率和声道数。</p>
                    </li>
                    <li><ph><b>降低耳返的 CPU 消耗</b></ph>
                        <p>该版本<ph props="apple cpp framework">在 <codeph><apiname keyref="EAR_MONITORING_FILTER_TYPE"/></codeph> 中</ph>新增 <codeph><apiname keyref="EAR_MONITORING_FILTER_REUSE_POST_PROCESSING_FILTER"/></codeph>(1 &lt;&lt;15) 枚举。针对复杂的音效处理场景，你可以指定该选项，复用发送端音效处理后的 Audio filter，从而降低 CPU 的消耗。需要注意的是该选项会导致耳返延迟增加，适用于对耳返延迟不敏感的使用场景。</p>
                    </li>
                    <li><ph><b>其他改进</b></ph>
                        <p>该版本还进行了如下改进：
                        <ul>
                        <li>优化了媒体播放器对 WebM 格式视频的处理能力，支持渲染 alpha 通道。</li>
                        <li props="cpp apple framework">在 <codeph><xref keyref="AUDIO_EFFECT_PRESET"/></codeph> 中新增 <codeph><apiname keyref="ROOM_ACOUSTICS_CHORUS"/></codeph>（合唱音效），可使人声在合唱场景下更具空间立体感。</li>
                        <li props="android">新增 <codeph><apiname keyref="ROOM_ACOUSTICS_CHORUS"/></codeph>（合唱音效），可使人声在合唱场景下更具空间立体感。</li>
                        <li>在 <codeph><xref keyref="RemoteAudioStats"/></codeph> 中新增 <codeph>e2eDelay</codeph>，用于报告从发送端采集音频起，到接收端开始播放音频时的延时。</li>
                        </ul></p>
                    </li>
                </ol>
            </body>
        </topic>
        <topic id="bugfix">
            <title>问题修复</title>
            <body>
                <p>该版本修复了以下问题：</p>
                <ul>
                    <li>使用媒体播放器播放包含 SEI 数据的媒体流时，SEI 数据的输出与视频渲染不同步。</li>
                    <li props="cpp mac">用户插拔一次蓝牙或有线耳机，音频状态改变回调 <codeph><xref keyref="onAudioDeviceStateChanged"/></codeph> 会触发多次。</li>
                    <li props="unity">播放指定用户混音前的音频流时偶现回声。(macOS、Windows)</li>
                    <li props="android unity rn flutter">主播使用部分型号设备在扬声器下进行音视频互动，之后切换 App 进程到后台再切回前台，偶现本地音频采集失败，远端用户听不到主播的声音。(Android)</li>
                    <li props="cpp electron unity flutter">屏幕共享场景中，App 调用 <xref keyref="enableLoopbackRecording"/> 开启声卡采集功能采集共享屏幕的音频，本地用户手动禁用本地音频采集设备后，声卡采集的音频发送失败，远端用户听不见共享屏幕的声音。(Windows)</li>
                    <li props="mac electron">在音视频互动中，如果用户将耳机插入设备并手动将系统音频输出切换为扬声器，之后 App 调用 <xref keyref="setPlaybackDevice"/> 方法指定音频播放设备为耳机，用户移除耳机后，音频输出并未按预期行为切换至扬声器。<ph props="electron"> (macOS)</ph></li>
                </ul>
            </body>
        </topic>
        <topic id="apichange">
            <title>API 变更</title>
            <body>
                <p><b>新增</b>
                    <ul>
                    <li><codeph><xref keyref="EncryptionConfig"/></codeph> 中新增 <codeph>datastreamEncryptionEnabled</codeph></li>
                    <li props="cpp apple framework"><codeph><xref keyref="ENCRYPTION_ERROR_TYPE"/></codeph> 中新增如下枚举：
                    <ul>
                        <li><codeph><apiname keyref="ENCRYPTION_ERROR_DATASTREAM_DECRYPTION_FAILURE"/></codeph></li>
                        <li><codeph><apiname keyref="ENCRYPTION_ERROR_DATASTREAM_ENCRYPTION_FAILURE"/></codeph></li>
                    </ul></li>
                    <li props="android"><codeph><apiname keyref="ENCRYPTION_ERROR_DATASTREAM_DECRYPTION_FAILURE"/></codeph></li>
                    <li props="android"><codeph><apiname keyref="ENCRYPTION_ERROR_DATASTREAM_ENCRYPTION_FAILURE"/></codeph></li>
                    <li props="cpp"><codeph><xref keyref="getDevice2_IAudioDeviceCollection"/></codeph><ph> (macOS)</ph></li>
                    <li props="cpp"><codeph><xref keyref="getDefaultDevice2_IAudioDeviceCollection"/></codeph><ph> (macOS)</ph></li>
                    <li props="cpp"><codeph><xref keyref="getPlaybackDeviceInfo2"/></codeph><ph> (macOS)</ph></li>
                    <li props="cpp"><codeph><xref keyref="getRecordingDeviceInfo2"/></codeph><ph> (macOS)</ph></li>
                    <li props="mac"><codeph><xref keyref="AgoraRtcDeviceInfo"/></codeph> 新增 <codeph>deviceTypeName</codeph></li>
                    <li><codeph><xref keyref="RemoteAudioStats"/></codeph> 新增 <codeph>e2eDelay</codeph></li>
                    <li props="apple cpp framework"><codeph><xref keyref="ERROR_CODE_TYPE"/></codeph> 新增 <codeph><apiname keyref="ERR_DATASTREAM_DECRYPTION_FAILED"/></codeph></li>
                    <li props="android"><codeph><apiname keyref="ERR_DATASTREAM_DECRYPTION_FAILED"/></codeph></li>
                    <li props="apple cpp framework"><codeph><xref keyref="AUDIO_EFFECT_PRESET"/></codeph> 新增 <codeph><apiname keyref="ROOM_ACOUSTICS_CHORUS"/></codeph></li>
                    <li props="android"><codeph><apiname keyref="ROOM_ACOUSTICS_CHORUS"/></codeph></li>
                    <li><xref keyref="registerFaceInfoObserver"/></li>
                    <li props="electron rn flutter unity"><xref keyref="unregisterFaceInfoObserver"/></li>
                    <li><xref keyref="IFaceInfoObserver"/></li>
                    <li><xref keyref="onFaceInfo"/></li>
                    <li><xref keyref="getCallIdEx"/></li>
                    <li props="android ios flutter unity rn"><xref keyref="queryCameraFocalLengthCapability"/> (Android, iOS)</li>
                    <li props="android ios flutter unity rn"><codeph><apiname keyref="FocalLengthInfo"/></codeph> (Android, iOS)</li>
                    <li props="android ios flutter unity rn"><codeph><apiname keyref="CAMERA_FOCAL_LENGTH_TYPE"/></codeph> (Android, iOS)</li>
                    <li props="android ios flutter unity rn"><codeph><apiname keyref="CameraCapturerConfiguration"/></codeph> 新增成员 <codeph>cameraFocalLengthType</codeph> (Android, iOS)</li>
                    <li props="android flutter unity rn"><codeph><apiname keyref="VIDEO_SOURCE_TYPE"/></codeph> 新增以下枚举：(Android)<ul>
                        <li><codeph><apiname keyref="VIDEO_SOURCE_CAMERA_THIRD"/></codeph>(11)</li>
                        <li><codeph><apiname keyref="VIDEO_SOURCE_CAMERA_FOURTH"/></codeph>(12)</li></ul></li>
                    <li props="android flutter unity rn"><codeph><apiname keyref="ChannelMediaOptions"/></codeph> 新增以下成员：(Android)<ul>
                        <li><codeph>publishThirdCameraTrack</codeph></li>
                        <li><codeph>publishFourthCameraTrack</codeph></li></ul></li>
                    <li props="android flutter unity rn"><codeph><apiname keyref="CameraCapturerConfiguration"/></codeph> 新增成员 <codeph>cameraId</codeph> (Android)</li>
                    <li props="android"><codeph><apiname keyref="CAMERA_DIRECTION"/></codeph> 中新增 <codeph>CAMERA_EXTRA</codeph>(2)</li>
                    <li props="android"><xref keyref="switchCamera2"/></li>
                    <li><codeph><apiname keyref="EAR_MONITORING_FILTER_TYPE"/></codeph> 新增枚举 <codeph><apiname keyref="EAR_MONITORING_FILTER_BUILT_IN_AUDIO_FILTERS"/></codeph>(1 &lt;&lt;15)</li>
                    <li props="ios mac"><xref keyref="pushExternalAudioFrameSampleBuffer2"/></li>
                    </ul></p>
                <p><b>废弃</b>
                    <ul>
                    <li props="ios mac"><xref keyref="pushExternalAudioFrameSampleBuffer1"/></li>
                    <li></li>
                    </ul></p>
                <p><b>删除</b>
                    </p>
            </body>
        </topic>
    </topic>
</topic>

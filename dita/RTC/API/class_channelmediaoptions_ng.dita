<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="class_channelmediaoptions">
    <title><ph keyref="ChannelMediaOptions" /></title>
    <shortdesc id="short"><ph id="shortdesc">The channel media options.</ph></shortdesc>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public class ChannelMediaOptions {
  public Boolean publishCameraTrack;
  public Boolean publishScreenTrack;
  public Boolean publishCustomAudioTrack;
  public Boolean publishCustomAudioTrackEnableAec;
  public Boolean publishCustomVideoTrack;
  public Boolean publishEncodedVideoTrack;
  public Boolean publishMediaPlayerAudioTrack;
  public Boolean publishMediaPlayerVideoTrack;
  public Integer publishMediaPlayerId;
  public Boolean publishAudioTrack;
  public Boolean autoSubscribeAudio;
  public Boolean autoSubscribeVideo;
  public Boolean enableAudioRecordingOrPlayout;
  public Integer clientRoleType;
  public Integer defaultVideoStreamType;
  public Integer channelProfile;
  public Integer audioDelayMs;
}</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">__attribute__((visibility("default"))) @interface AgoraRtcChannelMediaOptions : NSObject

@property(strong, nonatomic) AgoraRtcBoolOptional* _Nullable publishCameraTrack;
@property(strong, nonatomic) AgoraRtcBoolOptional* _Nullable publishScreenTrack;
@property(strong, nonatomic) AgoraRtcBoolOptional* _Nullable publishCustomAudioTrack;
@property(strong, nonatomic) AgoraRtcBoolOptional* _Nullable publishCustomAudioTrackEnableAec;
@property(strong, nonatomic) AgoraRtcBoolOptional* _Nullable publishCustomVideoTrack;
@property(strong, nonatomic) AgoraRtcBoolOptional* _Nullable publishEncodedVideoTrack;
@property(strong, nonatomic) AgoraRtcBoolOptional* _Nullable publishMediaPlayerAudioTrack;
@property(strong, nonatomic) AgoraRtcBoolOptional* _Nullable publishMediaPlayerVideoTrack;
@property(strong, nonatomic) AgoraRtcIntOptional* _Nullable publishMediaPlayerId;
@property(strong, nonatomic) AgoraRtcBoolOptional* _Nullable publishAudioTrack;
@property(strong, nonatomic) AgoraRtcBoolOptional* _Nullable autoSubscribeAudio;
@property(strong, nonatomic) AgoraRtcBoolOptional* _Nullable autoSubscribeVideo;
@property(strong, nonatomic) AgoraRtcBoolOptional* _Nullable enableAudioRecordingOrPlayout;
@property(strong, nonatomic) AgoraRtcIntOptional* _Nullable clientRoleType;
@property(strong, nonatomic) AgoraRtcIntOptional* _Nullable defaultVideoStreamType;
@property(strong, nonatomic) AgoraRtcIntOptional* _Nullable channelProfile;
@property(strong, nonatomic) AgoraRtcIntOptional* _Nullable audioDelayMs;
@end</codeblock>
            <codeblock props="windows" outputclass="language-cpp">struct ChannelMediaOptions {
  Optional&lt;bool&gt; publishCameraTrack;
  Optional&lt;bool&gt; publishAudioTrack;
  Optional&lt;bool&gt; publishScreenTrack;
  Optional&lt;bool&gt; publishCustomAudioTrack;
  Optional&lt;bool&gt; publishCustomVideoTrack;
  Optional&lt;bool&gt; publishEncodedVideoTrack;
  Optional&lt;bool&gt; publishMediaPlayerAudioTrack;
  Optional&lt;bool&gt; publishMediaPlayerVideoTrack;
  Optional&lt;bool&gt; autoSubscribeAudio;
  Optional&lt;bool&gt; autoSubscribeVideo;
  Optional&lt;bool&gt; enableAudioRecordingOrPlayout;
  Optional&lt;int&gt; publishMediaPlayerId;
  Optional&lt;CLIENT_ROLE_TYPE&gt; clientRoleType;
  Optional&lt;VIDEO_STREAM_TYPE&gt; defaultVideoStreamType;
  Optional&lt;CHANNEL_PROFILE_TYPE&gt; channelProfile;
  Optional&lt;int&gt; audioDelayMs;
  ChannelMediaOptions() {}
  ~ChannelMediaOptions() {}
...
};
</codeblock>
            <codeblock props="electron" outputclass="language-typescript" />
            <codeblock props="unity" outputclass="language-csharp" />
            <codeblock props="rn" outputclass="language-typescript" />
            <codeblock props="flutter" outputclass="language-dart">class ChannelMediaOptions {

  bool? publishCameraTrack;

  bool? publishSecondaryCameraTrack;

  bool? publishAudioTrack;

  bool? publishScreenTrack;

  bool? publishSecondaryScreenTrack;

  bool? publishCustomAudioTrack;

  bool? publishCustomAudioTrackEnableAec;

  bool? publishCustomVideoTrack;

  bool? publishEncodedVideoTrack;

  bool? publishMediaPlayerAudioTrack;

  bool? publishMediaPlayerVideoTrack;

  bool? publishTrancodedVideoTrack;

  bool? autoSubscribeAudio;

  bool? autoSubscribeVideo;

  bool? enableAudioRecordingOrPlayout;

  int? publishMediaPlayerId;

  CLIENT_ROLE_TYPE? clientRoleType;

  VIDEO_STREAM_TYPE? defaultVideoStreamType;

  CHANNEL_PROFILE_TYPE? channelProfile;

  int? audioDelayMs;

  String? token;
  ChannelMediaOptions({
    this.publishCameraTrack,
    this.publishSecondaryCameraTrack,
    this.publishAudioTrack,
    this.publishScreenTrack,
    this.publishSecondaryScreenTrack,
    this.publishCustomAudioTrack,
    this.publishCustomAudioTrackEnableAec,
    this.publishCustomVideoTrack,
    this.publishEncodedVideoTrack,
    this.publishMediaPlayerAudioTrack,
    this.publishMediaPlayerVideoTrack,
    this.publishTrancodedVideoTrack,
    this.autoSubscribeAudio,
    this.autoSubscribeVideo,
    this.enableAudioRecordingOrPlayout,
    this.publishMediaPlayerId,
    this.clientRoleType,
    this.defaultVideoStreamType,
    this.channelProfile,
    this.audioDelayMs,
    this.token,
  });
    factory ChannelMediaOptions.fromJson(Map&lt;String, dynamic&gt; json) =&gt;
      _$ChannelMediaOptionsFromJson(json);
    Map&lt;String, dynamic&gt; toJson() =&gt; _$ChannelMediaOptionsToJson(this);
}</codeblock>
            </p>
        </section>
        <section id="parameters">
            <title><text conref="../conref/conref_api_metadata.dita#metadata/property" /></title>
            <parml>
                <plentry>
                    <pt>publishCameraTrack</pt>
                    <pd>Whether to publish the video captured by the camera:<ul id="ul_vx5_np5_3qb">
                        <li><codeph><ph keyref="true" /></codeph>: (Default) Publish the video captured by the camera.</li>
                        <li><codeph><ph keyref="false" /></codeph>: Do not publish the video captured by the camera.</li>
                        </ul></pd>
                </plentry>
                <plentry>
                    <pt>publishSecondaryCameraTrack</pt>
                    <pd props="android ios mac windows">Whether to publish the secondary camera track:<ul>
                        <li><codeph><ph keyref="true" /></codeph>: (Default) Publish the secondary camera track.</li>
                        <li><codeph><ph keyref="false" /></codeph>: Do not publish the secondary camera track.</li>
                    </ul></pd>
                    <pd props="flutter rn">Reserved parameter.</pd>
                </plentry>
                <plentry>
                    <pt>publishAudioTrack</pt>
                    <pd>Whether to publish the captured audio:<ul>
                            <li><codeph><ph keyref="true" /></codeph>: (Default) Publish the captured audio.</li>
                            <li><codeph><ph keyref="false" /></codeph>: Do not publish the captured audio.</li>
                        </ul></pd>
                </plentry>
                <plentry>
                    <pt>publishScreenTrack</pt>
                    <pd props="android ios mac windows">
                        <p>Whether to publish the captured video from the screen:<ul>
                                <li><codeph><ph keyref="true" /></codeph>: Publish the captured video from the screen.</li>
                                <li><codeph><ph keyref="false" /></codeph>: (Default) Do not publish the captured video from the screen.</li>
                            </ul></p>
                    </pd>
                    <pd props="flutter rn">Reserved parameter.</pd>
                </plentry>
                <plentry>
                    <pt>publishCustomAudioTrack</pt>
                    <pd props="android ios mac windows">Whether to publish the captured audio from a custom source:<ul>
                            <li><codeph><ph keyref="true" /></codeph>: Publish the captured audio from a custom source.</li>
                            <li><codeph><ph keyref="false" /></codeph>: (Default) Do not publish the captured audio from the custom source.</li>
                        </ul></pd>
                        <pd props="flutter rn">Reserved parameter.</pd>
                </plentry>
                <plentry>
                    <pt>publishCustomVideoTrack</pt>
                    <pd props="android ios mac windows">Whether to publish the captured video from a custom source:<ul>
                            <li><codeph><ph keyref="true" /></codeph>: Publish the captured video from a custom source.</li>
                            <li><codeph><ph keyref="false" /></codeph>: (Default) Do not publish the captured video from the custom source.</li>
                        </ul></pd>
                        <pd props="flutter rn">Reserved parameter.</pd>
                </plentry>
                <plentry>
                    <pt>publishEncodedVideoTrack</pt>
                    <pd props="android ios mac windows">Whether to publish the encoded video:<ul id="ul_ljg_4q5_3qb">
                            <li><codeph><ph keyref="true" /></codeph>: Publish the encoded video.</li>
                            <li><codeph><ph keyref="false" /></codeph>: (Default) Do not publish the encoded video.</li>
                        </ul></pd>
                        <pd props="flutter rn">Reserved parameter.</pd>
                </plentry>
                <plentry>
                    <pt>publishMediaPlayerAudioTrack</pt>
                    <pd props="android ios mac windows">Whether to publish the audio from the media player:<ul id="ul_gr3_rq5_3qb">
                            <li><codeph><ph keyref="true" /></codeph>: Publish the audio from the media player.</li>
                            <li><codeph><ph keyref="false" /></codeph>: (Default) Do not publish the audio from the media player.</li>
                        </ul></pd>
                        <pd props="flutter rn">Reserved parameter.</pd>
                </plentry>
                <plentry>
                    <pt>publishMediaPlayerVideoTrack</pt>
                    <pd props="android ios mac windows">Whether to publish the video from the media player:<ul id="ul_gtd_tq5_3qb">
                            <li><codeph><ph keyref="true" /></codeph>: Publish the video from the media player.</li>
                            <li><codeph><ph keyref="false" /></codeph>: (Default) Do not publish the video from the media player.</li>
                        </ul></pd>
                        <pd props="flutter rn">Reserved parameter.</pd>
                </plentry>
                <plentry>
                    <pt>autoSubscribeAudio</pt>
                    <pd>Whether to automatically subscribe to all remote audio streams when the user joins a channel:<ul id="ul_gxf_vq5_3qb">
                            <li><codeph><ph keyref="true" /></codeph>: (Default) Subscribe to all remote audio streams.</li>
                            <li><codeph><ph keyref="false" /></codeph>:Do not subscribe to any remote audio stream.</li>
                        </ul></pd>
                </plentry>
                <plentry>
                    <pt>autoSubscribeVideo</pt>
                    <pd>Whether to subscribe to all remote video streams when the user joins the channel:<ul id="ul_gfh_xq5_3qb">
                            <li><codeph><ph keyref="true" /></codeph>: Subscribe to all remote video streams.</li>
                            <li><codeph><ph keyref="false" /></codeph>: (Default) Do not subscribe to any remote video stream.</li>
                        </ul></pd>
                </plentry>
                <plentry>
                    <pt>publishMediaPlayerId</pt>
                    <pd props="android ios mac windows">The ID of the media player to be published. The default value is 0.</pd>
                    <pd props="flutter rn">Reserved parameter.</pd>
                </plentry>
                <plentry>
                    <pt>clientRoleType</pt>
                    <pd conkeyref="setClientRole1/clientrole" />
                </plentry>
                <plentry>
                    <pt>defaultVideoStreamType</pt>
                    <pd conkeyref="setRemoteDefaultVideoStreamType/defaultstreamtype" />
                </plentry>
                <plentry>
                    <pt>channelProfile</pt>
                    <pd conkeyref="setChannelProfile/channelprofiletype" />
                </plentry>
            </parml>
        </section>
    </refbody>
</reference>
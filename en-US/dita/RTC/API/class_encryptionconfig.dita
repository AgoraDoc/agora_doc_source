<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="class_encryptionconfig">
    <title><ph keyref="EncryptionConfig" /></title>
    <shortdesc id="short"><ph id="shortdesc">Configurations of built-in encryption.</ph></shortdesc>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock" props="rtc-ng">
                <codeblock props="windows" outputclass="language-cpp">struct EncryptionConfig {
  ENCRYPTION_MODE encryptionMode;
  const char* encryptionKey;
  uint8_t encryptionKdfSalt[32];

  EncryptionConfig()
    : encryptionMode(AES_128_GCM2),
      encryptionKey(NULL)
  {
    memset(encryptionKdfSalt, 0, sizeof(encryptionKdfSalt));
  }

  const char* getEncryptionString() const {
    switch(encryptionMode) {
      case AES_128_XTS:
        return "aes-128-xts";
      case AES_128_ECB:
        return "aes-128-ecb";
      case AES_256_XTS:
        return "aes-256-xts";
      case SM4_128_ECB:
        return "sm4-128-ecb";
      case AES_128_GCM:
        return "aes-128-gcm";
      case AES_256_GCM:
        return "aes-256-gcm";
      case AES_128_GCM2:
        return "aes-128-gcm-2";
      case AES_256_GCM2:
        return "aes-256-gcm-2";
      default:
        return "aes-128-gcm-2";
    }
    return "aes-128-gcm-2";
  }
};</codeblock>
            </p>
            <p outputclass="codeblock" props="rtc">
                <codeblock props="windows unity" outputclass="language-cpp">struct EncryptionConfig {
  ENCRYPTION_MODE encryptionMode;
  const char* encryptionKey;
  uint8_t encryptionKdfSalt[32];

  EncryptionConfig() {
    encryptionMode = AES_128_GCM2;
    encryptionKey = nullptr;
    memset(encryptionKdfSalt, 0, sizeof(encryptionKdfSalt));
  }

  const char* getEncryptionString() const {
    switch (encryptionMode) {
      case AES_128_XTS:
        return "aes-128-xts";
      case AES_128_ECB:
        return "aes-128-ecb";
      case AES_256_XTS:
        return "aes-256-xts";
      case SM4_128_ECB:
        return "sm4-128-ecb";
      case AES_128_GCM:
        return "aes-128-gcm";
      case AES_256_GCM:
        return "aes-256-gcm";
      case AES_128_GCM2:
        return "aes-128-gcm-2";
      case AES_256_GCM2:
        return "aes-256-gcm-2";
      default:
        return "aes-128-gcm-2";
    }
    return "aes-128-gcm-2";
  }
};</codeblock>
            </p>
            <p outputclass="codeblock">
                <codeblock props="android" outputclass="language-java">public class EncryptionConfig {
  public enum EncryptionMode {
    AES_128_XTS(1),
    AES_128_ECB(2),
    AES_256_XTS(3),
    SM4_128_ECB(4),
    AES_128_GCM(5),
    AES_256_GCM(6),
    AES_128_GCM2(7),
    AES_256_GCM2(8),
    MODE_END(9);
    private int value;

    private EncryptionMode(int v) {
      value = v;
    }

    public int getValue() {
      return this.value;
    }
}</codeblock>
                <codeblock props="ios mac" outputclass="language-objectivec">__attribute__((visibility("default"))) @interface AgoraEncryptionConfig: NSObject

 @property (assign, nonatomic) AgoraEncryptionMode encryptionMode;
 @property (copy, nonatomic) NSString * _Nullable encryptionKey;
 @property (strong, nonatomic) NSData * _Nullable encryptionKdfSalt;
 @end</codeblock>
                <codeblock props="electron" outputclass="language-typescript">export interface EncryptionConfig {
    encryptionMode: ENCRYPTION_MODE;
    encryptionKey: string;
    }</codeblock>
                <codeblock props="rn" outputclass="language-typescript" />
                <codeblock props="flutter" outputclass="language-dart">class EncryptionConfig {

  EncryptionMode? encryptionMode;
  String? encryptionKey;
  List&lt;int&gt;? encryptionKdfSalt;

  EncryptionConfig({
    this.encryptionMode,
    this.encryptionKey,
    this.encryptionKdfSalt,
  });
}</codeblock>
            </p>
        </section>
        <section id="parameters">
   <title><text conref="../conref/conref_api_metadata.dita#conref_api_metadata/property" /></title>
   <parml>
       <plentry>
  <pt>encryptionMode</pt>
           <pd><p>The built-in encryption mode. See . Agora recommends using  or  encrypted mode. These two modes support the use of salt for higher security.<xref keyref="ENCRYPTION_MODE" /><codeph><ph keyref="AES_128_GCM2" /></codeph><codeph><ph keyref="AES_256_GCM2" /></codeph></p>
  </pd>
       </plentry>
       <plentry>
  <pt>encryptionKey</pt>
  <pd>
      <p>Encryption key in string type.</p>
      <note type="attention"> 如果未指定该参数或将该参数设置为 <codeph><ph keyref="NULL"/></codeph>，则无法启用内置加密，且 SDK 会返回错误码 <codeph>-2</codeph>。</note>
  </pd>
       </plentry>
                <plentry>
                    <pt>encryptionKdfSalt</pt>
                    <pd>
                        <dl outputclass="since" props="rtc">
                            <dlentry>
                                <dt>Since</dt>
                                <dd>v3.4.5</dd>
                            </dlentry>
                        </dl>
                        <p>Salt, 32 bytes in length. Agora recommends that you use OpenSSL to generate salt on the server side, see Media Stream Encryption for details.</p>
                        <note type="attention">This parameter takes effect only in  or  encrypted mode. In this case, ensure that this parameter is not 0.<codeph><ph keyref="AES_128_GCM2" /></codeph><codeph><ph keyref="AES_256_GCM2" /></codeph><codeph></codeph></note>
                    </pd>
                </plentry>
   </parml>
        </section></refbody>
</reference>

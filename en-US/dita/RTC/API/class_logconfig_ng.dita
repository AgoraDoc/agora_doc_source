<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="class_logconfig">
    <title><ph keyref="LogConfig" /></title>
    <shortdesc id="short"><ph id="shortdesc">The configuration of the SDK log files.</ph></shortdesc>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
                <codeblock props="android" outputclass="language-java">public static class LogConfig {
  public String filePath;
  public int fileSizeInKB;
  public int level = Constants.LogLevel.getValue(Constants.LogLevel.LOG_LEVEL_INFO);
}</codeblock>
                <codeblock props="ios mac" outputclass="language-objectivec">__attribute__((visibility("default"))) @interface AgoraRtcEngineConfig: NSObject
 @property (copy, nonatomic) NSString * _Nullable appId;
 @property (assign, nonatomic) AgoraChannelProfile channelProfile;
 @property (assign, nonatomic) AgoraAudioScenario audioScenario;
 @property (assign, nonatomic) AgoraAreaCodeType areaCode;
 @property (strong, nonatomic) AgoraLogConfig * _Nullable logConfig;
 @property (copy, nonatomic) NSArray&lt;id&lt;AgoraMediaFilterExtensionDelegate&gt;&gt;* _Nullable mediaFilterExtensions;
 @property (weak, nonatomic) id&lt;AgoraMediaFilterEventDelegate&gt; _Nullable eventDelegate;
@end</codeblock>
                <codeblock props="windows" outputclass="language-cpp">struct LogConfig
{
  const char* filePath;
  uint32_t fileSizeInKB;
  LOG_LEVEL level;
  LogConfig() : filePath(NULL), fileSizeInKB(DEFAULT_LOG_SIZE_IN_KB), level(OPTIONAL_LOG_LEVEL_SPECIFIER LOG_LEVEL_INFO) {}
};</codeblock>
                <codeblock props="electron" outputclass="language-typescript" />
                <codeblock props="unity" outputclass="language-csharp" />
                <codeblock props="rn" outputclass="language-typescript" />
                <codeblock props="flutter" outputclass="language-dart">class LogConfig {
  
  String? filePath;
  
  int? fileSizeInKB;
  
  LOG_LEVEL? level;
  LogConfig({
    this.filePath,
    this.fileSizeInKB,
    this.level,
  });
    factory LogConfig.fromJson(Map&lt;String, dynamic&gt; json) =&gt;
      _$LogConfigFromJson(json);
    Map&lt;String, dynamic&gt; toJson() =&gt; _$LogConfigToJson(this);
}</codeblock>
            </p>
        </section>
        <section id="parameters">
   <title><text conref="../conref/conref_api_metadata.dita#metadata/property" /></title>
   <parml>
       <plentry>
  <pt>filePath</pt>
  <pd>
      <p>The absolute or relative path (ending with \ or /) of the log file. Ensure that the directory for the log files exists and is writable. You can use this parameter to rename the log files.</p>
                        <p props="windows electron rn">The default file path is:<ul>
                                <li props="windows rn">Android: <filepath id="android-path">/storage/emulated/0/Android/data/&lt;package name&gt;/files/agorasdk.log/</filepath>.</li>
                                <li props="windows rn">iOS:<filepath id="ios-path"> App Sandbox/Library/caches/agorasdk.log/</filepath>.</li>
                                <li props="windows electron">macOS:<ul id="mac-path">
                                        <li>If Sandbox is enabled: <filepath>App
                                                Sandbox/Library/Logs/agorasdk.log/</filepath>, for
                                            example,
                                                <filepath>/Users/&lt;username&gt;/Library/Containers/&lt;App
                                                Bundle
                                                Identifier&gt;/Data/Library/Logs/agorasdk.log/</filepath>.</li>
                                        <li>If Sandbox is disabled:
                                                <filepath>~/Library/Logs/agorasdk.log/</filepath></li>
                                    </ul></li>
                                <li props="windows electron">Windows:
                                        <filepath>C:\Users\&lt;user_name&gt;\AppData\Local\Agora\&lt;process_name&gt;\agorasdk.log\</filepath>ã€‚</li>
                            </ul></p>
                        <p props="android"><filepath>Android</filepath>:<filepath>
                                /storage/emulated/0/Android/data/&lt;package
                                name&gt;/files/agorasdk.log/</filepath></p>
                        <p props="ios">iOS: <filepath>App
                                Sandbox/Library/caches/agorasdk.log/</filepath></p>
                        <p props="mac">The default file path is:<ul>
                                        <li>If Sandbox is enabled: <filepath>App
                                        Sandbox/Library/Logs/agorasdk.log/</filepath>, for example,
                                        <filepath>/Users/&lt;username&gt;/Library/Containers/&lt;App
                                        Bundle
                                        Identifier&gt;/Data/Library/Logs/agorasdk.log/</filepath>.</li>
                                        <li>If Sandbox is disabled:
                                        <filepath>~/Library/Logs/agorasdk.log/</filepath></li>
                            </ul>
                        </p>
                    </pd>
       </plentry>
       <plentry>
  <pt>fileSizeInKB</pt>
                    <pd>The size (KB) of an <codeph>agorasdk.log</codeph> file. The value range is [128,1024]. The default value is 1,024 KB. If you set <codeph>fileSizeInKByte</codeph> smaller than 128 KB, the SDK automatically adjusts it to 128 KB; if you set <codeph>fileSizeInKByte</codeph> greater than 1,024 KB, the SDK automatically adjusts it to 1,024 KB.</pd>
                    <pd>
                        <note id="note_vwq_yfm_kqb" type="attention">
                            <p>This method applies to the <codeph>agorasdk.log</codeph> file only and does not take effect for the <codeph>agoraapi.log</codeph> file.</p>
                        </note>
                    </pd>
       </plentry>
       <plentry>
  <pt>level</pt>
           <pd><p>The output level of the SDK log file. See <xref keyref="LOG_LEVEL" />.</p>
               <p>For example, if you set the log level to WARN, the SDK outputs the logs within levels FATAL, ERROR, and WARN.</p></pd>
       </plentry>
   </parml>
        </section></refbody>
</reference>
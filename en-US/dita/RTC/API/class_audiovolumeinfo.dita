<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="class_audiovolumeinfo">
    <title><ph keyref="AudioVolumeInfo" /></title>
    <shortdesc id="short"><ph id="shortdesc">The volume information of users.</ph></shortdesc>
    <refbody>
        <section id="prototype">
            <p props="rtc-ng" outputclass="codeblock">
                <codeblock props="android" outputclass="language-java">public static class AudioVolumeInfo {
    public int uid;
    public int volume;
    public int vad;
    public double voicePitch;
  }</codeblock>
                <codeblock props="ios mac" outputclass="language-objectivec">__attribute__((visibility("default"))) @interface AgoraRtcAudioVolumeInfo : NSObject
@property(assign, nonatomic) NSUInteger uid;
@property(assign, nonatomic) NSUInteger volume;
@property(assign, nonatomic) NSUInteger vad;
@property (assign, nonatomic) double voicePitch;
@end</codeblock>
                <codeblock props="windows" outputclass="language-cpp">struct AudioVolumeInfo {
                    uid_t uid;
                    unsigned int volume;
                    unsigned int vad;
                    double voicePitch;
                    AudioVolumeInfo() : uid(0), volume(0), vad(0), voicePitch(0.0) {}
                    };</codeblock>
                    <codeblock props="unity" outputclass="language-csharp">public class AudioVolumeInfo
    {
        public AudioVolumeInfo()
        {
        }
        public AudioVolumeInfo(uint uid, uint volume, uint vad)
        {
            this.uid = uid;
            this.volume = volume;
            this.vad = vad;
        }
        
        public uint uid { set; get; }
        
        public uint volume { set; get; }
        
        public uint vad { set; get; }
    }
    
    public class Packet
    {
        public Packet()
        {
            buffer = new byte[0];
        }
        public Packet(byte[] buffer, uint size)
        {
            this.buffer = buffer;
            this.size = size;
        }
        
        public byte[] buffer { set; get; }
        
        public uint size { set; get; }
    }
    
    public enum AUDIO_SAMPLE_RATE_TYPE {
        
        AUDIO_SAMPLE_RATE_32000 = 32000,
        
        AUDIO_SAMPLE_RATE_44100 = 44100,
        
        AUDIO_SAMPLE_RATE_48000 = 48000,
    };
    
    public enum VIDEO_CODEC_PROFILE_TYPE {
        
        VIDEO_CODEC_PROFILE_BASELINE = 66,
        
        VIDEO_CODEC_PROFILE_MAIN = 77,
        
        VIDEO_CODEC_PROFILE_HIGH = 100,
    };
    
    public enum AUDIO_CODEC_PROFILE_TYPE {
        
        AUDIO_CODEC_PROFILE_LC_AAC = 0,
        
        AUDIO_CODEC_PROFILE_HE_AAC = 1,
    };
    
    public class LocalAudioStats
    {
        public LocalAudioStats()
        {
        }
        public LocalAudioStats(int numChannels, int sentSampleRate, int sentBitrate, int internalCodec)
        {
            this.numChannels = numChannels;
            this.sentSampleRate = sentSampleRate;
            this.sentBitrate = sentBitrate;
            this.internalCodec = internalCodec;
        }
        
        public int numChannels { set; get; }
        
        public int sentSampleRate { set; get; }
        
        public int sentBitrate { set; get; }
        
        public int internalCodec { set; get; }
    }</codeblock>
            </p>
            <p props="rtc" outputclass="codeblock">
                <codeblock props="android" outputclass="language-java">public static class AudioVolumeInfo {
        public int uid;
        public int volume;
        public int vad;
        public String channelId;
        }
</codeblock>
                <codeblock props="ios mac" outputclass="language-objectivec">__attribute__((visibility("default"))) @interface AgoraRtcAudioVolumeInfo : NSObject
@property(assign, nonatomic) NSUInteger uid;
@property(assign, nonatomic) NSUInteger volume;
@property(assign, nonatomic) NSUInteger vad;
@property(copy, nonatomic) NSString* channelId;
</codeblock>
                <codeblock props="windows unity" outputclass="language-cpp">struct AudioVolumeInfo {
    uid_t uid;
    unsigned int volume;
    unsigned int vad;
    const char * channelId;
    };  </codeblock>
                <codeblock props="electron" outputclass="language-typescript">export interface AudioVolumeInfo
    {
    uid: number,
    volume: number
    vad: number
    channelId: string
    }</codeblock>
                <codeblock props="rn" outputclass="language-typescript" />
                <codeblock props="flutter" outputclass="language-dart">class AudioVolumeInfo {
  int uid;
  int volume;
  int vad;
  String channelId;

  AudioVolumeInfo(
    this.uid,
    this.volume,
    this.vad,
    this.channelId,
  );
}</codeblock>
            </p>
        </section>
        <section id="parameters">
   <title><text conref="../conref/conref_api_metadata.dita#conref_api_metadata/property" /></title>
   <parml>
       <plentry>
                    <pt>uid</pt>
                    <pd>
                        <p>The user ID.<ul id="ul_pfj_4dt_rqb">
                                <li>In the local user's callback, <parmname>uid</parmname> = 0.</li>
                                <li>In the remote users' callback, <parmname>uid</parmname> is the user ID of a remote user whose instantaneous volume is one of the three highest.</li>
                            </ul></p>
                    </pd>
                </plentry>
       <plentry>
  <pt>volume</pt>
  <pd>The volume of the user. The value ranges between 0 (lowest volume) and 255 (highest volume). If the user calls <xref keyref="startAudioMixing2" />, the value of <parmname>volume</parmname> is the volume after audio mixing.</pd>
       </plentry>
       <plentry>
                    <pt>vad</pt>
                    <pd>
                        <p>The voice activity status of the local user.<ul>
                            <li>0: The local user is not speaking.</li>
                            <li>1: The local user is speaking.</li>
                            </ul> </p>
                        <note type="attention">
                            <ul>
                                <li>The <parmname>vad</parmname> parameter does not report the voice activity status of remote users. In the remote users' callback, the value of <parmname>vad</parmname> is always 0.</li>
                                <li props="rtc">To use this parameter, you must set <parmname props="ios mac windows android electron">report_vad</parmname><parmname props="unity">reportVad</parmname> to <codeph><ph keyref="true" /></codeph> when calling <xref keyref="enableAudioVolumeIndication" />.</li>
                                <li props="rtc-ng">To use this parameter, you must set <parmname>reportVad</parmname> to <codeph><ph keyref="true" /></codeph> when calling <xref keyref="enableAudioVolumeIndication" />.</li>
                            </ul>
                        </note>
                    </pd>
                </plentry>
       <plentry props="rtc">
                    <pt>channelId</pt>
                    <pd>The name of the channel that the user is in.</pd>
       </plentry>
       <plentry props="rtc-ng">
           <pt>voicePitch</pt>
           <pd>
               <p>The voice pitch of the local user. The value ranges between 0.0 and 4000.0.</p>
               <note type="attention">The <parmname>voicePitch</parmname> parameter does not report the voice pitch of remote users. In the remote users' callback, the value of <parmname>voicePitch</parmname> is always 0.</note>
           </pd>
       </plentry>
   </parml>
        </section></refbody>
</reference>
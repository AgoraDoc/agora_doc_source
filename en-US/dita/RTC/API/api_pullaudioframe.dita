<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_pullaudioframe">
    <title><ph keyref="pullAudioFrame"/></title>
    <shortdesc id="short"><ph id="shortdesc">Pulls the remote audio data.</ph></shortdesc>
    <prolog>
        <metadata>
   <keywords>
       <indexterm keyref="pullAudioFrame" />
   </keywords>
        </metadata>
    </prolog>
    <refbody><section id="prototype">
        <p outputclass="codeblock">
                <codeblock props="android" outputclass="language-java">public abstract int pullPlaybackAudioFrame(byte[] data, int lengthInByte);</codeblock>
                <codeblock props="ios mac" outputclass="language-objectivec">- (BOOL)pullPlaybackAudioFrameRawData:(void * _Nonnull)data
                              lengthInByte:(NSUInteger)lengthInByte;</codeblock>
                <codeblock props="windows" outputclass="language-cpp">virtual int pullAudioFrame(IAudioFrameObserver::AudioFrame* frame) = 0;</codeblock>
                <codeblock props="electron" outputclass="language-typescript"/>
                <codeblock props="unity" outputclass="language-csharp">public abstract int PullAudioFrame(AudioFrame frame);</codeblock>
                <codeblock props="rn" outputclass="language-typescript"/>
                <codeblock props="flutter" outputclass="language-dart"/>
        </p>
        </section>
        <section id="detailed_desc">
            <p props="rtc">Before calling this method, you need to call to<xref keyref="setExternalAudioSink"/> notify the app to enable and set the external rendering.</p>
            <p props="rtc-ng">
                Before calling this method, you need to set mEnableAudioDevice enableAudioDevice as  in , and call  to notify the app to enable and set the external rendering. 
                Before calling this method, you need to call to notify the app to enable and set the external rendering.<ph props="android windows"><xref keyref="RtcEngineConfig"/><parmname props="android"></parmname><parmname props="windows"></parmname><codeph><ph keyref="false"/></codeph><xref keyref="setExternalAudioSink"/></ph><ph props="ios mac"><xref keyref="setExternalAudioSink"/></ph></p>
   <p>After a successful method call, the app pulls the decoded and mixed audio data for playback.</p>
   <note type="attention">
       <ul>
           <li>Once you enable the external audio sink, the app will not<xref keyref="onPlaybackAudioFrame"/> retrieve any audio data from the  callback.</li>
           <li>The difference between this method and the<apiname keyref="onPlaybackAudioFrame"/>  callback is as follows:<ul><li>The SDK<apiname keyref="onPlaybackAudioFrame"/> sends the audio data to the app through the  callback. Any delay in processing the audio frames may result in audio jitter.</li>
                   <li>After a successful method call, the app automatically pulls the audio data from the SDK. After setting the audio data parameters, the SDK adjusts the frame buffer and avoids problems caused by jitter in the external audio playback.</li>
               </ul></li>
       </ul>
   </note>
        </section>
        <section id="parameters"><title>Parameter</title>
   <parml>
       <plentry props="windows unity">
  <pt>frame</pt>
  <pd>Pointers to<xref keyref="AudioFrame"/>  .</pd>
       </plentry>
       <plentry props="android ios mac">
           <pt>data</pt>
           <pd>The remote audio data to be pulled. The data type is <codeph>byte[]</codeph>.</pd>
       </plentry>
       <plentry props="android ios mac" id="length">
           <pt>lengthInByte</pt>
           <pd>The data length (byte). 该参数的值由音频数据时长、<apiname keyref="setExternalAudioSink"/> 的 <codeph>sampleRate</codeph> 和 <codeph>channels</codeph> 参数确定。 <codeph> lengthInByte</codeph> = <codeph>sampleRate</codeph>/1000 × 2 × <codeph>channels</codeph> × audio data duration (ms)</pd>
       </plentry>
   </parml>
        </section>
        <section id="return_values">
   <title>Returns</title>
   <ul props="android windows unity">
       <li>0: Success.</li>
       <li>&lt; 0: Failure.</li>
   </ul>
            <ul props="ios mac">
       <li><codeph>Success.</codeph><ph keyref="true"/></li>
       <li><codeph>&lt;Failure.</codeph><ph keyref="false"/></li>
   </ul> 
        </section></refbody>
</reference>

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_onaudiomixingstatechanged">
    <title><ph keyref="onAudioMixingStateChanged"/></title>
    <shortdesc id="short"><ph id="shortdesc">Occurs when the playback state of the music file changes.</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="onAudioMixingStateChanged"/>
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
                <codeblock props="android" outputclass="language-java">public void onAudioMixingStateChanged(int state,int reason){ }</codeblock>
                <codeblock props="ios mac" outputclass="language-objectivec">- (void)rtcEngine:(AgoraRtcEngineKit* _Nonnull)engine localAudioMixingStateDidChanged:(AgoraAudioMixingStateCode)state errorCode:(AgoraAudioMixingErrorCode)errorCode;</codeblock>
                <codeblock props="windows" outputclass="language-cpp">virtual void onAudioMixingStateChanged(AUDIO_MIXING_STATE_TYPE state, AUDIO_MIXING_ERROR_TYPE errorCode){ }</codeblock>
                <codeblock props="electron" outputclass="language-typescript">on(evt: EngineEvents.CONNECTION_STATE_CHANGED, cb: ( state: CONNECTION_STATE_TYPE, reason: CONNECTION_CHANGED_REASON_TYPE ) => void): this;</codeblock>
                <codeblock props="unity" outputclass="language-csharp"/>
                <codeblock props="rn" outputclass="language-typescript"/>
                <codeblock props="flutter" outputclass="language-dart"/>
            </p>
        </section>
        <section id="detailed_desc">
            <p>This callback occurs when the playback state of the music file changes, and reports the current state and error code.</p>
        </section>
        <section id="parameters"><title>Parameter</title>
            <parml>
                <plentry>
                    <pt>state</pt>
                    <pd><p props="ios mac windows">The playback state of the music file. See <xref keyref="AUDIO_MIXING_STATE_TYPE"/>.</p>
                        <p props="android">The status code.<ul>
                                <li><ph keyref="AUDIO_MIXING_STATE_PLAYING"/> 710: The music file is playing.</li>
                                <li><ph keyref="AUDIO_MIXING_STATE_PAUSED"/> 711: The music file pauses playing.</li>
                                <li><ph keyref="AUDIO_MIXING_STATE_STOPPED"/> 713: The music file stops playing.</li>
                                <li><ph keyref="AUDIO_MIXING_STATE_FAILED"/> (714): 音乐文件报错。 SDK 会在 <codeph>errorCode</codeph> 参数中返回具体的报错原因。</li>
                                <li><ph keyref="AUDIO_MIXING_STATE_COMPLETED"/>(715): 音乐文件已结束一次播放。</li>
                                <li><ph keyref="AUDIO_MIXING_STATE_ALL_LOOPS_COMPLETED"/> (716): 音乐文件已结束循环播放。</li>
                            </ul>
                        </p>
                    </pd>
                </plentry>
                <plentry>
                    <pt>errorCode</pt>
                    <pd><p props="ios mac windows">The error code. See <xref keyref="AUDIO_MIXING_ERROR_TYPE"/>.</p>
                        <p props="android">Error code<ul>
                                <li><ph keyref="AUDIO_MIXING_ERROR_OK"/>(0): 正常。</li>
                                <li><ph keyref="AUDIO_MIXING_ERROR_CAN_NOT_OPEN"/> 701: The SDK cannot open the music file.</li>
                                <li><ph keyref="AUDIO_MIXING_ERROR_TOO_FREQUENT_CALL"/> 702: The SDK opens the music file too frequently.</li>
                                <li><ph keyref="AUDIO_MIXING_ERROR_INTERRUPTED_EOF"/> 703: The audio mixing file playback is interrupted.</li>
                            </ul>
                        </p>
                    </pd>
                </plentry>
            </parml>
        </section>
    </refbody>
</reference>

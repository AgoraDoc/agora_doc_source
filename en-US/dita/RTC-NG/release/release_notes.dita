<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="release_notes">
    <title>v4.3.0</title>
    <body>
        <p>v4.3.0 was released on xx xx, 2024.</p>
    </body>
    <topic id="level2">
        <title/>
        <topic id="compatibility">
            <title>Compatibility changes</title>
            <body>
                <p>This version has optimized the implementation of some functions, involving renaming or deletion of some APIs. To ensure the normal operation of the project, you need to update the code in the App after upgrading to this version.</p>
                <ol>
                    <li props="android"><ph><b>原始视频数据回调行为变更 (Android)</b></ph>                        <p>自该版本起，原始视频数据相关的回调处理从原有的固定单线程变更为随机线程，即：回调处理可以在不同的线程上进行。 由于 Android 系统限制，OpenGL 必须与线程强绑定，声网建议你采取以下两种方式之一修改你的代码：                        <ul>
                        <li>（推荐）使用 <codeph>TextureBufferHelper</codeph> 类创建一个专门的 OpenGL 线程进行视频前处理或后处理（例如美颜、贴纸等效果）。</li>
                        <li>使用 <codeph>eglMakeCurrent</codeph> 方法，将每一个视频帧所需的 OpenGL 环境都关联到当前的线程中。</li>
                        </ul></p>
                    </li>
                    <li><ph><b>Renaming parameters in callbacks</b></ph><p>In order to make the parameters in some callbacks and the naming of enumerations in enumeration classes easier to understand, the following modifications have been made in this version. Please modify the parameter settings in the callbacks after upgrading to this version.<table frame="all" rowsep="1" colsep="1">
                        <tgroup cols="3">
                            <colspec colname="c1" colnum="1" colwidth="1*"/>
                            <colspec colname="c2" colnum="2" colwidth="1*"/>
                            <colspec colname="c3" colnum="3" colwidth="1*"/>
                            <thead>
                                <row>
                                    <entry>callbacks</entry>
                                    <entry>Original parameter name</entry>
                                    <entry>Existing parameter names</entry>
                                </row>
                            </thead>
                            <tbody>
                                <row>
                                    <entry><codeph><xref keyref="onLocalAudioStateChanged"/></codeph></entry>
                                    <entry><codeph>error</codeph></entry>
                                    <entry><codeph>reason</codeph></entry>
                                </row>
                                <row>
                                    <entry><codeph><xref keyref="onLocalAudioStateChanged"/></codeph></entry>
                                    <entry><codeph>error</codeph></entry>
                                    <entry><codeph>reason</codeph></entry>
                                </row>
                                <row>
                                    <entry><codeph><xref keyref="onDirectCdnStreamingStateChanged"/></codeph></entry>
                                    <entry><codeph>error</codeph></entry>
                                    <entry><codeph>reason</codeph></entry>
                                </row>
                                <row props="android ios unity flutter rn">
                                    <entry><xref keyref="onMusicChartsResult"/></entry>
                                    <entry><parmname>errorCode</parmname></entry>
                                    <entry><parmname>reason</parmname></entry>
                                </row>
                                <row props="android ios unity flutter rn">
                                    <entry><xref keyref="onPreLoadEvent_IMusicContentCenterEventHandler"/></entry>
                                    <entry>
                                        <ul>
                                            <li><parmname>status</parmname></li>
                                            <li><parmname>state</parmname></li>
                                        </ul>
                                    </entry>
                                    <entry>
                                        <ul>
                                            <li><parmname>errorCode</parmname></li>
                                            <li><parmname>reason</parmname></li>
                                        </ul>
                                    </entry>
                                </row>
                                <row props="android ios unity flutter rn">
                                    <entry><xref keyref="onMusicCollectionResult"/></entry>
                                    <entry><parmname>errorCode</parmname></entry>
                                    <entry><parmname>reason</parmname></entry>
                                </row>
                                <row props="android ios unity flutter rn">
                                    <entry><xref keyref="onLyricResult"/></entry>
                                    <entry><parmname>errorCode</parmname></entry>
                                    <entry><parmname>reason</parmname></entry>
                                </row>
                                <row props="android ios unity flutter rn">
                                    <entry><xref keyref="onSongSimpleInfoResult"/></entry>
                                    <entry><parmname>errorCode</parmname></entry>
                                    <entry><parmname>reason</parmname></entry>
                                </row>
                                <row props="apple android">
                                    <entry><codeph><xref keyref="onPlayerSourceStateChanged"/></codeph></entry>
                                    <entry><codeph>error</codeph></entry>
                                    <entry><codeph>reason</codeph></entry>
                                </row>
                                <row props="cpp">
                                    <entry><codeph><xref keyref="onPlayerSourceStateChanged"/></codeph></entry>
                                    <entry><codeph>ec</codeph></entry>
                                    <entry><codeph>reason</codeph></entry>
                                </row>
                                <row>
                                    <entry><codeph><xref keyref="onRtmpStreamingStateChanged"/></codeph></entry>
                                    <entry><codeph>errCode</codeph></entry>
                                    <entry><codeph>reason</codeph></entry>
                                </row>
                            </tbody>
                        </tgroup>
                        </table><table frame="all" rowsep="1" colsep="1">
                        <tgroup cols="2">
                            <colspec colname="c1" colnum="1" colwidth="1*"/>
                            <colspec colname="c2" colnum="2" colwidth="1*"/>
                            <thead>
                                <row>
                                    <entry>Original enumeration class</entry>
                                    <entry>Current enumeration class</entry>
                                </row>
                            </thead>
                            <tbody>
                                <row>
                                    <entry><codeph><apiname keyref="LOCAL_AUDIO_STREAM_REASON"/></codeph></entry>
                                    <entry><codeph><apiname keyref="LOCAL_AUDIO_STREAM_REASON"/></codeph></entry>
                                </row>
                                <row>
                                    <entry><codeph><apiname keyref="LOCAL_VIDEO_STREAM_REASON"/></codeph></entry>
                                    <entry><codeph><apiname keyref="LOCAL_VIDEO_STREAM_REASON"/></codeph></entry>
                                </row>
                                <row>
                                    <entry><codeph><apiname keyref="DIRECT_CDN_STREAMING_REASON"/></codeph></entry>
                                    <entry><codeph><apiname keyref="DIRECT_CDN_STREAMING_REASON"/></codeph></entry>
                                </row>
                                <row>
                                    <entry><codeph><apiname keyref="MEDIA_PLAYER_REASON"/></codeph></entry>
                                    <entry><codeph><apiname keyref="MEDIA_PLAYER_REASON"/></codeph></entry>
                                </row>
                                <row>
                                    <entry><codeph><apiname keyref="RTMP_STREAM_PUBLISH_REASON"/></codeph></entry>
                                    <entry><codeph><apiname keyref="RTMP_STREAM_PUBLISH_REASON"/></codeph></entry>
                                </row>
                                <row props="android ios unity flutter rn">
                                    <entry><apiname keyref="MusicContentCenterStatusCode"/></entry>
                                    <entry><apiname keyref="MusicContentCenterStateReason"/></entry>
                                </row>
                            </tbody>
                        </tgroup>
                        </table>
                        <note>For specific renaming of enumerations, please refer to <xref href="#apichange"/>.</note></p>
                    </li>
                    <li><ph><b>Channel media stream relay</b></ph><p>To improve interface usability, this release removes some methods and callbacks for channel meda relay. Use the alternative options listed in the table below:<table frame="all" rowsep="1" colsep="1" id="table_jvq_ltp_wzb">
                        <tgroup cols="2">
                            <colspec colname="c1" colnum="1" colwidth="1*"/>
                            <colspec colname="c2" colnum="2" colwidth="1*"/>
                            <thead>
                                <row>
                                    <entry>Deleted methods and callbacks</entry>
                                    <entry>Alternative methods and callbacks</entry>
                                </row>
                            </thead>
                            <tbody>
                                <row>
                                    <entry>
                                        <ul id="ul_nwr_4tp_wzb">
                                            <li><codeph><apiname keyref="startChannelMediaRelay"/></codeph></li>
                                            <li><codeph><apiname keyref="updateChannelMediaRelay"/></codeph></li>
                                        </ul>
                                    </entry>
                                    <entry><codeph><apiname keyref="startOrUpdateChannelMediaRelay"/></codeph></entry>
                                </row>
                                <row>
                                    <entry>
                                        <ul id="ul_kmq_ptp_wzb">
                                            <li><codeph><apiname keyref="startChannelMediaRelayEx"/></codeph></li>
                                            <li><codeph><apiname keyref="updateChannelMediaRelayEx"/></codeph></li>
                                        </ul>
                                    </entry>
                                    <entry><codeph><apiname keyref="startOrUpdateChannelMediaRelayEx"/></codeph></entry>
                                </row>
                                <row>
                                    <entry><codeph><apiname keyref="onChannelMediaRelayEvent"/></codeph></entry>
                                    <entry><codeph><apiname keyref="onChannelMediaRelayStateChanged"/></codeph></entry>
                                </row>
                            </tbody>
                        </tgroup>
                        </table></p>
                    </li>
                    <li props="android ios"><ph><b>Custom video source</b></ph><p props="android">Since this release, <codeph>pushExternalVideoFrameEx</codeph>[1/2] and <codeph>pushExternalVideoFrameEx</codeph>[2/2] are renamed to <xref keyref="pushVideoFrame"/> and <xref keyref="pushVideoFrame2"/>, and are migrated from <codeph><apiname keyref="IRtcEngineEx"/></codeph> to <codeph><apiname keyref="IRtcEngine"/></codeph>.</p>
                        <p props="ios">Since this release, <codeph>pushExternalVideoFrame</codeph>[1/2] is migrated from <codeph><apiname keyref="IRtcEngineEx"/></codeph> to <codeph><apiname keyref="IRtcEngine"/></codeph>.</p>
                    </li>
                    <li props="android ios flutter unity rn"><ph><b>Audio route</b></ph><p props="android">Starting with this version, <codeph>RouteBluetooth in</codeph>  is renamed to , representing the audio route to a Bluetooth device using the HFP protocol. (10)  is added to represent the audio route to a Bluetooth device using the A2DP protocol.<codeph><ph keyref="ROUTE_BLUETOOTH_DEVICE_HFP"/></codeph><codeph><ph keyref="ROUTE_BLUETOOTH_DEVICE_A2DP"/></codeph></p>
                        <p props="unity">Starting with this version, <xref keyref="AudioRoute"/>ROUTE_BLUETOOTH in  is renamed to , representing the audio route to a<codeph> Bluetooth</codeph> device using the HFP protocol. (10)  is added to represent the audio route to a Bluetooth device using the A2DP protocol.<codeph><ph keyref="ROUTE_BLUETOOTH_DEVICE_HFP"/></codeph><codeph><ph keyref="ROUTE_BLUETOOTH_DEVICE_A2DP"/></codeph></p>
                        <p props="ios">Starting with this version<xref keyref="AudioRoute"/>, <codeph>AgoraAudioOutputRoutingBluetooth</codeph> in  is renamed to , representing the audio route to a Bluetooth device using the HFP protocol. (10)  is added to represent the audio route to a Bluetooth device using the A2DP protocol.<codeph><ph keyref="ROUTE_BLUETOOTH_DEVICE_HFP"/></codeph><codeph><ph keyref="ROUTE_BLUETOOTH_DEVICE_A2DP"/></codeph></p>
                        <p props="flutter rn">Starting with this version, <xref keyref="AudioRoute"/><codeph>routeBluetooth</codeph> in  is renamed to , representing the audio route to a Bluetooth device using the HFP protocol. (10)  is added to represent the audio route to a Bluetooth device using the A2DP protocol.<codeph><ph keyref="ROUTE_BLUETOOTH_DEVICE_HFP"/></codeph><codeph><ph keyref="ROUTE_BLUETOOTH_DEVICE_A2DP"/></codeph></p>
                        <p props="rn">Starting with this version, <xref keyref="AudioRoute"/><codeph>RouteBluetooth</codeph> in  is renamed to , representing the audio route to a Bluetooth device using the HFP protocol. (10)  is added to represent the audio route to a Bluetooth device using the A2DP protocol.<codeph><ph keyref="ROUTE_BLUETOOTH_DEVICE_HFP"/></codeph><codeph><ph keyref="ROUTE_BLUETOOTH_DEVICE_A2DP"/></codeph></p>
                    </li>
                    <li props="android"><ph><b>The state of the remote video</b></ph><p>To make the name of the enumeration easier to understand, this version changes the name of the enumeration from <codeph>REMOTE_VIDEO_STATE_PLAYING</codeph> to <codeph><ph keyref="REMOTE_VIDEO_STATE_DECODING"/></codeph>, while the meaning of the enumeration remains unchanged.</p>
                    </li>
                    <li><ph><b>Reasons for local video state changes</b></ph><p><ph props="apple cpp framework">该版本对 <xref keyref="LOCAL_VIDEO_STREAM_REASON"/> 枚举类中的枚举进行了如下修改：</ph><ph props="android">该版本对以下枚举进行了修改：</ph>                        <ul>
                        <li props="cpp electron unity flutter">The value of <codeph><apiname keyref="LOCAL_VIDEO_STREAM_REASON_SCREEN_CAPTURE_PAUSED"/></codeph> (formerly <codeph><apiname keyref="LOCAL_VIDEO_STREAM_REASON_SCREEN_CAPTURE_PAUSED"/></codeph>) has been changed from 23 to 28. (Windows)</li>
                        <li props="cpp electron unity flutter">The value of <codeph><apiname keyref="LOCAL_VIDEO_STREAM_REASON_SCREEN_CAPTURE_RESUMED"/></codeph> (formerly <codeph><apiname keyref="LOCAL_VIDEO_STREAM_REASON_SCREEN_CAPTURE_RESUMED"/></codeph>) has been changed from 24 to 29. (Windows)</li>
                        <li>The <codeph><apiname keyref="LOCAL_VIDEO_STREAM_REASON_CODEC_NOT_SUPPORT"/></codeph> enumeration has been changed to <codeph><apiname keyref="LOCAL_VIDEO_STREAM_REASON_CODEC_NOT_SUPPORT"/></codeph>.</li>
                        </ul></p>
                    </li>
                    <li><ph><b>声卡采集</b></ph>                        <p>
                        <ul>
                            <li>在 v4.3.0 之前，当你调用 <xref keyref="disableAudio"/> 关闭整个音频模块后，声卡采集功能不会被关闭。</li>
                            <li>从 v4.3.0 起，当你调用 <xref keyref="disableAudio"/> 关闭音频模块后，声卡采集功能也会被关闭，如果你需要再次启用声卡采集功能，需要在调用 <xref keyref="enableAudio"/> 启用音频模块后再次调用 <xref keyref="enableLoopbackRecording"/>。</li>
                        </ul>
                        </p>
                    </li>
                </ol>
            </body>
        </topic>
        <topic id="newfeature">
            <title>New features</title>
            <body>
                <ol>
                    <li props="ios android rn unity flutter"><ph><b>Customized mixed video layout on receiving end (Android, iOS)</b></ph><p>To facilitate customized layout of mixed video stream at the receiver end, this version introduces the <xref keyref="onTranscodedStreamLayoutInfo"/> callback. When the receiver receives the channel's mixed video stream sent by the video mixing server, this callback is triggered, reporting the layout information of the mixed video stream and the layout information of each sub-video stream in the mixed stream. The receiver can set a separate <codeph>view</codeph> for rendering the sub-video stream (distinguished by <codeph>subviewUid</codeph>) in the mixed video stream when calling the <xref keyref="setupRemoteVideo"/> method, achieving a custom video layout effect.</p>
                        <p>When the layout of the sub-video streams in the mixed video stream changes, this callback will also be triggered to report the latest layout information in real time.</p>
                        <p>Through this feature, the receiver end can flexibly adjust the local view layout. When applied in a multi-person video scenario, the receiving end only needs to receive and decode a mixed video stream, which can effectively reduce the CPU usage and network bandwidth when decoding multiple video streams on the receiving end.</p>
                    </li>
                    <li><ph><b>Local preview with multiple views</b></ph><p>This version supports local preview with simultaneous display of multiple frames, where the videos shown in the frames are positioned at different observation positions along the video link. Examples of usage are as follows:<ol props="native unity electron flutter cs unreal bp">
                        <li>Call  to<xref keyref="setupLocalVideo"/> set the first view: Set the position parameter to  (introduced in this version) in . This corresponds to the <codeph>position </codeph>after local video capture and before preprocessing. The video observed here does not have preprocessing effects.<codeph><apiname keyref="VideoCanvas"/></codeph><codeph><apiname keyref="POSITION_POST_CAPTURER_ORIGIN"/></codeph></li>
                        <li>Call  to<xref keyref="setupLocalVideo"/> set the second view: Set the <codeph>position</codeph> parameter to  in , the video observed here has the effect of video preprocessing.<codeph><apiname keyref="VideoCanvas"/></codeph><codeph><apiname keyref="POSITION_POST_CAPTURER"/></codeph></li>
                        <li>Observe the local preview effect: The first view is the original video of a real person; the second view is the virtual portrait after video preprocessing (including image enhancement, virtual background, and local preview of watermarks) effects.</li>
                        </ol>
                        <ol props="rn">
                        <li>Call  to set the first view: Set the <codeph>position</codeph> parameter to  (introduced in this version) in . This corresponds to the position after local video capture and before preprocessing. The video observed here does not have preprocessing effects.<codeph><apiname keyref="VideoCanvas"/></codeph><codeph><apiname keyref="POSITION_POST_CAPTURER_ORIGIN"/></codeph></li>
                        <li>Call  to set the second view: Set the <codeph>position</codeph> parameter to  in , the video observed here has the effect of video preprocessing.<codeph><apiname keyref="VideoCanvas"/></codeph><codeph><apiname keyref="POSITION_POST_CAPTURER"/></codeph></li>
                        <li>Observe the local preview effect: The first view is the original video of a real person; the second view is the virtual portrait after video preprocessing (including image enhancement, virtual background, and local preview of watermarks) effects.</li>
                        </ol>
                        </p>
                    </li>
                    <li><ph><b>Query Device Score</b></ph><p>This version adds the <xref keyref="queryDeviceScore"/> method to query the device's score level to ensure that the user-set parameters do not exceed the device's capabilities. For example, in HD or UHD video scenarios, you can first call this method to query the device's score. If the returned score is low (for example, below 60), you need to lower the video resolution to avoid affecting the video experience. The minimum device score required for different business scenarios is varied. For specific score recommendations, please <xref keyref="ticket-link"/>.</p>
                    </li>
                    <li><ph><b>Select different audio tracks for local playback and streaming.</b></ph><p><ph>This release introduces the <xref keyref="selectMultiAudioTrack"/> method that allows you to select different audio tracks for local playback and streaming to remote users. For example, in scenarios like online karaoke, the host can choose to play the original sound locally and publish the accompaniment in the channel. </ph><ph>Before using this function, you need to<xref keyref="openWithMediaSource"/> open the media file through the  method and <xref keyref="MediaSource"/><codeph>enable </codeph>this function by setting the enableMultiAudioTrack parameter in .</ph></p>
                    </li>
                    <li props="android"><ph><b>Audio playback device test</b></ph><p>This release introduces the <xref keyref="startPlaybackDeviceTest"/> method to allow you to test whether you local audio device for playback works properly. You can specify the audio file to be played through the <codeph>testAudioFilePath</codeph> parameter and see if your audio device works properly. After the test is completed, you need to call the newly added <xref keyref="stopPlaybackDeviceTest"/> method to stop the test.</p>
                    </li>
                    <li props="ios"><ph><b>Device test for audio capturing and playback</b></ph><p>This version introduces the following methods to test whether the audio capturing or playback devices work properly before joining a channel:<ul>
                            <li><xref keyref="startRecordingDeviceTest"/>: test whether the local audio capturing device, such as the speaker, is working properly. After calling this method, the SDK triggers a callback at the time interval set in this method, which reports uid = 0 and the volume information of the capturing device. After the test is completed, you need to call the newly added <xref keyref="stopRecordingDeviceTest"/> method to stop the test.</li>
                            <li><xref keyref="startPlaybackDeviceTest"/>: test whether the local audio playback device is working properly. You can specify the audio file to be played through the <codeph>testAudioFilePath</codeph> parameter and see if your audio device works properly. After the test is completed, you need to call the newly added <xref keyref="stopPlaybackDeviceTest"/> method to stop the test.</li>
                        </ul></p>
                    </li>
                    <li><ph><b>Others</b></ph><p>This version has passed the test verification of the following APIs and can be applied to the entire series of RTC 4.x SDK.<ul>
                        <li><xref keyref="setRemoteSubscribeFallbackOption"/>: Sets fallback option for the subscribed video stream in weak network conditions.</li>
                        <li><xref keyref="onRemoteSubscribeFallbackToAudioOnly"/>: Occurs when the subscribed video stream falls back to audio-only stream due to weak network conditions or switches back to the video stream after the network conditions improve.</li>
                        <li props="cpp flutter unity electron"><ph><xref keyref="setPlaybackDeviceVolume"/></ph><ph props="flutter unity electron">(Windows)</ph><ph>: Sets the volume of the audio playback device.</ph></li>
                        <li props="cpp flutter unity cs bp unreal electron"><ph><xref keyref="getRecordingDeviceVolume"/></ph><ph props="flutter unity cs bp unreal electron">(Windows)</ph><ph>: Sets the volume of the audio capturing device.</ph></li>
                        <li><xref keyref="setPlayerOption"/> and <xref keyref="setPlayerOption2"/>: Sets media player options for providing technical previews or special customization features.</li>
                        <li><xref keyref="enableCustomAudioLocalPlayback"/>: Sets whether to enable the local playback of external audio source.</li>
                        </ul></p>
                    </li>
                </ol>
            </body>
        </topic>
        <topic id="improvement">
            <title>Improvements</title>
            <body>
                <ol>
                    <li><ph><b>SDK 任务处理调度优化</b></ph>                        <p>该版本对 SDK 内部任务的调度机制进行了优化，具体表现在以下方面：                        <ul>
                        <li>远端及本地的首帧出图与出声速度均有明显提升。</li>
                        <li>API 的调用耗时和响应耗时缩短 50% 以上。 </li>
                        <li>SDK 的并行处理能力有明显提升，在较低端的设备上也能体验到较高的视频质量 (720P，24 fps)；并且在高分辨率和高帧率视频场景下的图像处理更加稳定。 </li>
                        <li>SDK 的稳定性进一步增强，在各种特定场景下崩溃率有明显下降。</li>
                        </ul></p>
                    </li>
                    <li><ph><b>In-ear monitoring volume boost</b></ph><p>This release provides users with more flexible in-ear monitoring audio adjustment options, supporting the ability to set the in-ear monitoring volume to four times the original volume by calling <xref keyref="setInEarMonitoringVolume"/>.</p>
                    </li>
                    <li><ph><b>Dual-stream mode optimization</b></ph><p>This release optimizes the video dual-stream mode. In the low-quality video stream adaptive mode (<codeph><apiname keyref="AUTO_SIMULCAST_STREAM"/></codeph>), when the receiver requests a low-quality video stream by calling <xref keyref="setRemoteVideoStreamType"/> or <xref keyref="setRemoteVideoStreamTypeEx"/>, the sender no longer restricts the identity of the request source to be the broadcaster. This adjustment ensures that the audience‘s request for a low-quality video stream takes effect, improving the flexibility and adaptability of the low-quality video stream mode.</p>
                    </li>
                    <li><ph><b>Spatial audio effects usability improvement</b></ph><ul>
                        <li>该版本优化了 <xref keyref="setZones"/> 方法的设计，支持将 <codeph>zones</codeph> 参数设置为 <codeph>NULL</codeph>，表示清除所有隔声区域。 </li>
                        <li>自该版本起，在调用 <xref keyref="ILocalSpatialAudioEngine"/> 中的方法之前，无需先取消订阅频道内所有远端用户的音频流。 </li>
                        <li props="ios">This version introduces the <xref keyref="updateSelfTransform"/> method, designed to pass position vectors for direct rendering in iOS native frameworks such as SceneKit or RealityKit.</li>
                        </ul> </li>
                    <li props="apple"><ph><b>本地音频状态回调优化</b></ph>                        <p>该版本在 <xref keyref="LOCAL_AUDIO_STREAM_REASON"/> 中增加了如下枚举，用户可通过 <xref keyref="onLocalAudioStateChanged"/> 回调了解更多本地音频状态改变的原因：                        <ul>
                        <li props="mac"><codeph><apiname keyref="LOCAL_AUDIO_STREAM_REASON_NO_RECORDING_DEVICE"/></codeph>: No recording device is available. 请提示用户在设备的控制面板中检查麦克风是否与设备连接正常，检查麦克风是否正常工作。 </li>
                        <li props="mac"><codeph><apiname keyref="LOCAL_AUDIO_STREAM_REASON_NO_PLAYOUT_DEVICE"/></codeph>: No playback device is available. Remind your users to check whether the speaker is connected to the device properly in the control plane of the device or if the speaker is working properly.</li>
                        <li props="ios"><codeph><apiname keyref="LOCAL_AUDIO_STREAM_REASON_INTERRUPTED"/></codeph>: The local audio capture is interrupted by system calls, Siri, or alarm clocks. Remind your users to end the phone call, Siri, or alarm clock if the local audio capture is required.</li>
                        </ul></p>
                    </li>
                    <li props="android ios"><ph><b>视频前处理方法优化</b></ph>                        <p>This version adds overloaded methods with the <codeph>souceType </codeph>parameter for the following 5 video preprocessing methods, which support specifying the media source type for applying video preprocessing effects by passing in <codeph>sourceType</codeph> (for example, applying on a custom video capture media source):</p>
                        <ul>
                            <li><xref keyref="setBeautyEffectOptions2"/></li>
                            <li><xref keyref="setLowlightEnhanceOptions2"/></li>
                            <li><xref keyref="setVideoDenoiserOptions2"/></li>
                            <li><xref keyref="setColorEnhanceOptions2"/></li>
                            <li><xref keyref="enableVirtualBackground2"/></li>
                        </ul>
                    </li>
                    <li><ph><b>其他改进</b></ph>                        <p>该版本还进行了如下改进：                        <ul>
                        <li props="cn">Optimizes algorithms in the video module, reduces bandwidth requirements during video transmission, and enhances the video experience for users while maintaining network stability.</li>
                        <li props="android">Adds <codeph>codecType</codeph> in <xref keyref="VideoEncoderConfiguration"/> to set the video encoding type.</li>
                        <li props="android">Adds <codeph>allowCaptureCurrentApp</codeph> member in <xref keyref="ScreenAudioParameters"/>, which is used to set whether to capture audio from the current app during screen sharing. The default value of this member is <codeph><apiname keyref="true"/></codeph>, which means it collects the audio from the current app by default. In certain scenarios, the shared screen audio captured by the app may cause echo on the remote side due to signal delay and other reasons. Agora suggests setting this member as <codeph><apiname keyref="false"/></codeph> to eliminate the remote echo introduced during the screen sharing process.</li>
                        <li props="cpp unity flutter electron">The <xref keyref="onLocalVideoStateChanged"/> callback is improved with the inclusion of the <codeph><apiname keyref="LOCAL_VIDEO_STREAM_REASON_SCREEN_CAPTURE_AUTO_FALLBACK"/></codeph> enumeration, singaling unexpected errors during the screen sharing process (potentially due to window blocking failure), resulting in performance degradation without impacting the screen sharing process itself. (Windows)</li>
                        <li>This version optimizes the SDK's domain name resolution strategy, improving the stability of calling <xref keyref="setLocalAccessPoint"/> to resolve domain names in complex network environments.</li>
                        <li>When passing in an image with transparent background as the virtual background image, the transparent background can be filled with customized color. </li>
                        <li><xref keyref="LocalAudioStats"/>This version adds the <codeph>earMonitorDelay</codeph> and <codeph>aecEstimatedDelay</codeph> members to report ear monitor delay and acoustic echo cancellation (AEC) delay, respectively.</li>
                        <li props="mac">When using the sound card for recording, it supports capturing audio data in stereo.</li>
                        <li>The <xref keyref="onPlayerCacheStats"/> callback is added to reports the statistics of the media file being cached. This callback is triggered once per second after file caching is started.</li>
                        <li>The <xref keyref="onPlayerPlaybackStats"/> callback is added to reports the statistics of the media file being played. This callback is triggered once per second after the media file starts playing. You can obtain information like the audio and video bitrate of the media file through <xref keyref="PlayerPlaybackStats"/>.</li>
                        <li props="ios android unity rn flutter"><ph><xref keyref="MusicContentCenterStateReason"/>An error code <codeph><apiname keyref="kMusicContentCenterReasonHttpInternalError"/></codeph> is added to suggest that an internal error in HTTP. You can try again later. </ph><ph props="unity flutter">(Android, iOS)</ph></li>
                        </ul></p>
                    </li>
                </ol>
            </body>
        </topic>
        <topic id="bugfix">
            <title>Issues fixed</title>
            <body>
                <p>This release fixed the following issues:</p>
                <ul>
                    <li>当同时共享两路屏幕共享视频流时，<xref keyref="onLocalVideoStats"/> 回调上报的 <codeph>captureFrameRate</codeph> 为 0，不符合预期。 </li>
                    <li props="cpp unity flutter electron">When sharing in a specified screen area, the mouse coordinates within the shared area are inaccurate. When the mouse is near the border of the shared area, the mouse may not be visible in the shared screen. (Windows)</li>
                    <li props="cpp unity flutter electron"><ph>The SDK failed to detect any changes in the audio routing after plugging in and out 3.5mm earphones. </ph><ph props="unity flutter electron">(Windows)</ph></li>
                    <li props="android">In a online meeting scenario, occasional audio freezes occured when the local user was listening to remote users.</li>
                </ul>
            </body>
        </topic>
        <topic id="apichange">
            <title>API changes</title>
            <body>
                <p><b>新增</b>                    <ul>
                        <li props="ios android rn unity flutter"><xref keyref="onTranscodedStreamLayoutInfo"/>(Android, iOS)</li>
                        <li props="ios android rn unity flutter"><xref keyref="VideoLayout"/>(Android, iOS)</li>
                        <li>The<xref keyref="VideoCanvas"/><codeph> subviewUid</codeph> member in<codeph></codeph></li>
                        <li props="android">The <codeph>codecType</codeph> member in <xref keyref="VideoEncoderConfiguration"/></li>
                        <li props="android">The <codeph>allowCaptureCurrentApp</codeph> member in <xref keyref="ScreenAudioParameters"/></li>
                        <li props="ios"><xref keyref="updateSelfTransform"/></li>
                        <li props="apple"><p><xref keyref="LOCAL_AUDIO_STREAM_REASON"/>中新增以下枚举                            <ul>
                                <li props="mac"><codeph><apiname keyref="LOCAL_AUDIO_STREAM_REASON_NO_RECORDING_DEVICE"/></codeph></li>
                                <li props="mac"><codeph><apiname keyref="LOCAL_AUDIO_STREAM_REASON_NO_PLAYOUT_DEVICE"/></codeph></li>
                                <li props="ios"><codeph><apiname keyref="LOCAL_AUDIO_STREAM_REASON_INTERRUPTED"/></codeph></li></ul></p></li>
                        <li><xref keyref="enableCustomAudioLocalPlayback"/></li>
                        <li><xref keyref="queryDeviceScore"/></li>
                        <li>The <codeph><ph keyref="CUSTOM_VIDEO_SOURCE"/></codeph> enumeration in <xref keyref="MEDIA_SOURCE_TYPE"/></li> 
                        <li props="android ios"><xref keyref="setBeautyEffectOptions2"/></li>
                        <li props="android ios"><xref keyref="setLowlightEnhanceOptions2"/></li>
                        <li props="android ios"><xref keyref="setVideoDenoiserOptions2"/></li>
                        <li props="android ios"><xref keyref="setColorEnhanceOptions2"/></li>
                        <li props="android ios"><xref keyref="enableVirtualBackground2"/></li>
                        <li props="apple cpp framework">The <codeph><ph keyref="ROUTE_BLUETOOTH_DEVICE_A2DP"/></codeph> enumeration in <xref keyref="AudioRoute"/></li>
                        <li props="android">The  enumeration in<codeph><ph keyref="ROUTE_BLUETOOTH_DEVICE_A2DP"/></codeph></li>
                        <li props="android ios mac flutter unity rn"><xref keyref="LocalAudioStats"/>Adds the <codeph>earMonitorDelay</codeph> and <codeph>aecEstimatedDelay</codeph></li>
                        <li><xref keyref="selectMultiAudioTrack"/></li>
                        <li><xref keyref="onPlayerCacheStats"/></li>
                        <li><xref keyref="onPlayerPlaybackStats"/></li>
                        <li><xref keyref="PlayerPlaybackStats"/></li>
                        <li props="android ios unity flutter rn"><codeph><apiname keyref="kMusicContentCenterReasonHttpInternalError"/></codeph> in <xref keyref="MusicContentCenterStateReason"/> <ph props="unity flutter">(Android, iOS)</ph></li>
                        <li props="android ios"><xref keyref="startPlaybackDeviceTest"/></li>
                        <li props="android ios"><xref keyref="stopPlaybackDeviceTest"/></li>
                    </ul></p>
                <p><b>修改</b>                    <ul>
                    <li props="android"><codeph>pushExternalVideoFrameEx</codeph>[1/2] and <codeph>pushExternalVideoFrameEx</codeph>[2/2] are renamed to <codeph>pushExternalVideoFrameById</codeph>[1/2] and <codeph>pushExternalVideoFrameById</codeph>[2/2], and are migrated from <codeph><apiname keyref="IRtcEngineEx"/></codeph> to <codeph><apiname keyref="IRtcEngine"/></codeph></li>
                    <li props="ios"><codeph>pushExternalVideoFrame</codeph>[1/2] is migrated from <codeph><apiname keyref="IRtcEngineEx"/></codeph> to <codeph><apiname keyref="IRtcEngine"/></codeph></li>
                    <li props="android"><codeph>REMOTE_VIDEO_STATE_PLAYING</codeph> enumeration name changed to<codeph><ph keyref="REMOTE_VIDEO_STATE_DECODING"/></codeph></li>
                    <li props="android unity"><codeph>ROUTE_BLUETOOTH</codeph> is renamed as<codeph><ph keyref="ROUTE_BLUETOOTH_DEVICE_HFP"/></codeph></li>
                    <li props="ios"><codeph>AgoraAudioOutputRoutingBluetooth</codeph> is renamed as<codeph><ph keyref="ROUTE_BLUETOOTH_DEVICE_HFP"/></codeph></li>
                    <li props="rn"><codeph>routeBluetooth</codeph> is renamed as<codeph><ph keyref="ROUTE_BLUETOOTH_DEVICE_HFP"/></codeph></li>
                    <li props="flutter"><codeph>routeBluetooth</codeph> is renamed as<codeph><ph keyref="ROUTE_BLUETOOTH_DEVICE_HFP"/></codeph></li>
                    <li><p>以下枚举名中的 <codeph>ERROR</codeph> 字段全部修改为 <codeph>REASON</codeph>：                        <ul>
                            <li><codeph><apiname keyref="LOCAL_AUDIO_STREAM_REASON_OK"></apiname></codeph></li>
                            <li><codeph><apiname keyref="LOCAL_AUDIO_STREAM_REASON_FAILURE"></apiname></codeph></li>
                            <li><codeph><apiname keyref="LOCAL_AUDIO_STREAM_REASON_DEVICE_NO_PERMISSION"></apiname></codeph></li>
                            <li><codeph><apiname keyref="LOCAL_AUDIO_STREAM_REASON_DEVICE_BUSY"></apiname></codeph></li>
                            <li><codeph><apiname keyref="LOCAL_AUDIO_STREAM_REASON_RECORD_FAILURE"></apiname></codeph></li>
                            <li><codeph><apiname keyref="LOCAL_AUDIO_STREAM_REASON_ENCODE_FAILURE"></apiname></codeph></li>
                            <li props="cpp unity flutter electron"><codeph><apiname keyref="LOCAL_AUDIO_STREAM_REASON_RECORD_INVALID_ID"></apiname></codeph>(Windows)</li>
                            <li props="cpp unity flutter electron"><codeph><apiname keyref="LOCAL_AUDIO_STREAM_REASON_PLAYOUT_INVALID_ID"></apiname></codeph>(Windows)</li>
                            <li><codeph><apiname keyref="LOCAL_VIDEO_STREAM_REASON_OK"></apiname></codeph></li>
                            <li><codeph><apiname keyref="LOCAL_VIDEO_STREAM_REASON_FAILURE"></apiname></codeph></li>
                            <li><codeph><apiname keyref="LOCAL_VIDEO_STREAM_REASON_DEVICE_NO_PERMISSION"></apiname></codeph></li>
                            <li><codeph><apiname keyref="LOCAL_VIDEO_STREAM_REASON_DEVICE_BUSY"></apiname></codeph></li>
                            <li><codeph><apiname keyref="LOCAL_VIDEO_STREAM_REASON_CAPTURE_FAILURE"></apiname></codeph></li>
                            <li><codeph><apiname keyref="LOCAL_VIDEO_STREAM_REASON_CODEC_NOT_SUPPORT"></apiname></codeph></li>
                            <li props="ios cpp rn unity flutter"><codeph><apiname keyref="LOCAL_VIDEO_STREAM_REASON_CAPTURE_INBACKGROUND"></apiname></codeph>(iOS)</li>
                            <li props="ios cpp rn unity flutter"><codeph><apiname keyref="LOCAL_VIDEO_STREAM_REASON_CAPTURE_MULTIPLE_FOREGROUND_APPS"></apiname></codeph>(iOS)</li>
                            <li><codeph><apiname keyref="LOCAL_VIDEO_STREAM_REASON_DEVICE_NOT_FOUND"></apiname></codeph></li>
                            <li><codeph><apiname keyref="LOCAL_VIDEO_STREAM_REASON_DEVICE_DISCONNECTED"></apiname></codeph></li>
                            <li><codeph><apiname keyref="LOCAL_VIDEO_STREAM_REASON_DEVICE_INVALID_ID"></apiname></codeph></li>
                            <li props="cpp unreal bp mac flutter unity electron"><codeph><apiname keyref="LOCAL_VIDEO_STREAM_REASON_SCREEN_CAPTURE_WINDOW_MINIMIZED"></apiname></codeph></li>
                            <li props="cpp unreal bp mac flutter unity electron cs"><codeph><apiname keyref="LOCAL_VIDEO_STREAM_REASON_SCREEN_CAPTURE_WINDOW_CLOSED"></apiname></codeph></li>
                            <li props="cpp unreal bp unity electron flutter cs"><codeph><apiname keyref="LOCAL_VIDEO_STREAM_REASON_SCREEN_CAPTURE_WINDOW_OCCLUDED"></apiname></codeph></li>
                            <li props="cpp flutter unity"><codeph><apiname keyref="LOCAL_VIDEO_STREAM_REASON_SCREEN_CAPTURE_NO_PERMISSION"></apiname></codeph>(Windows)</li>
                            <li props="cpp flutter unity"><codeph><apiname keyref="LOCAL_VIDEO_STREAM_REASON_SCREEN_CAPTURE_PAUSED"></apiname></codeph>(Windows)</li>
                            <li props="cpp flutter unity"><codeph><apiname keyref="LOCAL_VIDEO_STREAM_REASON_SCREEN_CAPTURE_RESUMED"></apiname></codeph>(Windows)</li>
                            <li props="cpp flutter unity"><codeph><apiname keyref="LOCAL_VIDEO_STREAM_REASON_SCREEN_CAPTURE_WINDOW_HIDDEN"></apiname></codeph>(Windows)</li>
                            <li props="cpp flutter unity"><codeph><apiname keyref="LOCAL_VIDEO_STREAM_REASON_SCREEN_CAPTURE_WINDOW_RECOVER_FROM_HIDDEN"></apiname></codeph>(Windows)</li>
                            <li props="cpp flutter unity"><codeph><apiname keyref="LOCAL_VIDEO_STREAM_REASON_SCREEN_CAPTURE_WINDOW_RECOVER_FROM_MINIMIZED"></apiname></codeph>(Windows)</li>
                            <li props="cpp flutter unity"><codeph><apiname keyref="LOCAL_VIDEO_STREAM_REASON_SCREEN_CAPTURE_FAILURE"></apiname></codeph>(Windows)</li>
                            <li props="cpp flutter unity"><codeph><apiname keyref="LOCAL_VIDEO_STREAM_REASON_DEVICE_SYSTEM_PRESSURE"></apiname></codeph>(Windows)</li>
                            <li><codeph><apiname keyref="DIRECT_CDN_STREAMING_REASON_OK"></apiname></codeph></li>
                            <li><codeph><apiname keyref="DIRECT_CDN_STREAMING_REASON_FAILED"></apiname></codeph></li>
                            <li><codeph><apiname keyref="DIRECT_CDN_STREAMING_REASON_AUDIO_PUBLICATION"></apiname></codeph></li>
                            <li><codeph><apiname keyref="DIRECT_CDN_STREAMING_REASON_VIDEO_PUBLICATION"></apiname></codeph></li>
                            <li><codeph><apiname keyref="DIRECT_CDN_STREAMING_REASON_NET_CONNECT"></apiname></codeph></li>
                            <li><codeph><apiname keyref="DIRECT_CDN_STREAMING_REASON_BAD_NAME"></apiname></codeph></li>
                            <li><codeph><apiname keyref="PLAYER_REASON_NONE"></apiname></codeph></li>
                            <li><codeph><apiname keyref="PLAYER_REASON_INVALID_ARGUMENTS"></apiname></codeph></li>
                            <li><codeph><apiname keyref="PLAYER_REASON_INTERNAL"></apiname></codeph></li>
                            <li><codeph><apiname keyref="PLAYER_REASON_NO_RESOURCE"></apiname></codeph></li>
                            <li><codeph><apiname keyref="PLAYER_REASON_INVALID_MEDIA_SOURCE"></apiname></codeph></li>
                            <li><codeph><apiname keyref="PLAYER_REASON_UNKNOWN_STREAM_TYPE"></apiname></codeph></li>
                            <li><codeph><apiname keyref="PLAYER_REASON_OBJ_NOT_INITIALIZED"></apiname></codeph></li>
                            <li><codeph><apiname keyref="PLAYER_REASON_CODEC_NOT_SUPPORTED"></apiname></codeph></li>
                            <li><codeph><apiname keyref="PLAYER_REASON_VIDEO_RENDER_FAILED"></apiname></codeph></li>
                            <li><codeph><apiname keyref="PLAYER_REASON_INVALID_STATE"></apiname></codeph></li>
                            <li><codeph><apiname keyref="PLAYER_REASON_URL_NOT_FOUND"></apiname></codeph></li>
                            <li><codeph><apiname keyref="PLAYER_REASON_INVALID_CONNECTION_STATE"></apiname></codeph></li>
                            <li><codeph><apiname keyref="PLAYER_REASON_SRC_BUFFER_UNDERFLOW"></apiname></codeph></li>
                            <li><codeph><apiname keyref="PLAYER_REASON_INTERRUPTED"></apiname></codeph></li>
                            <li><codeph><apiname keyref="PLAYER_REASON_NOT_SUPPORTED"></apiname></codeph></li>
                            <li><codeph><apiname keyref="PLAYER_REASON_TOKEN_EXPIRED"></apiname></codeph></li>
                            <li><codeph><apiname keyref="PLAYER_REASON_UNKNOWN"></apiname></codeph></li>
                            <li><codeph><apiname keyref="RTMP_STREAM_PUBLISH_REASON_OK"></apiname></codeph></li>
                            <li><codeph><apiname keyref="RTMP_STREAM_PUBLISH_REASON_INVALID_ARGUMENT"></apiname></codeph></li>
                            <li><codeph><apiname keyref="RTMP_STREAM_PUBLISH_REASON_ENCRYPTED_STREAM_NOT_ALLOWED"></apiname></codeph></li>
                            <li><codeph><apiname keyref="RTMP_STREAM_PUBLISH_REASON_CONNECTION_TIMEOUT"></apiname></codeph></li>
                            <li><codeph><apiname keyref="RTMP_STREAM_PUBLISH_REASON_INTERNAL_SERVER_ERROR"></apiname></codeph></li>
                            <li><codeph><apiname keyref="RTMP_STREAM_PUBLISH_REASON_RTMP_SERVER_ERROR"></apiname></codeph></li>
                            <li><codeph><apiname keyref="RTMP_STREAM_PUBLISH_REASON_TOO_OFTEN"></apiname></codeph></li>
                            <li><codeph><apiname keyref="RTMP_STREAM_PUBLISH_REASON_REACH_LIMIT"></apiname></codeph></li>
                            <li><codeph><apiname keyref="RTMP_STREAM_PUBLISH_REASON_NOT_AUTHORIZED"></apiname></codeph></li>
                            <li><codeph><apiname keyref="RTMP_STREAM_PUBLISH_REASON_STREAM_NOT_FOUND"></apiname></codeph></li>
                            <li><codeph><apiname keyref="RTMP_STREAM_PUBLISH_REASON_FORMAT_NOT_SUPPORTED"></apiname></codeph></li>
                            <li><codeph><apiname keyref="RTMP_STREAM_PUBLISH_REASON_NOT_BROADCASTER"></apiname></codeph></li>
                            <li><codeph><apiname keyref="RTMP_STREAM_PUBLISH_REASON_TRANSCODING_NO_MIX_STREAM"></apiname></codeph></li>
                            <li><codeph><apiname keyref="RTMP_STREAM_PUBLISH_REASON_NET_DOWN"></apiname></codeph></li>
                            <li><codeph><apiname keyref="RTMP_STREAM_PUBLISH_REASON_INVALID_PRIVILEGE"></apiname></codeph></li>
                            <li><codeph><apiname keyref="RTMP_STREAM_UNPUBLISH_REASON_OK"></apiname></codeph></li>
                            </ul></p></li>
                        <li props="ios android flutter unity rn"><ph><codeph><apiname keyref="MusicContentCenterStatusCode"/></codeph>修改为 <codeph><apiname keyref="MusicContentCenterStateReason"/></codeph>，其中的枚举名的 <codeph>StatusErr</codeph> 字段全部修改为 <codeph>Reason</codeph>：</ph><ph props="unity flutter">(Android, iOS)</ph>                            <ul>
                            <li><codeph><apiname keyref="kMusicContentCenterReasonGateway"></apiname></codeph></li>
                            <li><codeph><apiname keyref="kMusicContentCenterReasonPermissionAndResource"></apiname></codeph></li>
                            <li><codeph><apiname keyref="kMusicContentCenterReasonInternalDataParse"></apiname></codeph></li>
                            <li><codeph><apiname keyref="kMusicContentCenterReasonMusicLoading"></apiname></codeph></li>
                            <li><codeph><apiname keyref="kMusicContentCenterReasonMusicDecryption"></apiname></codeph></li>
                        </ul></li>
                    <li props="ios android flutter unity rn"> is changed to<codeph><apiname keyref="kMusicContentCenterStatusErr"></apiname></codeph><codeph><apiname keyref="kMusicContentCenterReasonError"/></codeph></li>
                    </ul></p>
                <p><b>删除</b>                    <ul>
                    <li><codeph><apiname keyref="startChannelMediaRelay"/></codeph></li>
                    <li><codeph><apiname keyref="updateChannelMediaRelay"/></codeph></li>
                    <li><codeph><apiname keyref="startChannelMediaRelayEx"/></codeph></li>
                    <li><codeph><apiname keyref="updateChannelMediaRelayEx"/></codeph></li>
                    <li><codeph><apiname keyref="onChannelMediaRelayEvent"/></codeph></li>
                    <li><codeph><apiname keyref="CHANNEL_MEDIA_RELAY_EVENT"/></codeph></li>
                    </ul></p>
            </body>
        </topic>
    </topic>
</topic>

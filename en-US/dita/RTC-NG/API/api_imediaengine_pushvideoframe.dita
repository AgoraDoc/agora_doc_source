<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_imediaengine_pushvideoframe">
    <title><ph keyref="pushVideoFrame" /></title>
    <shortdesc id="short"><ph id="shortdesc">Pushes the external raw video frame to the SDK through video tracks.</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="pushVideoFrame" />
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public abstract int pushExternalVideoFrameById(AgoraVideoFrame frame, int videoTrackId);</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">- (BOOL)pushExternalVideoFrame:(AgoraVideoFrame * _Nonnull)frame videoTrackId:(NSUInteger)videoTrackId NS_SWIFT_NAME(pushExternalVideoFrame(_:videoTrackId:));</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">virtual int pushVideoFrame(base::ExternalVideoFrame* frame, unsigned int videoTrackId = 0) = 0;</codeblock>
            <codeblock props="electron" outputclass="language-typescript">abstract pushVideoFrame(
    frame: ExternalVideoFrame,
    videoTrackId?: number
  ): number;</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public abstract int PushVideoFrame(ExternalVideoFrame frame, uint videoTrackId = 0);</codeblock>
            <codeblock props="rn" outputclass="language-typescript">abstract pushVideoFrame(
    frame: ExternalVideoFrame,
    videoTrackId?: number
  ): number;</codeblock>
            <codeblock props="flutter" outputclass="language-dart">Future&lt;void> pushVideoFrame(
    {required ExternalVideoFrame frame, int videoTrackId = 0});</codeblock>
            <codeblock props="reserve" outputclass="language-cpp"/></p>
        </section>
        <section id="detailed_desc">
            <title>Details</title>
            <dl outputclass="deprecated" props="android">
            <dlentry>
                <dt>Deprecated:</dt>
                <dd>If you need to push video frames in I422 format, you need to use this method; otherwise, use <xref keyref="pushVideoFrame3"/> instead.</dd>
            </dlentry>
            </dl>
            <p id="desc1">推送自定义采集的视频流到频道内，参考如下步骤：<ol>
            <li>The<xref keyref="createCustomVideoTrack"/> video track ID returned by calling the  method.</li>
            <li>In each channel's<xref keyref="ChannelMediaOptions"/> , set the <parmname>customVideoTrackId</parmname> parameter to the ID of the video track you want to publish, and set <parmname>publishCustomVideoTrack</parmname> to .<codeph><ph keyref="true"/></codeph></li>
            <li>调用本方法将未编码的外部视频帧推送到 SDK。</li></ol></p>
            <note type="danger" id="desc2">调用该方法后，即使你停止推送外部视频帧到 SDK，自定义采集的视频流仍然会被计入视频时长用量并产生费用，声网建议你根据实际情况采取相应措施避免此类视频计费：<ul>
            <li>如果你不再需要采集外部视频数据，可以调用 <xref keyref="destroyCustomVideoTrack"/> 销毁自定义采集的视频轨道。</li>
            <li>如果你只想将采集到的外部视频数据用于本地预览、而不在频道内发布，可以调用 <xref keyref="muteLocalVideoStream"/> 取消发送视频流，或调用 <xref keyref="updateChannelMediaOptions"/> 将 <parmname>publishCustomVideoTrack</parmname> 设置为 <codeph><ph keyref="false"/></codeph>。</li>
            </ul></note>
            <p props="android">You can push the video frame either by calling this method or by calling <xref keyref="pushVideoFrame3"/>. The difference is that the  method does not support video data in texture format.</p>
        </section>
        <section props="cpp" id="scenario">
            <title>Applicable scenarios</title>
            <p>As of v4.2.3, the SDK supports the ID3D11Texture2D video format since , which is widely used in game scenarios. When you need to push this type of video frame to the SDK, call this method and set the <parmname>format</parmname> in the <parmname>frame</parmname> to <codeph>VIDEO_TEXTURE_ID3D11TEXTURE2D</codeph>, set the <parmname>d3d11_texture_2d</parmname> and <parmname>texture_slice_index</parmname> members, and set the format of the video frame to ID3D11Texture2D.</p>
        </section>
        <section id="parameters">
            <title>Parameters</title>
            <parml>
            <plentry id="frame">
                <pt>frame</pt>
                <pd>
                    <p>The external raw video frame to be pushed. See <xref keyref="ExternalVideoFrame" />.</p>
                </pd>
            </plentry>
            <plentry id="videotrackid">
                <pt>videoTrackId</pt>
                <pd>The video track ID returned by calling the <apiname keyref="createCustomVideoTrack"/> method. The default value is 0.</pd>
            </plentry>    
            </parml>
        </section>
        <section id="return_values">
            <title><ph keyref="return-section-title"/></title>
            <p props="flutter">When the method call succeeds, there is no return value; when fails, the <xref keyref="AgoraRtcException"/> exception is thrown; and you need to catch the exception and handle it accordingly. <ph props="cn">See <xref keyref="error-code-link"/> for details and resolution suggestions.</ph></p>
            <ul props="android cpp unreal bp unity rn electron cs">
            <li>0: Success.</li>
            <li>&lt; 0: Failure. <ph props="cn">See <xref keyref="error-code-link"/> for details and resolution suggestions.</ph></li>
            </ul>
            <ul props="apple">
            <li><codeph><ph keyref="true"/></codeph>: Success.</li>
            <li><codeph><ph keyref="false"/></codeph>: Failure. <ph props="cn">See <xref keyref="error-code-link"/> for details and resolution suggestions.</ph></li>
            </ul> </section>
    </refbody>
</reference>

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="class_videoformat">
    <title><ph keyref="VideoFormat" /></title>
    <shortdesc id="short"><ph id="shortdesc">The format of the video frame.</ph></shortdesc>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java" />
            <codeblock props="ios mac" outputclass="language-objectivec">__attribute__((visibility("default"))) @interface AgoraTranscodingVideoStream: NSObject
@property (assign, nonatomic) AgoraMediaSourceType sourceType;
@property (assign, nonatomic) NSUInteger remoteUserUid;
@property (copy, nonatomic) NSString * _Nullable imageUrl;
@property (assign, nonatomic) CGRect rect;
@property (assign, nonatomic) NSInteger zOrder;
@property(assign, nonatomic) double alpha;

@end</codeblock>
            <codeblock props="cpp" outputclass="language-cpp">struct TranscodingVideoStream {
  agora::media::MEDIA_SOURCE_TYPE sourceType;
  uid_t remoteUserUid;
  const char* imageUrl;
  int x;
  int y;
  int width;
  int height;
  int zOrder;
  double alpha;
  bool mirror;

  TranscodingVideoStream()
      : sourceType(agora::media::PRIMARY_CAMERA_SOURCE),
        remoteUserUid(0),
        imageUrl(NULL),
        x(0),
        y(0),
        width(0),
        height(0),
        zOrder(0),
        alpha(1.0),
        mirror(false) {}
};</codeblock>
            <codeblock props="electron" outputclass="language-typescript">export class TranscodingVideoStream {
  
  sourceType?: MediaSourceType;
  
  remoteUserUid?: number;
  
  imageUrl?: string;
  
  x?: number;
  
  y?: number;
  
  width?: number;
  
  height?: number;
  
  zOrder?: number;
  
  alpha?: number;
  
  mirror?: boolean;
}</codeblock>
            <codeblock props="unity" outputclass="language-csharp">public class TranscodingVideoStream
    {
        public TranscodingVideoStream()
        {
            this.sourceType = MEDIA_SOURCE_TYPE.PRIMARY_CAMERA_SOURCE;
            remoteUserUid = 0;
            imageUrl = null;
            x = 0;
            y = 0;
            width = 0;
            height = 0;
            zOrder = 0;
            alpha = 1.0;
            mirror = false;
        }

        public TranscodingVideoStream(MEDIA_SOURCE_TYPE sourceType, uint remoteUserUid,
            string imageUrl, int x, int y, int width, int height, int zOrder, double alpha,
            bool mirror)
        {
            this.sourceType = sourceType;
            this.remoteUserUid = remoteUserUid;
            this.imageUrl = imageUrl;
            this.x = x;
            this.y = y;
            this.width = width;
            this.height = height;
            this.zOrder = zOrder;
            this.alpha = alpha;
            this.mirror = mirror;
        }

        public MEDIA_SOURCE_TYPE sourceType { set; get; }
        public uint remoteUserUid { set; get; }
        public string imageUrl { set; get; }
        public int x { set; get; }
        public int y { set; get; }
        public int width { set; get; }
        public int height { set; get; }
        public int zOrder { set; get; }
        public double alpha { set; get; }
        public bool mirror { set; get; }
    }</codeblock>
            <codeblock props="rn" outputclass="language-typescript">export class TranscodingVideoStream {
  
  sourceType?: MediaSourceType;
  
  remoteUserUid?: number;
  
  imageUrl?: string;
  
  x?: number;
  
  y?: number;
  
  width?: number;
  
  height?: number;
  
  zOrder?: number;
  
  alpha?: number;
  
  mirror?: boolean;
}</codeblock>
            <codeblock props="flutter" outputclass="language-dart">class TranscodingVideoStream {
  const TranscodingVideoStream(
      {this.sourceType,
      this.remoteUserUid,
      this.imageUrl,
      this.x,
      this.y,
      this.width,
      this.height,
      this.zOrder,
      this.alpha,
      this.mirror});

  @JsonKey(name: 'sourceType')
  final MediaSourceType? sourceType;
  @JsonKey(name: 'remoteUserUid')
  final int? remoteUserUid;
  @JsonKey(name: 'imageUrl')
  final String? imageUrl;
  @JsonKey(name: 'x')
  final int? x;
  @JsonKey(name: 'y')
  final int? y;
  @JsonKey(name: 'width')
  final int? width;
  @JsonKey(name: 'height')
  final int? height;
  @JsonKey(name: 'zOrder')
  final int? zOrder;
  @JsonKey(name: 'alpha')
  final double? alpha;
  @JsonKey(name: 'mirror')
  final bool? mirror;
  factory TranscodingVideoStream.fromJson(Map&lt;String, dynamic&gt; json) =&gt;
      _$TranscodingVideoStreamFromJson(json);
  Map&lt;String, dynamic&gt; toJson() =&gt; _$TranscodingVideoStreamToJson(this);
}

@JsonSerializable(explicitToJson: true)
class LocalTranscoderConfiguration {
  const LocalTranscoderConfiguration(
      {this.streamCount,
      this.videoInputStreams,
      this.videoOutputConfiguration});

  @JsonKey(name: 'streamCount')
  final int? streamCount;
  @JsonKey(name: 'VideoInputStreams')
  final List&lt;TranscodingVideoStream&gt;? videoInputStreams;
  @JsonKey(name: 'videoOutputConfiguration')
  final VideoEncoderConfiguration? videoOutputConfiguration;
  factory LocalTranscoderConfiguration.fromJson(Map&lt;String, dynamic&gt; json) =&gt;
      _$LocalTranscoderConfigurationFromJson(json);
  Map&lt;String, dynamic&gt; toJson() =&gt; _$LocalTranscoderConfigurationToJson(this);
}</codeblock>
            </p>
        </section>
        <section id="parameters">
            <title><text conref="../conref/conref_api_metadata.dita#conref_api_metadata/property" /></title>
            <parml>
            <plentry>
                <pt>width</pt>
                <pd>The width (px) of the video frame.</pd>
            </plentry>
            <plentry>
                <pt>height</pt>
                <pd>The height (px) of the video frame.</pd>
            </plentry>
            <plentry>
                <pt>fps</pt>
                <pd>The video frame rate (fps).</pd>
            </plentry>
            </parml> </section>
    </refbody>
</reference>
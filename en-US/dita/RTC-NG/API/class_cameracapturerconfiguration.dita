<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="class_cameracapturerconfiguration">
  <title> <ph keyref="CameraCapturerConfiguration"/> </title>
  <shortdesc id="short"><ph id="shortdesc">The camera capturer preference.</ph></shortdesc>
  <refbody>
    <section id="prototype">
      <p outputclass="codeblock">
      <codeblock props="android" outputclass="language-java">public class CameraCapturerConfiguration {
  public enum CAMERA_DIRECTION {
    CAMERA_REAR(0),
    CAMERA_FRONT(1),
    CAMERA_EXTRA(2);

    private int value;

    private CAMERA_DIRECTION(int v) {
      value = v;
    }

    @CalledByNative("CAMERA_DIRECTION")
    public int getValue() {
      return this.value;
    }
  }

  public enum CAMERA_FOCAL_LENGTH_TYPE {
    CAMERA_FOCAL_LENGTH_DEFAULT(0),
    CAMERA_FOCAL_LENGTH_WIDE_ANGLE(1),
    CAMERA_FOCAL_LENGTH_URLTRA_WIDE(2),
    CAMERA_FOCAL_LENGTH_TELEPHOTO(3);

    private int value;

    private CAMERA_FOCAL_LENGTH_TYPE(int v) {
      value = v;
    }

    @CalledByNative("CAMERA_FOCAL_LENGTH_TYPE")
    public int getValue() {
      return this.value;
    }
  }

  public CAMERA_DIRECTION cameraDirection = null;

  public String cameraId = null;

  public CAMERA_FOCAL_LENGTH_TYPE cameraFocalLengthType = null;

  static public class CaptureFormat {
    public int width;
    public int height;
    public int fps;

    public CaptureFormat(int width, int height, int fps) {
      this.width = width;
      this.height = height;
      this.fps = fps;
    }

    public CaptureFormat() {
      this.width = 960;
      this.height = 540;
      this.fps = 15;
    }

    @CalledByNative("CaptureFormat")
    public int getHeight() {
      return height;
    }

    @CalledByNative("CaptureFormat")
    public int getWidth() {
      return width;
    }

    @CalledByNative("CaptureFormat")
    public int getFps() {
      return fps;
    }

    @Override
    public String toString() {
      return "CaptureFormat{"
          + "width=" + width + ", height=" + height + ", fps=" + fps + '}';
    }
  }

  public CaptureFormat captureFormat;

  public Boolean followEncodeDimensionRatio = null;

  public CameraCapturerConfiguration(CAMERA_DIRECTION cameraDirection) {
    this.cameraDirection = cameraDirection;
    this.captureFormat = new CaptureFormat(0, 0, 0);
  }

  public CameraCapturerConfiguration(
      CAMERA_DIRECTION cameraDirection, CAMERA_FOCAL_LENGTH_TYPE cameraFocalLengthType) {
    this.cameraDirection = cameraDirection;
    this.cameraFocalLengthType = cameraFocalLengthType;
    this.captureFormat = new CaptureFormat(0, 0, 0);
  }

  public CameraCapturerConfiguration(CaptureFormat captureFormat) {
    this.captureFormat = captureFormat;
  }

  public CameraCapturerConfiguration(
      CAMERA_DIRECTION cameraDirection, CaptureFormat captureFormat) {
    this.cameraDirection = cameraDirection;
    this.captureFormat = captureFormat;
  }

  public CameraCapturerConfiguration(CAMERA_DIRECTION cameraDirection,
      CAMERA_FOCAL_LENGTH_TYPE cameraFocalLengthType, CaptureFormat captureFormat) {
    this.cameraDirection = cameraDirection;
    this.cameraFocalLengthType = cameraFocalLengthType;
    this.captureFormat = captureFormat;
  }

  @CalledByNative
  public CAMERA_DIRECTION getCameraDirection() {
    return cameraDirection;
  }

  @CalledByNative
  public String getCameraId() {
    return cameraId;
  }

  @CalledByNative
  public CAMERA_FOCAL_LENGTH_TYPE getCameraFocalLengthType() {
    return cameraFocalLengthType;
  }

  @CalledByNative
  public CaptureFormat getCaptureFormat() {
    return captureFormat;
  }

  @CalledByNative
  public Boolean isFollowEncodeDimensionRatio() {
    return followEncodeDimensionRatio;
  }

  @Override
  public String toString() {
    return "CameraCapturerConfiguration{"
        + "cameraDirection=" + cameraDirection + ", captureDimensions=" + captureFormat
        + ", cameraId=" + cameraId + ", followEncodeDimensionRatio=" + followEncodeDimensionRatio
        + ", cameraFocalLengthType=" + cameraFocalLengthType + '}';
  }
}</codeblock>
      <codeblock props="ios mac" outputclass="language-objectivec">__attribute__((visibility("default"))) @interface AgoraCameraCapturerConfiguration: NSObject
#if TARGET_OS_IOS
@property (assign, nonatomic) AgoraCameraDirection cameraDirection;
@property(assign, nonatomic) AgoraFocalLength cameraFocalLengthType;
#elif TARGET_OS_MAC
@property (copy, nonatomic) NSString * _Nullable deviceId;
#endif

@property(assign, nonatomic) CGSize dimensions;

@property(assign, nonatomic) int frameRate;

@property(assign, nonatomic) BOOL followEncodeDimensionRatio;

@end</codeblock>
      <codeblock props="cpp unreal" outputclass="language-cpp">struct CameraCapturerConfiguration {
#if defined(__ANDROID__) || (defined(__APPLE__) &amp;&amp; TARGET_OS_IOS)
  Optional&lt;CAMERA_DIRECTION> cameraDirection;

  Optional&lt;CAMERA_FOCAL_LENGTH_TYPE> cameraFocalLengthType;
#else
  Optional&lt;const char *> deviceId;
#endif

#if defined(__ANDROID__)
  Optional&lt;const char *> cameraId;
#endif
  Optional&lt;bool> followEncodeDimensionRatio;
  VideoFormat format;
  CameraCapturerConfiguration() : format(VideoFormat(0, 0, 0)) {}
};</codeblock>
         <codeblock props="bp" outputclass="language-cpp">USTRUCT(BlueprintType)
struct FCameraCapturerConfiguration
{
	GENERATED_BODY()
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|CameraCapturerConfiguration&quot;)
	ECAMERA_DIRECTION cameraDirection;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|CameraCapturerConfiguration&quot;)
	FString deviceId;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|CameraCapturerConfiguration&quot;)
	FVideoFormat format;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|CameraCapturerConfiguration&quot;)
	bool followEncodeDimensionRatio = true;
};</codeblock>
      <codeblock props="electron" outputclass="language-typescript">export class CameraCapturerConfiguration {
  
  cameraDirection?: CameraDirection;
  
  deviceId?: string;
  
  format?: VideoFormat;

  followEncodeDimensionRatio?: boolean;

}</codeblock>
      <codeblock props="unity cs" outputclass="language-csharp">public class CameraCapturerConfiguration
    {
        public CameraCapturerConfiguration()
        {
            deviceId = "";
            cameraDirection = CAMERA_DIRECTION.CAMERA_FRONT;
            format = new VideoFormat();
            this.followEncodeDimensionRatio = true;
        }

        public CameraCapturerConfiguration(string deviceId, VideoFormat format,
            CAMERA_DIRECTION cameraDirection, bool followEncodeDimensionRatio)
        {
            this.deviceId = deviceId;
            this.format = format;
            this.cameraDirection = cameraDirection;
            this.followEncodeDimensionRatio = followEncodeDimensionRatio;
        }

        public string deviceId { set; get; }
        public VideoFormat format { set; get; }
        public bool followEncodeDimensionRatio { set; get; }
        public CAMERA_DIRECTION cameraDirection { set; get; }
    }</codeblock>
      <codeblock props="rn" outputclass="language-typescript">export class CameraCapturerConfiguration {
  
  cameraDirection?: CameraDirection;
  
  deviceId?: string;
  
  format?: VideoFormat;

  followEncodeDimensionRatio?: boolean;

}</codeblock>
      <codeblock props="flutter" outputclass="language-dart">class CameraCapturerConfiguration {
  const CameraCapturerConfiguration(
      {this.cameraDirection,
      this.deviceId,
      this.format,
      this.followEncodeDimensionRatio});

  @JsonKey(name: 'cameraDirection')
  final CameraDirection? cameraDirection;

  @JsonKey(name: 'deviceId')
  final String? deviceId;

  @JsonKey(name: 'format')
  final VideoFormat? format;

  @JsonKey(name: 'followEncodeDimensionRatio')
  final bool? followEncodeDimensionRatio;

  factory CameraCapturerConfiguration.fromJson(Map&lt;String, dynamic> json) =>
      _$CameraCapturerConfigurationFromJson(json);

  Map&lt;String, dynamic> toJson() => _$CameraCapturerConfigurationToJson(this);
}</codeblock>            
            <codeblock props="reserve" outputclass="language-cpp"></codeblock></p></section>
    <section id="parameters">
      <title> <text conref="../conref/conref_api_metadata.dita#conref_api_metadata/property"/>
      </title>
      <parml>
      <plentry props="android ios cpp unreal bp unity rn flutter cs">
        <pt>cameraDirection</pt>
        <pd>(Optional) The camera direction. See <xref keyref="CAMERA_DIRECTION"/>.<note type="attention" props="cpp unreal bp unity flutter">This parameter applies to Android and iOS only.</note></pd>
      </plentry>
      <plentry props="android cpp unreal bp flutter unity rn">
        <pt>cameraId</pt>
        <pd>(Optional) The camera ID. 默认为前置摄像头对应的摄像头 ID。 You can obtain the camera ID through the Android native system API, see <xref keyref="camera1-link"/> and <xref keyref="camera2-link"/> for details.<note type="attention"><ul>
        <li props="cpp unreal bp flutter unity rn">This method is for Android only.</li>
        <li>该参数和 <parmname>cameraDirection</parmname> 均用于指定摄像头，二者为互斥关系，你可以按需选用其中之一，具体区别如下：<ul>
          <li>通过 <parmname>cameraDirection</parmname> 指定摄像头的方式更为简便。 你只需指定摄像头的方向（前置或后置），无需指定具体的摄像头 ID，SDK 会通过系统 API 去检索和确定实际的摄像头 ID。</li>
          <li>通过 <parmname>cameraId</parmname> 则可以更精确地指定某个特定的摄像头。 对于多摄像头的设备，<parmname>cameraDirection</parmname> 无法识别或访问全部可用摄像头，这种情况建议使用 <parmname>cameraId</parmname> 直接指定你想要的摄像头 ID。</li>
        </ul></li></ul></note>
        </pd>
      </plentry>
      <plentry props="android ios cpp unreal bp flutter unity rn">
        <pt>cameraFocalLengthType</pt>
        <pd>（可选）摄像头的焦距类型。 See <xref keyref="CAMERA_FOCAL_LENGTH_TYPE"/>.<note type="attention"><ul>
          <li props="cpp unreal bp flutter unity">This method is for Android and iOS only.</li>
          <li props="android cpp unreal bp flutter unity rn">如需设置摄像头的焦距类型，仅支持通过 <parmname>cameraDirection</parmname> 指定摄像头，不支持通过 <parmname>cameraId</parmname> 进行指定。</li>
          <li props="ios cpp unreal bp flutter unity rn">部分 iOS 设备的后置摄像头为多个摄像头组成的融合镜头，如双摄（广角和超广角）或三摄（广角、超广角和长焦），对于这种具备超广角能力的融合镜头，你可以通过以下任意一种方式实现超广角的采集效果：<ul>
              <li>方式一：将该参数设置为 <apiname keyref="CAMERA_FOCAL_LENGTH_URLTRA_WIDE"/> (2)（超广角镜头）。</li>
              <li>方式二：将该参数设置为 <apiname keyref="CAMERA_FOCAL_LENGTH_DEFAULT"/> (0)（标准镜头），然后调用 <xref keyref="setCameraZoomFactor"/> 将相机缩放比例设置为小于 1.0 的数值，最小可以设置为 0.5。</li></ul>            区别为方式一的超广角大小不可调节，方式二支持自由调节相机的缩放比例。</li>
        </ul></note>
        </pd>
      </plentry>
      <plentry props="android cpp framework">
        <pt props="cpp framework">format</pt>
        <pt props="android">captureFormat</pt>
        <pd>（可选）视频帧格式。 See <xref keyref="VideoFormat"/>.</pd>
      </plentry>
      <plentry props="apple">
        <pt>dimension</pt>
        <pd>（可选）视频帧的分辨率 (px)。 The default value is 960 × 540.</pd>
      </plentry>
      <plentry props="apple">
        <pt>frameRate</pt>
        <pd>（可选）视频帧的帧率 (fps)。 The default value is 15.</pd>
      </plentry>
      <plentry props="mac cpp unreal bp unity electron flutter cs">
        <pt>deviceId</pt>
        <pd>（可选）摄像头的 ID。 <ph props="cpp unreal bp electron flutter">The maximum length is <xref keyref="MAX_DEVICE_ID_LENGTH_TYPE"/>.</ph><note type="attention" props="cpp unreal bp unity flutter">This method is for Windows and macOS only.</note></pd>
      </plentry>
      <plentry>
        <pt>followEncodeDimensionRatio</pt>
        <pd>（可选）是否跟随 <xref keyref="setVideoEncoderConfiguration"/> 中设置的视频宽高比：<ul>
          <li><codeph><ph keyref="true"/></codeph>: (Default) Follow the set video aspect ratio. The SDK crops the captured video according to the set video aspect ratio and synchronously changes the local preview screen and the video frame in <xref keyref="onCaptureVideoFrame"/> and <xref keyref="onPreEncodeVideoFrame"/>.</li>
          <li><codeph><ph keyref="false"/></codeph>: Do not follow the system default audio playback device. The SDK does not change the aspect ratio of the captured video frame.</li>
          </ul></pd>
      </plentry>
      </parml> </section>
  </refbody>
</reference>

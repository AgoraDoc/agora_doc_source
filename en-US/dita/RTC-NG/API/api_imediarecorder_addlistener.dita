<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_imediarecorder_addlistener">
    <title><ph keyref="addListener_IMediaRecorder"/></title>
    <shortdesc id="short"><xref keyref="IMediaRecorderEvent"/><ph id="shortdesc">Adds one <xref keyref="IMediaRecorderEvent"/> listener.</ph><ph id="shortdesc"></ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="addListener_IMediaRecorder"/>
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java"/>
            <codeblock props="ios mac" outputclass="language-objectivec"/>
            <codeblock props="cpp unreal" outputclass="language-cpp"/>
            <codeblock props="electron" outputclass="language-typescript">addListener?&lt;EventType extends keyof IMediaRecorderEvent>(
      eventType: EventType,
      listener: IMediaRecorderEvent[EventType]
    ): void;</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp"/>
            <codeblock props="rn" outputclass="language-typescript">addListener?&lt;EventType extends keyof IMediaRecorderEvent>(
      eventType: EventType,
      listener: IMediaRecorderEvent[EventType]
    ): void;</codeblock>
            <codeblock props="reserve" outputclass="language-cpp"></codeblock></p>
        </section>
        <section id="detailed_desc">
            <title>Details</title>
            <p><apiname keyref="IMediaRecorderEvent"/><xref keyref="IMediaRecorder"/>After calling this method, you can listen for the corresponding events in the <xref keyref="IMediaRecorder"/> object and obtain data through <apiname keyref="IMediaRecorderEvent"/>. Depending on your project needs, you can add multiple listeners for the same event.</p>
        </section>
        <section id="parameters">
            <title>Parameters</title>
            <parml>
            <plentry id="eventType">
                <pt>eventType</pt>
                <pd><apiname keyref="IMediaRecorderEvent"/>The name of the target event to listen for. See <apiname keyref="IMediaRecorderEvent"/>.</pd>
            </plentry>
            <plentry id="listener">
                <pt>listener</pt>
                <pd><xref keyref="onRecorderStateChanged"/>The callback function for <parmname>eventType</parmname>. Take adding a listener for <xref keyref="onRecorderStateChanged"/> as an example:<parmname></parmname><codeblock outputclass="language-typescript">const onRecorderStateChanged = (state: RecorderState, error: RecorderErrorCode) => {};
engine.addListener('onRecorderStateChanged', onRecorderStateChanged);</codeblock></pd>
            </plentry>
            </parml> </section>
    </refbody>
</reference>

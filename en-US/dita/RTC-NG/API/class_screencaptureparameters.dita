<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="class_screencaptureparameters">
    <title><ph keyref="ScreenCaptureParameters"/></title>
    <shortdesc id="short"><ph id="shortdesc">Screen sharing configurations.</ph></shortdesc>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="mac" outputclass="language-objectivec">__attribute__((visibility("default"))) @interface AgoraScreenCaptureParameters: NSObject
@property (assign, nonatomic) CGSize dimensions;
@property (assign, nonatomic) NSInteger frameRate;
@property (assign, nonatomic) NSInteger bitrate;

@end</codeblock>
            <codeblock props="android" outputclass="language-java">public class ScreenCaptureParameters {
  private VideoDimensions videoDimensions;
  private int frameRate;
  private int bitrate;

  public ScreenCaptureParameters() {
    videoDimensions = new VideoDimensions(1080, 1920);
    frameRate = 5;
    bitrate = 4098;
  }

  public ScreenCaptureParameters setVideoDimensions(VideoDimensions videoDimensions) {
    this.videoDimensions = videoDimensions;
    return this;
  }

  public ScreenCaptureParameters setFrameRate(int frameRate) {
    this.frameRate = frameRate;
    return this;
  }

  public ScreenCaptureParameters setBitrate(int bitrate) {
    this.bitrate = bitrate;
    return this;
  }

  public VideoDimensions getVideoDimensions() {
    return videoDimensions;
  }

  @CalledByNative
  int getWidth() {
    return videoDimensions != null ? videoDimensions.width : 0;
  }

  @CalledByNative
  int getHeight() {
    return videoDimensions != null ? videoDimensions.height : 0;
  }

  @CalledByNative
  public int getFrameRate() {
    return frameRate;
  }

  @CalledByNative
  public int getBitrate() {
    return bitrate;
  }
}</codeblock>
            <codeblock props="cpp" outputclass="language-cpp">struct ScreenCaptureParameters {
  VideoDimensions dimensions;
  int frameRate;
  int bitrate;
  bool captureMouseCursor;
  bool windowFocus;
  view_t *excludeWindowList;
  int excludeWindowCount;

  ScreenCaptureParameters()
    : dimensions(1920, 1080), frameRate(5), bitrate(STANDARD_BITRATE), captureMouseCursor(true), windowFocus(false), excludeWindowList(OPTIONAL_NULLPTR), excludeWindowCount(0) {}
  ScreenCaptureParameters(const VideoDimensions&amp; d, int f, int b)
    : dimensions(d), frameRate(f), bitrate(b), captureMouseCursor(true), windowFocus(false), excludeWindowList(OPTIONAL_NULLPTR), excludeWindowCount(0) {}
  ScreenCaptureParameters(int width, int height, int f, int b)
    : dimensions(width, height), frameRate(f), bitrate(b), captureMouseCursor(true), windowFocus(false), excludeWindowList(OPTIONAL_NULLPTR), excludeWindowCount(0) {}
  ScreenCaptureParameters(int width, int height, int f, int b, bool cur, bool fcs)
    : dimensions(width, height), frameRate(f), bitrate(b), captureMouseCursor(cur), windowFocus(fcs), excludeWindowList(OPTIONAL_NULLPTR), excludeWindowCount(0) {}
  ScreenCaptureParameters(int width, int height, int f, int b, view_t *ex, int cnt)
    : dimensions(width, height), frameRate(f), bitrate(b), captureMouseCursor(true), windowFocus(false), excludeWindowList(ex), excludeWindowCount(cnt) {}
  ScreenCaptureParameters(int width, int height, int f, int b, bool cur, bool fcs, view_t *ex, int cnt)
    : dimensions(width, height), frameRate(f), bitrate(b), captureMouseCursor(cur), windowFocus(fcs), excludeWindowList(ex), excludeWindowCount(cnt) {}
};</codeblock>
            <codeblock props="electron" outputclass="language-typescript">export class ScreenCaptureParameters {
  dimensions?: VideoDimensions
  frameRate?: number
  bitrate?: number
  captureMouseCursor?: boolean
  windowFocus?: boolean
  excludeWindowList?: any[]
  excludeWindowCount?: number
}</codeblock>
            <codeblock props="unity" outputclass="language-csharp">public class ScreenCaptureParameters
    {
        public ScreenCaptureParameters()
        {
            dimensions = new VideoDimensions(1920, 1080);
            frameRate = 5;
            bitrate = (int)BITRATE.STANDARD_BITRATE;
            captureMouseCursor = true;
            windowFocus = false;
            excludeWindowList = new view_t[0];
            excludeWindowCount = 0;
        }

        public ScreenCaptureParameters(ref VideoDimensions d, int f, int b)
        {
            dimensions = new VideoDimensions(d.width, d.height);
            frameRate = f;
            bitrate = b;
            captureMouseCursor = true;
            windowFocus = false;
            excludeWindowList = new view_t[0];
            excludeWindowCount = 0;
        }

        public ScreenCaptureParameters(int width, int height, int f, int b)
        {
            dimensions = new VideoDimensions(width, height);
            frameRate = f;
            bitrate = b;
            captureMouseCursor = true;
            windowFocus = false;
            excludeWindowList = new view_t[0];
            excludeWindowCount = 0;
        }

        public ScreenCaptureParameters(int width, int height, int f, int b, bool cur, bool fcs)
        {
            dimensions = new VideoDimensions(width, height);
            frameRate = f;
            bitrate = b;
            captureMouseCursor = cur;
            windowFocus = fcs;
            excludeWindowList = new view_t[0];
            excludeWindowCount = 0;
        }

        public ScreenCaptureParameters(int width, int height, int f, int b, view_t[] ex, int cnt)
        {
            dimensions = new VideoDimensions(width, height);
            frameRate = f;
            bitrate = b;
            captureMouseCursor = true;
            windowFocus = false;
            excludeWindowList = ex;
            excludeWindowCount = cnt;
        }

        public ScreenCaptureParameters(int width, int height, int f, int b, bool cur, bool fcs, view_t[] ex, int cnt)
        {
            dimensions = new VideoDimensions(width, height);
            frameRate = f;
            bitrate = b;
            captureMouseCursor = cur;
            windowFocus = fcs;
            excludeWindowList = ex;
            excludeWindowCount = cnt;
        }
        public VideoDimensions dimensions { set; get; }
        public int frameRate { set; get; }
        public int bitrate { set; get; }
        public bool captureMouseCursor { set; get; }
        public bool windowFocus { set; get; }
        public view_t[] excludeWindowList { set; get; }
        public int excludeWindowCount { set; get; }
    }</codeblock>
            <codeblock props="rn" outputclass="language-typescript"/>
            <codeblock props="flutter" outputclass="language-dart">class ScreenCaptureParameters {
  const ScreenCaptureParameters(
      {this.dimensions,
      this.frameRate,
      this.bitrate,
      this.captureMouseCursor,
      this.windowFocus,
      this.excludeWindowList,
      this.excludeWindowCount});

  @JsonKey(name: 'dimensions')
  final VideoDimensions? dimensions;
  @JsonKey(name: 'frameRate')
  final int? frameRate;
  @JsonKey(name: 'bitrate')
  final int? bitrate;
  @JsonKey(name: 'captureMouseCursor')
  final bool? captureMouseCursor;
  @JsonKey(name: 'windowFocus')
  final bool? windowFocus;
  @JsonKey(name: 'excludeWindowList')
  final List&lt;int>? excludeWindowList;
  @JsonKey(name: 'excludeWindowCount')
  final int? excludeWindowCount;
  factory ScreenCaptureParameters.fromJson(Map&lt;String, dynamic> json) =>
      _$ScreenCaptureParametersFromJson(json);
  Map&lt;String, dynamic> toJson() => _$ScreenCaptureParametersToJson(this);
}</codeblock>
            </p>
        </section>
        <section id="parameters">
            <title><text
            conref="../conref/conref_api_metadata.dita#conref_api_metadata/property"
            /></title>
            <parml>
            <plentry>
                <pt props="ios mac cpp unity flutter electron rn">dimensions</pt>
                <pt props="android">videoDimensions</pt>
                <pd>
                    <p>The maximum dimensions of encoding the shared region. See <xref keyref="VideoDimensions"/>. The default value is 1920 x 1080, that is, 2,073,600 pixels. Agora uses the value of this parameter to calculate the charges.</p>
                    <p>If the aspect ratio is different between the encoding dimensions and screen dimensions, Agora applies the following algorithms for encoding. Suppose <codeph>dimensions</codeph> are 1920 x 1080:<ul>
                    <li>If the value of the screen dimensions is lower than that of <codeph>dimensions</codeph>, for example, 1000 x 1000 pixels, the SDK uses 1000 x 1000 pixels for encoding.</li>
                    <li>If the value of the screen dimensions is higher than that of <codeph>dimensions</codeph>, for example, 2000 x 1500, the SDK uses the maximum value under dimensions with the aspect ratio of the screen dimension (4:3) for encoding, that is, 1440 x 1080.</li>
                    </ul></p>
                </pd>
            </plentry>
            <plentry>
                <pt>frameRate</pt>
                <pd>On Windows and macOS, it represents the video encoding frame rate (fps) of the shared screen stream. The frame rate (fps) of the shared region. The default value is 5. We do not recommend setting this to a value greater than 15.</pd>
            </plentry>
            <plentry>
                <pt>bitrate</pt>
                <pd>On Windows and macOS, it represents the video encoding bitrate of the shared screen stream. The bitrate (Kbps) of the shared region. The default value is 0 (the SDK works out a bitrate according to the dimensions of the current screen).</pd>
            </plentry>
            <plentry props="cpp unity electron rn flutter">
                <pt>captureMouseCursor</pt>
                <pd>
                    <p>Whether to capture the mouse in screen sharing:<ul>
                    <li><codeph><ph keyref="true"/></codeph>: (Default) Capture the mouse.</li>
                    <li><codeph><ph keyref="false"/></codeph>: Do not capture the mouse.</li>
                    </ul></p>
                </pd>
            </plentry>
            <plentry props="cpp unity electron rn flutter">
                <pt>windowFocus</pt>
                <pd>
                    <p><xref keyref="startScreenCaptureByWindowId"/>Whether to bring the window to the front when calling the  method to share it:<ul>
                    <li><codeph><ph keyref="true"/></codeph>:Bring the window to the front.</li>
                    <li><codeph><ph keyref="false"/></codeph>: (Default) Do not bring the window to the front.</li>
                    </ul></p>
                </pd>
            </plentry>
            <plentry props="cpp unity electron rn flutter">
                <pt>excludeWindowList</pt>
                <pd>
                    <p>A list of IDs of windows to be blocked. When calling  <xref keyref="startScreenCaptureByScreenRect" />to start screen sharing, you can use this parameter to block a specified window. When calling  to<xref
                    keyref="updateScreenCaptureParameters" /> update screen sharing configurations, you can use this parameter to dynamically block the specified windows during screen sharing.</p>
                </pd>
            </plentry>
            <plentry props="cpp unity electron rn flutter">
                <pt>excludeWindowCount</pt>
                <pd>
                    <p>The number of windows to be blocked.</p>
                </pd>
            </plentry>
            </parml> </section>
    </refbody>
</reference>

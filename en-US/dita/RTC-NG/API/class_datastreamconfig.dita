<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="class_datastreamconfig">
    <title><ph keyref="DataStreamConfig" /></title>
    <shortdesc id="short"><ph id="shortdesc">The configurations for the data stream.</ph></shortdesc>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public class DataStreamConfig {
  public boolean syncWithAudio = false;
  public boolean ordered = false;
}</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">__attribute__((visibility("default"))) @interface AgoraDataStreamConfig: NSObject
@property (assign, nonatomic) BOOL ordered;
@property (assign, nonatomic) BOOL syncWithAudio;
@end</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">struct DataStreamConfig {
    bool syncWithAudio;
    bool ordered;
    };</codeblock>
         <codeblock props="bp" outputclass="language-cpp">USTRUCT(BlueprintType)
struct FDataStreamConfig
{
	GENERATED_BODY()

	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|DataStreamConfig&quot;)
	bool syncWithAudio;
	UPROPERTY(VisibleAnywhere, BlueprintReadWrite, Category = &quot;Agora|DataStreamConfig&quot;)
	bool ordered;
};</codeblock>
            <codeblock props="electron" outputclass="language-typescript">export class DataStreamConfig {
  
  syncWithAudio?: boolean;
  
  ordered?: boolean;
}</codeblock>
            <codeblock props="unity cs" outputclass="language-csharp">public class DataStreamConfig
    {
        public bool syncWithAudio;
        public bool ordered;
    }</codeblock>
            <codeblock props="rn" outputclass="language-typescript">export class DataStreamConfig {
  
  syncWithAudio?: boolean;
  
  ordered?: boolean;
}</codeblock>
            <codeblock props="flutter" outputclass="language-dart">class DataStreamConfig {
  const DataStreamConfig({this.syncWithAudio, this.ordered});

  @JsonKey(name: 'syncWithAudio')
  final bool? syncWithAudio;
  @JsonKey(name: 'ordered')
  final bool? ordered;
  factory DataStreamConfig.fromJson(Map&lt;String, dynamic&gt; json) =&gt;
      _$DataStreamConfigFromJson(json);
  Map&lt;String, dynamic&gt; toJson() =&gt; _$DataStreamConfigToJson(this);
}</codeblock>            
            <codeblock props="reserve" outputclass="language-cpp"></codeblock></p>
        </section>
        <section id="detailed_desc">
            <p>The following table shows the SDK behaviors under different parameter settings:</p>
            <table id="table_uxz_bjk_t4b">
            <tgroup cols="3">
                <colspec colnum="1" colname="col1" />
                <colspec colnum="2" colname="col2" />
                <colspec colnum="3" colname="col3" />
                <thead>
                    <row>
                        <entry><codeph>syncWithAudio</codeph></entry>
                        <entry><codeph>ordered</codeph></entry>
                        <entry>SDK behaviors</entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry><codeph><ph keyref="false" /></codeph></entry>
                        <entry><codeph><ph keyref="false" /></codeph></entry>
                        <entry>The SDK triggers the  callback immediately after the receiver receives a data packet<xref keyref="onStreamMessage" />.</entry>
                    </row>
                    <row>
                        <entry><codeph><ph keyref="true" /></codeph></entry>
                        <entry><codeph><ph keyref="false" /></codeph></entry>
                        <entry>If the data packet delay is within the audio delay, the SDK triggers the  callback when the synchronized audio packet is played out<ph keyref="onStreamMessage" />. If the data packet delay exceeds the audio delay, the SDK triggers the  callback as soon as the<ph keyref="onStreamMessage" /> data packet is received.</entry>
                    </row>
                    <row>
                        <entry><codeph><ph keyref="false" /></codeph></entry>
                        <entry><codeph><ph keyref="true" /></codeph></entry>
                        <entry>If the delay of a data packet is less than five seconds, the SDK corrects the order of the data packet. If the delay of a data packet exceeds five seconds, the SDK discards the data packet.</entry>
                    </row>
                    <row>
                        <entry><codeph><ph keyref="true" /></codeph></entry>
                        <entry><codeph><ph keyref="true" /></codeph></entry>
                        <entry>If the delay of the data packet is within the range of the audio delay, the SDK corrects the order of the data packet. If the delay of a data packet exceeds the audio delay, the SDK discards this data packet.</entry>
                    </row>
                </tbody>
            </tgroup>
            </table> </section>
        <section id="parameters">
            <title><text conref="../conref/conref_api_metadata.dita#conref_api_metadata/property" /></title>
            <parml>
            <plentry>
                <pt>syncWithAudio</pt>
                <pd>
                    <p>Whether to synchronize the data packet with the published audio packet.<ul>
                    <li>: Synchronize the data packet with the audio packet. <codeph><ph keyref="true" /></codeph>该设置适用于歌词同步等特殊场景。</li>
                    <li>: Do not synchronize the data packet with the audio packet. <codeph><ph keyref="false" /></codeph>该设置适用于需要数据包立刻到达接收端的场景。</li>
                    </ul>When you set the data packet to synchronize with the audio, then if the data packet delay is within the audio delay, the SDK triggers the   callback when the synchronized audio packet is played out<xref keyref="onStreamMessage" />.</p>
                </pd>
            </plentry>
            <plentry>
                <pt>ordered</pt>
                <pd>
                    <p>Whether the SDK guarantees that the receiver receives the data in the sent order.<ul>
                    <li>: Guarantee that the receiver receives the data in the sent order.<codeph><ph keyref="true" /></codeph></li>
                    <li>: Do not guarantee that the receiver receives the data in the sent order.<codeph><ph keyref="false" /></codeph></li>
                    </ul>Do not set this parameter as  if you need the receiver to receive the data packet immediately.<codeph><ph keyref="true" /></codeph></p>
                </pd>
            </plentry>
            </parml> </section>
    </refbody>
</reference>
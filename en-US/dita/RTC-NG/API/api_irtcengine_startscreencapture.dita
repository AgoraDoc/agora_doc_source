<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_irtcengine_startscreencapture">
    <title><ph keyref="startScreenCapture"/></title>
    <shortdesc id="short"><ph id="shortdesc">Starts screen sharing.</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="startScreenCapture"/>
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public abstract int startScreenCapture(ScreenCaptureParameters screenCaptureParameters);
</codeblock>
            <codeblock props="ios" outputclass="language-objectivec">- (int)startScreenCapture:(AgoraScreenCaptureParameters2* _Nonnull)parameters NS_SWIFT_NAME(startScreenCapture(_:));</codeblock>
            <codeblock props="cpp" outputclass="language-cpp"> virtual int startScreenCapture(const ScreenCaptureParameters2&amp; captureParams) = 0;
</codeblock>
            <codeblock props="electron" outputclass="language-typescript">abstract startScreenCapture(captureParams: ScreenCaptureParameters2): number;</codeblock>
            <codeblock props="unity" outputclass="language-csharp">public abstract int StartScreenCapture(ScreenCaptureParameters2 captureParams);</codeblock>
            <codeblock props="rn" outputclass="language-typescript">abstract startScreenCapture(captureParams: ScreenCaptureParameters2): number;</codeblock>
            <codeblock props="flutter" outputclass="language-dart">Future&lt;void&gt; startScreenCapture(ScreenCaptureParameters2 captureParams);</codeblock> </p>
        </section>
        <section id="detailed_desc">
            <p id="apisequence" props="android ios cpp unity flutter">There are two ways to start screen sharing, you can choose one according to the actual needs:<ul>
            <li>Call this method before joining a channel, and then call <xref keyref="joinChannel2"/> to join a channel and set <parmname>publishScreenCaptureVideo</parmname><ph props="unity"> or <parmname>publishSecondaryScreenTrack</parmname></ph> to <codeph><ph keyref="true"/></codeph> to start screen sharing.</li>
            <li>Call this method after joining a channel, and then call <xref keyref="updateChannelMediaOptions"/> and set <parmname>publishScreenCaptureVideo</parmname><ph props="unity"> or <parmname>publishSecondaryScreenTrack</parmname></ph> to <codeph><ph keyref="true"/></codeph> to start screen sharing.</li>
            </ul></p>
            <p props="ios">When the screen sharing extension process starts, ends, or quits unexpectedly, the SDK triggers the <xref keyref="onLocalVideoStateChanged"/> callback and reports following states:<ul>
            <li><apiname keyref="AgoraLocalVideoStreamErrorExtensionCaptureStarted"/>(13): The extension for the screen sharing process starts.</li>
            <li><apiname keyref="AgoraLocalVideoStreamErrorExtensionCaptureStoped"/>(14): The extension for the screen sharing process ends.</li>
            <li><apiname keyref="AgoraLocalVideoStreamErrorExtensionCaptureDisconnected"/>(15): The extension for the screen sharing process exits unexpectedly.</li>
            </ul></p>
            <note type="attention">
            <ul>
            <li props="cpp rn unity flutter">This method is for Android only.</li>
            <li props="ios">Screen sharing is only available for iOS 12 or later.</li>
            <li props="cpp ios unity">The billing for the screen sharing stream is based on the <parmname>dimensions</parmname> in <apiname keyref="ScreenVideoParameters"/>. When you do not pass in a value, Agora bills you at 1280 Ã— 720; when you pass a value in, Agora bills you at that value. See <xref keyref="guide-bill"/> for details.</li>
            <li props="ios">If you are using the custom audio source instead of the SDK to capture audio, Agora recommends you add the keep-alive processing logic to your application to avoid screen sharing stopping when the application goes to the background.</li>
            <li props="ios">This feature requires high-performance device , and Agora recommends that you use it on iPhone X and later models.</li>
            </ul> </note> </section>
        <section id="parameters">
            <title>Parameters</title>
            <parml>
            <plentry id="params">
                <pt props="ios">parameters</pt>
                <pt props="android">ScreenCaptureParameters</pt>
                <pt props="cpp rn unity electron flutter">captureParams</pt>
                <pd>The screen sharing encoding parameters. The default video dimension is 1920 x 1080, that is, 2,073,600 pixels. Agora uses the value of this parameter to calculate the charges.  <xref keyref="ScreenCaptureParameters2" props="android ios cpp rn unity electron flutter"/>See .</pd>
            </plentry>
            </parml> </section>
        <section id="return_values" props="cpp android ios electron unity rn">
            <title>Returns</title>
            <ul>
            <li>0: Success.</li>
            <li>&lt; 0: Failure.<ul>
                <li>-2: The parameter is null.</li>
                </ul></li>
            </ul> </section>
    </refbody>
</reference>

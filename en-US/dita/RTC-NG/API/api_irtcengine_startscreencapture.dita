<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_irtcengine_startscreencapture">
    <title><ph keyref="startScreenCapture"/></title>
    <shortdesc id="short"><ph id="shortdesc">Starts screen sharing.</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="startScreenCapture"/>
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public abstract int startScreenCapture(ScreenCaptureParameters screenCaptureParameters);
</codeblock>
            <codeblock props="ios" outputclass="language-objectivec">- (int)startScreenCapture:(AgoraScreenCaptureParameters2* _Nullable)parameters NS_SWIFT_NAME(startScreenCapture(_:));</codeblock>
            <codeblock props="cpp" outputclass="language-cpp">#if defined(__ANDROID__) || (defined(__APPLE__) &amp;&amp; TARGET_OS_IOS)
                virtual int startScreenCapture(const ScreenCaptureParameters2&amp; captureParams) = 0;
              #endif</codeblock>
            <codeblock props="electron" outputclass="language-typescript">abstract startScreenCapture(captureParams: ScreenCaptureParameters2): number;</codeblock>
            <codeblock props="unity" outputclass="language-csharp">public abstract int StartScreenCapture(ScreenCaptureParameters2 captureParams);</codeblock>
            <codeblock props="rn" outputclass="language-typescript">abstract startScreenCapture(captureParams: ScreenCaptureParameters2): number;</codeblock>
            <codeblock props="flutter" outputclass="language-dart">Future&lt;void&gt; startScreenCapture(ScreenCaptureParameters2 captureParams);</codeblock> </p>
        </section>
        <section id="detailed_desc">
            <p id="apisequence" props="android ios cpp unity flutter">There are two ways to start screen sharing, you can choose one according to the actual needs:<ul>
                <li>在加入频道前调用该方法，然后调用 <xref keyref="joinChannel2"/> 加入频道并设置 <parmname>publishScreenCaptureVideo</parmname> 为 <codeph><ph keyref="true"/></codeph>，即可开始屏幕共享。</li>
                <li>在加入频道后调用该方法，然后调用 <xref keyref="updateChannelMediaOptions"/> 设置 <parmname>publishScreenCaptureVideo</parmname> 为 <codeph><ph keyref="true"/></codeph>，即可开始屏幕共享。</li>
            </ul></p>
            <p props="ios">屏幕共享 Extension 进程状态发生改变时，SDK 会相应地触发 <xref keyref="onLocalVideoStateChanged"/> 回调，当 <parmname>sourceType</parmname> 的类型为 <apiname keyref="VIDEO_SOURCE_SCREEN"/> 时,<parmname>state</parmname> 参数表示屏幕共享的状态。</p>
            <note type="attention">
            <ul>
            <li props="cpp rn unity flutter">This method applies to Android and iOS only.</li>
            <li props="cpp rn unity flutter ios">On the iOS platform, screen sharing is only available on iOS 12.0 and above.</li>
            <li props="cpp ios unity">The billing for the screen sharing stream is based on<apiname keyref="ScreenVideoParameters"/> the <parmname>dimensions</parmname> in . When you do not pass in a value, Agora bills you at 1280 × 720; when you pass a value in, Agora bills you at that value. See <xref keyref="guide-bill"/>.</li>
            <li props="ios">If you are using the custom audio source instead of the SDK to capture audio, Agora recommends you add the keep-alive processing logic to your application to avoid screen sharing stopping when the application goes to the background.</li>
            <li props="ios">This feature requires high-performance device , and Agora recommends that you use it on iPhone X and later models.</li>
            <li props="ios">该方法依赖于 iOS 屏幕共享动态库 <codeph>AgoraReplayKitExtension.xcframework</codeph>，如果删除该动态库会导致无法正常开启屏幕共享。</li>
            </ul></note> </section>
        <section id="parameters">
            <title>Parameter</title>
            <parml>
            <plentry id="params">
                <pt props="ios">parameters</pt>
                <pt props="android">ScreenCaptureParameters</pt>
                <pt props="cpp rn unity electron flutter">captureParams</pt>
                <pd>The screen sharing encoding parameters. The default video dimension is 1920 x 1080, that is, 2,073,600 pixels. Agora uses the value of this parameter to calculate the charges. See <xref keyref="ScreenCaptureParameters2" props="android ios cpp rn unity electron flutter"/>.</pd>
            </plentry>
            </parml> </section>
        <section id="return_values" props="cpp android ios electron unity rn">
            <title>Returns</title>
            <ul>
            <li>0: Success.</li>
            <li>&lt; 0: Failure.<ul>
                <li>-2: The parameter is null.</li>
                </ul></li>
            </ul> </section>
    </refbody>
</reference>

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_irtcengine_leavechannel2">
    <title><ph keyref="leaveChannel2"/></title>
    <shortdesc id="short"><ph id="shortdesc">Leaves a channel.</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="leaveChannel2"/>
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public abstract int leaveChannel(LeaveChannelOptions options);</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">- (int)leaveChannel:(AgoraLeaveChannelOptions * _Nonnull)options
  leaveChannelBlock:(void (^ _Nullable)(AgoraChannelStats * _Nonnull))leaveChannelBlock;</codeblock>
            <codeblock props="cpp" outputclass="language-cpp">virtual int leaveChannel(const LeaveChannelOptions&amp; options) = 0;</codeblock>
            <codeblock props="electron" outputclass="language-typescript">abstract leaveChannel(options?: LeaveChannelOptions): number;</codeblock>
            <codeblock props="unity" outputclass="language-csharp">public abstract int LeaveChannel(LeaveChannelOptions options); </codeblock>
            <codeblock props="rn" outputclass="language-typescript">abstract leaveChannel(options?: LeaveChannelOptions): number;</codeblock>
            <codeblock props="flutter" outputclass="language-dart">Future&lt;void&gt; leaveChannel({LeaveChannelOptions? options});</codeblock>
            <codeblock props="unreal" outputclass="language-cpp"/></p>
        </section>
        <section id="detailed_desc">
            <p>该方法会把会话相关的所有资源释放掉，离开频道，即挂断或退出通话。 不管当前是否在通话中均可以调用该方法。</p>
            <p>After joining the channel, you must call this method or  to end the call, otherwise, the next call cannot be started.</p>
            <p props="native unity electron flutter">This method call is asynchronous. When this method returns, it does not necessarily mean that the user has left the channel. A successful call of this method triggers the following<apiname keyref="onLeaveChannel"/> callbacks: The local client: .The remote client: , if the user joining the channel is in the COMMUNICATION profile, or is a host in the LIVE_BROADCASTING<xref keyref="onUserOffline"/> profile.</p>
            <p props="rn">Calling this method does not necessarily mean that the user has left the channel. A successful call of this method triggers the following<apiname keyref="onLeaveChannel"/> callbacks: The local client: .The remote client: , if the user joining the channel is in the COMMUNICATION profile, or is a host in the LIVE_BROADCASTING<xref keyref="onUserOffline"/> profile.</p>
            <note conkeyref="leaveChannel/note" props="native flutter unity electron rn"/> </section>
        <section id="parameters">
            <title>Parameters</title>
            <parml id="parml_jsr_dky_hqb">
            <plentry id="options">
                <pt>options</pt>
                <pd>The options for leaving the channel. See <xref keyref="LeaveChannelOptions"/>.</pd>
            </plentry>
            <plentry props="ios mac" id="leavechannelblock">
                <pt>leaveChannelBlock</pt>
                <pd>
                    <p>This callback indicates that a user leaves a channel, and provides the statistics of the call in <xref keyref="RtcStats"/>.</p>
                </pd>
            </plentry>
            </parml> </section>
        <section id="return_values" props="native electron unity rn">
            <title>Returns</title>
            <ul>
            <li>0: Success.</li>
            <li>&lt; 0: Failure.</li>
            </ul> </section>
    </refbody>
</reference>

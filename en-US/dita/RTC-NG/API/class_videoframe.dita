<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="class_videoframe">
    <title><ph keyref="VideoFrame" /></title>
    <shortdesc id="short"><ph id="shortdesc">Configurations of the video frame</ph></shortdesc>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public class VideoFrame implements RefCounted {
    public interface Buffer extends RefCounted {
        @CalledByNative("Buffer") int getWidth();

        @CalledByNative("Buffer") int getHeight();

        @CalledByNative("Buffer") I420Buffer toI420();

        @Override @CalledByNative("Buffer") void retain();

        @Override @CalledByNative("Buffer") void release();

        @CalledByNative("Buffer")
    Buffer cropAndScale(
        int cropX, int cropY, int cropWidth, int cropHeight, int scaleWidth, int scaleHeight);

        @CalledByNative("Buffer") @Nullable Buffer mirror(int frameRotation);

        @CalledByNative("Buffer") @Nullable Buffer rotate(int frameRotation);
        @CalledByNative("Buffer")
    @Nullable
    Buffer transform(int cropX, int cropY, int cropWidth, int cropHeight, int scaleWidth,
        int scaleHeight, int frameRotation);
  }

    public interface I420Buffer extends Buffer {
        @CalledByNative("I420Buffer") ByteBuffer getDataY();
        @CalledByNative("I420Buffer") ByteBuffer getDataU();
        @CalledByNative("I420Buffer") ByteBuffer getDataV();

    @CalledByNative("I420Buffer") int getStrideY();
    @CalledByNative("I420Buffer") int getStrideU();
    @CalledByNative("I420Buffer") int getStrideV();
  }

    public interface I422Buffer extends Buffer {
    @CalledByNative("I422Buffer") ByteBuffer getDataY();
    @CalledByNative("I422Buffer") ByteBuffer getDataU();
    @CalledByNative("I422Buffer") ByteBuffer getDataV();

    @CalledByNative("I422Buffer") int getStrideY();
    @CalledByNative("I422Buffer") int getStrideU();
    @CalledByNative("I422Buffer") int getStrideV();
  }
  public interface RgbaBuffer extends Buffer {
    @CalledByNative("RgbaBuffer") ByteBuffer getData();
  }
    public interface TextureBuffer extends Buffer {
        enum Type {
            OES(GLES11Ext.GL_TEXTURE_EXTERNAL_OES),
            RGB(GLES20.GL_TEXTURE_2D);

      private final int glTarget;

      private Type(final int glTarget) {
        this.glTarget = glTarget;
      }

      public int getGlTarget() {
        return glTarget;
      }
    }

    enum ContextType {
      EGL_CONTEXT_10,
      EGL_CONTEXT_14;
    }

    Type getType();

        @CalledByNative("TextureBuffer") int getTextureId();

        Matrix getTransformMatrix();

        EglBase.Context getEglBaseContext();

    @CalledByNative("TextureBuffer") long getNativeEglContext();

    @CalledByNative("TextureBuffer") int getEglContextType();

    @CalledByNative("TextureBuffer") float[] getTransformMatrixArray();

        @CalledByNative("TextureBuffer") int getSequence();
  }

  public interface ColorSpace {
    enum Range {
      Invalid(0),
      Limited(1),
      Full(2),
      Derived(3);
      private final int range;
      private Range(int range) {
        this.range = range;
      }
      public int getRange() {
        return range;
      };
    }

    enum Matrix {
      RGB(0),
      BT709(1),
      Unspecified(2),
      FCC(4),
      BT470BG(5),
      SMPTE170M(6),
      SMPTE240M(7),
      YCOCG(8),
      BT2020_NCL(9),
      BT2020_CL(10),
      SMPTE2085(11),
      CDNCLS(12),
      CDCLS(13),
      BT2100_ICTCP(14);
      private final int matrix;
      private Matrix(int matrix) {
        this.matrix = matrix;
      }
      public int getMatrix() {
        return matrix;
      };
    }

    enum Transfer {
      BT709(1),
      Unspecified(2),
      GAMMA22(4),
      GAMMA28(5),
      SMPTE170M(6),
      SMPTE240M(7),
      LINEAR(8),
      LOG(9),
      LOG_SQRT(10),
      IEC61966_2_4(11),
      BT1361_ECG(12),
      IEC61966_2_1(13),
      BT2020_10(14),
      BT2020_12(15),
      SMPTEST2084(16),
      SMPTEST428(17),
      ARIB_STD_B67(18);
      private final int transfer;
      private Transfer(int transfer) {
        this.transfer = transfer;
      }
      public int getTransfer() {
        return transfer;
      }
    }

    enum Primary {
      BT709(1),
      Unspecified(2),
      BT470M(4),
      BT470BG(5),
      kSMPTE170M(6),   private Buffer buffer;

    private int rotation;

    private long timestampNs;
  private ColorSpace colorSpace;

  private float sampleAspectRatio;

  private VideoFrameMetaInfo metaInfo = new VideoFrameMetaInfo();

    private byte[] alphaBuffer;

    public VideoFrame(Buffer buffer, int rotation, long timestampNs) {
    this(buffer, rotation, timestampNs, null, null, 1.0f);
  }

  @CalledByNative
  public VideoFrame(Buffer buffer, int rotation, long timestampNs, ColorSpace colorSpace,
      byte[] alphaBuffer, float sampleAspectRatio) {
    if (buffer == null) {
      throw new IllegalArgumentException("buffer not allowed to be null");
    }
    if (rotation % 90 != 0) {
      throw new IllegalArgumentException("rotation must be a multiple of 90");
    }
    this.buffer = buffer;
    this.rotation = rotation;
    this.timestampNs = timestampNs;
    this.colorSpace = colorSpace;
    this.alphaBuffer = alphaBuffer;
    this.sampleAspectRatio = sampleAspectRatio;
  }

  public float getSampleAspectRatio() {
    return sampleAspectRatio;
  }

    @CalledByNative
  public Buffer getBuffer() {
    return buffer;
  }

    @CalledByNative
  public int getRotation() {
    return rotation;
  }

    @CalledByNative
  public long getTimestampNs() {
    return timestampNs;
  }

  @CalledByNative
  public VideoFrameMetaInfo getMetaInfo() {
    return metaInfo;
  }

    public int getRotatedWidth() {
    if (rotation % 180 == 0) {
      return buffer.getWidth();
    }
    return buffer.getHeight();
  }

    public int getRotatedHeight() {
    if (rotation % 180 == 0) {
      return buffer.getHeight();
    }
    return buffer.getWidth();
  }

    public void replaceBuffer(Buffer buffer, int rotation, long timestampNs) {
    release();
    this.buffer = buffer;
    this.rotation = rotation;
    this.timestampNs = timestampNs;
  }

  public ColorSpace getColorSpace() {
    return colorSpace;
  }

  public byte[] getAlphaBuffer() {
    return alphaBuffer;
  }

    @Override
  public void retain() {
    buffer.retain();
  }

    @Override
  @CalledByNative
  public void release() {
    buffer.release();
  }
}
</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">__attribute__((visibility("default"))) @interface AgoraOutputVideoFrame : NSObject
@property (nonatomic, assign) NSInteger type;
@property (nonatomic, assign) int width;
@property (nonatomic, assign) int height;
@property (nonatomic, assign) int yStride;
@property (nonatomic, assign) int uStride;
@property (nonatomic, assign) int vStride;
@property (nonatomic, assign) uint8_t* _Nullable yBuffer;
@property (nonatomic, assign) uint8_t* _Nullable uBuffer;
@property (nonatomic, assign) uint8_t* _Nullable vBuffer;
@property (nonatomic, assign) int rotation;
@property (nonatomic, assign) int64_t renderTimeMs;
@property (nonatomic, assign) int avSyncType;
@property(assign, nonatomic) CVPixelBufferRef _Nullable pixelBuffer;

@end</codeblock>
            <codeblock props="cpp" outputclass="language-cpp">struct VideoFrame {
  VideoFrame():
  type(VIDEO_PIXEL_DEFAULT),
  width(0),
  height(0),
  yStride(0),
  uStride(0),
  vStride(0),
  yBuffer(NULL),
  uBuffer(NULL),
  vBuffer(NULL),
  rotation(0),
  renderTimeMs(0),
  avsync_type(0),
  metadata_buffer(NULL),
  metadata_size(0),
  sharedContext(0),
  textureId(0),
  alphaBuffer(NULL){}
</codeblock>
            <codeblock props="electron" outputclass="language-typescript">export class VideoFrame {
  
  type?: VideoPixelFormat;
  
  width?: number;
  
  height?: number;
  
  yStride?: number;
  
  uStride?: number;
  
  vStride?: number;
  
  yBuffer?: Uint8Array;
  
  uBuffer?: Uint8Array;
  
  vBuffer?: Uint8Array;
  
  rotation?: number;
  
  renderTimeMs?: number;
  
  avsync_type?: number;
  
  metadata_buffer?: Uint8Array;
  
  metadata_size?: number;
  
  textureId?: number;
  
  matrix?: number[];
  
  alphaBuffer?: Uint8Array;
}</codeblock>
            <codeblock props="unity" outputclass="language-csharp">public class VideoFrame
    {
        public VideoFrame()
        {
            type = VIDEO_PIXEL_FORMAT.VIDEO_PIXEL_DEFAULT;
            width = 0;
            height = 0;
            yStride = 0;
            uStride = 0;
            vStride = 0;
            yBuffer = new byte[0];
            uBuffer = new byte[0];
            vBuffer = new byte[0];
            yBufferPtr = IntPtr.Zero;
            uBufferPtr = IntPtr.Zero;
            vBufferPtr = IntPtr.Zero;
            rotation = 0;
            renderTimeMs = 0;
            avsync_type = 0;
            metadata_buffer = IntPtr.Zero;
            metadata_size = 0;
            sharedContext = IntPtr.Zero;
            textureId = 0;
            matrix = new float[16];
        }

        public VIDEO_PIXEL_FORMAT type;

        public int width;

        public int height;

        public int yStride;

        public int uStride;

        public int vStride;

        public byte[] yBuffer;

        public IntPtr yBufferPtr;

        public byte[] uBuffer;

        public IntPtr uBufferPtr;

        public byte[] vBuffer;

        public IntPtr vBufferPtr;

        public int rotation;

        public long renderTimeMs;

        public int avsync_type;

        public IntPtr metadata_buffer;

        public int metadata_size;

        public IntPtr sharedContext;

        public int textureId;

        public float[] matrix;

        public byte[] alphaBuffer;

        public IntPtr alphaBufferPtr;
    };</codeblock>
            <codeblock props="rn" outputclass="language-typescript">export class VideoFrame {
  
  type?: VideoPixelFormat;
  
  width?: number;
  
  height?: number;
  
  yStride?: number;
  
  uStride?: number;
  
  vStride?: number;
  
  yBuffer?: Uint8Array;
  
  uBuffer?: Uint8Array;
  
  vBuffer?: Uint8Array;
  
  rotation?: number;
  
  renderTimeMs?: number;
  
  avsync_type?: number;
  
  metadata_buffer?: Uint8Array;
  
  metadata_size?: number;
  
  textureId?: number;
  
  matrix?: number[];
  
  alphaBuffer?: Uint8Array;
}</codeblock>
            <codeblock props="flutter" outputclass="language-dart">class VideoFrame {
  const VideoFrame(
      {this.type,
      this.width,
      this.height,
      this.yStride,
      this.uStride,
      this.vStride,
      this.yBuffer,
      this.uBuffer,
      this.vBuffer,
      this.rotation,
      this.renderTimeMs,
      this.avsyncType,
      this.metadataBuffer,
      this.metadataSize,
      this.textureId,
      this.matrix,
      this.alphaBuffer});

  @JsonKey(name: 'type')
  final VideoPixelFormat? type;

  @JsonKey(name: 'width')
  final int? width;

  @JsonKey(name: 'height')
  final int? height;

  @JsonKey(name: 'yStride')
  final int? yStride;

  @JsonKey(name: 'uStride')
  final int? uStride;

  @JsonKey(name: 'vStride')
  final int? vStride;

  @JsonKey(name: 'yBuffer', ignore: true)
  final Uint8List? yBuffer;

  @JsonKey(name: 'uBuffer', ignore: true)
  final Uint8List? uBuffer;

  @JsonKey(name: 'vBuffer', ignore: true)
  final Uint8List? vBuffer;

  @JsonKey(name: 'rotation')
  final int? rotation;

  @JsonKey(name: 'renderTimeMs')
  final int? renderTimeMs;

  @JsonKey(name: 'avsync_type')
  final int? avsyncType;

  @JsonKey(name: 'metadata_buffer', ignore: true)
  final Uint8List? metadataBuffer;

  @JsonKey(name: 'metadata_size')
  final int? metadataSize;

  @JsonKey(name: 'textureId')
  final int? textureId;

  @JsonKey(name: 'matrix')
  final List&lt;double&gt;? matrix;

  @JsonKey(name: 'alphaBuffer', ignore: true)
  final Uint8List? alphaBuffer;

  factory VideoFrame.fromJson(Map&lt;String, dynamic&gt; json) =&gt;
      _$VideoFrameFromJson(json);

  Map&lt;String, dynamic&gt; toJson() =&gt; _$VideoFrameToJson(this);
}</codeblock> </p>
        </section>
        <section id="detailed_desc">
            <p>The video data format is YUV420. Note that the buffer provides a pointer to a pointer. This interface cannot modify the pointer of the buffer but can modify the content of the buffer.</p>
        </section>
        <section id="parameters">
            <title><text conref="../conref/conref_api_metadata.dita#conref_api_metadata/property" /></title>
            <parml>
            <plentry props="apple cpp unity">
                <pt>type</pt>
                <pd props="cpp unity" conkeyref="ExternalVideoFrame/windows-format" />
                <pd props="ios mac" conkeyref="ExternalVideoFrame/oc-format" />
            </plentry>
            <plentry props="apple cpp unity">
                <pt>width</pt>
                <pd>The width of the video in pixels.</pd>
            </plentry>
            <plentry props="apple cpp unity">
                <pt>height</pt>
                <pd>The height of the video in pixels.</pd>
            </plentry>
            <plentry props="apple cpp unity">
                <pt>yStride</pt>
                <pd>For YUV data, the line span of the Y buffer; for RGBA data, the total data length.</pd>
            </plentry>
            <plentry props="apple cpp unity">
                <pt>uStride</pt>
                <pd>For YUV data, the line span of the U buffer; for RGBA data, the value is 0.</pd>
            </plentry>
            <plentry props="apple cpp unity">
                <pt>vStride</pt>
                <pd>For YUV data, the line span of the V buffer; for RGBA data, the value is 0.</pd>
            </plentry>
            <plentry props="apple cpp unity">
                <pt>yBuffer</pt>
                <pd>For YUV data, the pointer to the Y buffer; for RGBA data, the data buffer.</pd>
            </plentry>
            <plentry props="apple cpp unity">
                <pt>uBuffer</pt>
                <pd>For YUV data, the pointer to the U buffer; for RGBA data, the value is 0.</pd>
            </plentry>
            <plentry props="apple cpp unity">
                <pt>vBuffer</pt>
                <pd>For YUV data, the pointer to the V buffer; for RGBA data, the value is 0.</pd>
            </plentry>
            <plentry props="android">
                <pt>I420Buffer</pt>
                <pd>I420 视频帧的缓冲区，包括 Y、U、V 平面的数据。</pd>
            </plentry>
            <plentry props="android">
                <pt>I422Buffer</pt>
                <pd>I422 视频帧的缓冲区，包括 Y、U、V 平面的数据。</pd>
            </plentry>
            <plentry props="android">
                <pt>TextureBuffer</pt>
                <pd>Texture 视频帧的缓冲区，可以为 OES 或 RGB 格式。 .</pd>
            </plentry>
            <plentry props="android">
                <pt>colorSpace</pt>
                <pd>表示视频帧的色彩空间。 See  for details<xref keyref="videocolorspace-link" />.</pd>
            </plentry>
            <plentry props="android">
                <pt>buffer</pt>
                <pd>缓冲区的数据。
                    <note type="caution">该参数不可为空，否则会发生异常。</note></pd>
            </plentry>
            <plentry>
                <pt>rotation</pt>
                <pd>Sets the clockwise rotation of the video frame before rendering. Supported values include 0, 90, 180, and 270 degrees.</pd>
            </plentry>
            <plentry props="apple cpp unity">
                <pt>renderTimeMs</pt>
                <pd>The Unix timestamp (ms) when the video frame is rendered. This timestamp can be used to guide the rendering of the video frame. It is required.</pd>
            </plentry>
            <plentry props="android">
                <pt>timestampNs</pt>
                <pd>视频帧的时间戳（纳秒）。</pd>
            </plentry>
            <plentry props="apple cpp unity">
                <pt>avsync_type</pt>
                <pd>A reserved parameter.</pd>
            </plentry>
            <plentry>
                <pt>metadata_buffer</pt>
                <pd>This parameter only applies to video data in Texture format. The MetaData buffer. The default value is <codeph>NULL</codeph>.</pd>
            </plentry>
            <plentry>
                <pt>metadata_size</pt>
                <pd>This parameter only applies to video data in Texture format. The MetaData size. The default value is <codeph>0</codeph>.</pd>
            </plentry>
            <plentry>
                <pt>sharedContext</pt>
                <pd />
            </plentry>
            <plentry>
                <pt>textureId</pt>
                <pd>This parameter only applies to video data in Texture format. Incoming 4 x 4 transformational matrix. The typical value is a unit matrix.</pd>
            </plentry>
            <plentry>
                <pt>matrix</pt>
                <pd />
            </plentry>
            <plentry props="ios mac">
                <pt>pixelBuffer</pt>
                <pd>Fills the data to CVPixelBuffer.</pd>
            </plentry>
            <plentry>
                <pt>alphaBuffer</pt>
                <pd>
                    <p>Indicates the output data of the portrait segmentation algorithm, which is consistent with the size of the video frame. The value range of each pixel is [0,255], where 0 represents the background; 255 represents the foreground (portrait).</p>
                    <p>In the costom video renderer scenario, you can use this parameter to render the video background into various effects, such as: transparent, solid color, picture, video and so on.<note>You can  to activate this parameter<xref keyref="ticket-link" />.</note></p>
                </pd>
            </plentry>
            <plentry props="android">
                <pt>sourceType</pt>
                <pd />
            </plentry>
            <plentry props="android">
                <pt>sampleAspectRatio</pt>
                <pd />
            </plentry>
            <plentry props="android">
                <pt>metaInfo</pt>
                <pd />
            </plentry>
        </parml></section>
    </refbody>
</reference>
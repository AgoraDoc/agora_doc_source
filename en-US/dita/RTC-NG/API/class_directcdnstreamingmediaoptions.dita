<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="class_directcdnstreamingmediaoptions">
    <title><ph keyref="DirectCdnStreamingMediaOptions"/></title>
    <shortdesc id="short">The media setting options for the host.<ph id="shortdesc"></ph></shortdesc>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public class DirectCdnStreamingMediaOptions {
  public Boolean publishCameraTrack;
  public Boolean publishMicrophoneTrack;
  public Boolean publishCustomAudioTrack;
  public Boolean publishCustomVideoTrack;

  public DirectCdnStreamingMediaOptions() {
    publishCameraTrack = false;
    publishMicrophoneTrack = false;
    publishCustomAudioTrack = false;
    publishCustomVideoTrack = false;
  }
}</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">__attribute__((visibility("default"))) @interface AgoraDirectCdnStreamingMediaOptions : NSObject
@property(strong, nonatomic) AgoraRtcBoolOptional* _Nullable publishCameraTrack;
@property(strong, nonatomic) AgoraRtcBoolOptional* _Nullable publishCustomAudioTrack;
@property(strong, nonatomic) AgoraRtcBoolOptional* _Nullable publishCustomVideoTrack;
@property(strong, nonatomic) AgoraRtcBoolOptional* _Nullable publishMicrophoneTrack;
@end</codeblock>
            <codeblock props="cpp" outputclass="language-cpp">struct DirectCdnStreamingMediaOptions {
  Optional&lt;bool&gt; publishCameraTrack;
  Optional&lt;bool&gt; publishMicrophoneTrack;
  Optional&lt;bool&gt; publishCustomAudioTrack;
  Optional&lt;bool&gt; publishCustomVideoTrack;
};</codeblock>
            <codeblock props="electron" outputclass="language-typescript">export class DirectCdnStreamingMediaOptions {
  publishCameraTrack?: boolean
  publishMicrophoneTrack?: boolean
  publishCustomAudioTrack?: boolean
  publishCustomVideoTrack?: boolean
  publishMediaPlayerAudioTrack?: boolean
  publishMediaPlayerId?: number
}</codeblock>
            <codeblock props="unity" outputclass="language-csharp">public class DirectCdnStreamingMediaOptions : OptionalJsonParse
    {
        public Optional&lt;bool&gt; publishCameraTrack = new Optional&lt;bool&gt;();
        public Optional&lt;bool&gt; publishMicrophoneTrack = new Optional&lt;bool&gt;();
        public Optional&lt;bool&gt; publishCustomAudioTrack = new Optional&lt;bool&gt;();
        public Optional&lt;bool&gt; publishCustomVideoTrack = new Optional&lt;bool&gt;();
    }</codeblock>
            <codeblock props="rn" outputclass="language-typescript">export class DirectCdnStreamingMediaOptions {
  publishCameraTrack?: boolean;
  publishMicrophoneTrack?: boolean;
  publishCustomAudioTrack?: boolean;
  publishCustomVideoTrack?: boolean;
  publishMediaPlayerAudioTrack?: boolean;
  publishMediaPlayerId?: number;
}</codeblock>
            <codeblock props="flutter" outputclass="language-dart">class DirectCdnStreamingMediaOptions {
  const DirectCdnStreamingMediaOptions(
      {this.publishCameraTrack,
      this.publishMicrophoneTrack,
      this.publishCustomAudioTrack,
      this.publishCustomVideoTrack,
      this.publishMediaPlayerAudioTrack,
      this.publishMediaPlayerId});

  @JsonKey(name: 'publishCameraTrack')
  final bool? publishCameraTrack;
  @JsonKey(name: 'publishMicrophoneTrack')
  final bool? publishMicrophoneTrack;
  @JsonKey(name: 'publishCustomAudioTrack')
  final bool? publishCustomAudioTrack;
  @JsonKey(name: 'publishCustomVideoTrack')
  final bool? publishCustomVideoTrack;
  @JsonKey(name: 'publishMediaPlayerAudioTrack')
  final bool? publishMediaPlayerAudioTrack;
  @JsonKey(name: 'publishMediaPlayerId')
  final int? publishMediaPlayerId;
  factory DirectCdnStreamingMediaOptions.fromJson(Map&lt;String, dynamic> json) =>
      _$DirectCdnStreamingMediaOptionsFromJson(json);
  Map&lt;String, dynamic> toJson() => _$DirectCdnStreamingMediaOptionsToJson(this);
}</codeblock>
            </p>
        </section>
        <section id="parameters">
            <title><text
            conref="../conref/conref_api_metadata.dita#conref_api_metadata/property"
            /></title>
            <parml>
            <plentry>
                <pt>publishCameraTrack</pt>
                <pd>Set whether to publish the video captured by the camera.<ul>
                    <li><codeph><ph keyref="true"/></codeph>: Publish the video captured by the camera.</li>
                    <li><codeph><ph keyref="false"
                        /></codeph>: (default) Do not publish video captured by the camera.</li>
                    </ul></pd>
            </plentry>
            <plentry>
                <pt>publishMicrophoneTrack is set as </pt>
                <pd>Set whether to publish the audio captured by the microphone.<ul>
                    <li><codeph><ph keyref="true"/></codeph>: Publish the audio captured by the microphone.</li>
                    <li><codeph><ph keyref="false"
                        /></codeph>: (default) Do not publish audio captured by the microphone.</li>
                    </ul></pd>
            </plentry>
            <plentry>
                <pt>publishCustomAudioTrack</pt>
                <pd>Set whether to publish custom captured audio.<ul>
                    <li><codeph><ph keyref="true"/></codeph>: Publish custom captured audio.</li>
                    <li><codeph><ph keyref="false"
                        /></codeph>: (default) Do not publish custom captured audio.</li>
                    </ul></pd>
            </plentry>
            <plentry props="hide">
                <pt>publishMediaPlayerAudioTrack</pt>
                <pd>Set whether to publish the audio of the media player.<ul>
                    <li><codeph><ph keyref="true"/></codeph>: Publish the audio of the media player.</li>
                    <li><codeph><ph keyref="false"
                        /></codeph>: (default) Do not publish audio from the media player.</li>
                    </ul></pd>
            </plentry>
            <plentry>
                <pt>publishCustomVideoTrack</pt>
                <pd>Set whether to publish custom captured videos.<ul>
                    <li><codeph><ph keyref="true"/></codeph>: Publish custom captured videos.</li>
                    <li><codeph><ph keyref="false"
                        /></codeph>: (default) Do not publish custom captured videos.</li>
                    </ul></pd>
            </plentry>
            <plentry props="hide">
                <pt>publishMediaPlayerId</pt>
                <pd>The ID of the media player to be published. The default value is 0.</pd>
            </plentry>
            </parml> </section>
    </refbody>
</reference>

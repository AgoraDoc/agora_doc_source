<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="api_Imediaplayer_selectmultiaudiotrack">
    <title><ph keyref="selectMultiAudioTrack"/></title>
    <shortdesc id="short"><ph id="shortdesc">选择本地播放和发送至远端的音轨。</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="selectMultiAudioTrack"/>
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">int selectMultiAudioTrack(int playoutTrackIndex, int publishTrackIndex);</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">- (int)selectMultiAudioTrack:(NSInteger)playoutTrackIndex publishTrackIndex:(NSInteger)publishTrackIndex NS_SWIFT_NAME(selectMultiAudioTrack(_:publishTrackIndex:));</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">virtual int selectMultiAudioTrack(int playoutTrackIndex, int publishTrackIndex) = 0;</codeblock>
            <codeblock props="bp" outputclass="language-cpp"/>
            <codeblock props="electron" outputclass="language-typescript"/>
            <codeblock props="unity cs" outputclass="language-csharp"/>
            <codeblock props="rn" outputclass="language-typescript"/>
            <codeblock props="flutter" outputclass="language-dart">Future&lt;void> selectMultiAudioTrack(
    {required int playoutTrackIndex, required int publishTrackIndex});</codeblock> </p>
        </section>
        <section id="detailed_desc">
            <title>Details</title>
            <dl outputclass="since">
            <dlentry props="native">
                <dt>Since</dt>
                <dd>v4.3.0</dd>
            </dlentry>
            </dl>
            <p>你可以调用该方法分别设置本地播放和发送到远端的音轨。</p>
            <p>在调用该方法前，你需要通过 <xref keyref="openWithMediaSource"/> 来打开媒体文件，并通过 <xref keyref="MediaSource"/> 将 <parmname>enableMultiAudioTrack</parmname> 设为 <codeph><ph keyref="true"/></codeph>。</p>
        </section>
        <section id="scenario">
            <title>Applicable scenarios</title>
            <p>在 K 歌场景下，主播可以根据需求选择在本地播放一路音轨（如原声），然后发送另一路音轨至远端（如伴唱）以提升听众体验。</p>
        </section>
        <section id="parameters">
            <title>Parameters</title>
            <parml>
            <plentry>
                <pt>playoutTrackIndex</pt>
                <pd>用于本地播放的音轨索引。 你可以通过 <xref keyref="getStreamInfo"/> 来获取索引值。</pd>
            </plentry>
                <plentry>
                    <pt>publishTrackIndex</pt>
                    <pd>用于发送至远端的音轨索引。 你可以通过 <xref keyref="getStreamInfo"/> 来获取索引值。</pd>
                </plentry>
            </parml> </section>
        <section id="return_values">
            <title><ph keyref="return-section-title"/></title>
            <p props="flutter">When the method call succeeds, there is no return value; when fails, the <xref keyref="AgoraRtcException"/> exception is thrown; and you need to catch the exception and handle it accordingly.</p>
            <ul>
                <li props="native electron unity rn">0: Success.</li>
                <li>&lt; 0: Failure.</li>
                </ul> </section>
        </refbody>
</reference>

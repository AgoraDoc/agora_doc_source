<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="class_screencaptureconfiguration">
    <title><ph keyref="ScreenCaptureConfiguration" /></title>
    <shortdesc id="short"><ph id="shortdesc">The configuration of the captured screen.</ph></shortdesc>
    <refbody>
        <section id="prototype">
      <p outputclass="codeblock">
      <codeblock props="android" outputclass="language-java">public class CameraCapturerConfiguration {
    public enum CAMERA_DIRECTION {
        CAMERA_REAR(0),
        CAMERA_FRONT(1);

    private int value;

    private CAMERA_DIRECTION(int v) {
      value = v;
    }

    public int getValue() {
      return this.value;
    }
  }

    public CAMERA_DIRECTION cameraDirection;

  static public class CaptureFormat {
        public int width;
        public int height;
        public int fps;

    public CaptureFormat(int width, int height, int fps) {
      this.width = width;
      this.height = height;
      this.fps = fps;
    }

    public CaptureFormat() {
      this.width = 640;
      this.height = 480;
      this.fps = 15;
    }

    @CalledByNative("CaptureFormat")
    public int getHeight() {
      return height;
    }

    @CalledByNative("CaptureFormat")
    public int getWidth() {
      return width;
    }

    @CalledByNative("CaptureFormat")
    public int getFps() {
      return fps;
    }

    @Override
    public String toString() {
      return "CaptureFormat{"
          + "width=" + width + ", height=" + height + ", fps=" + fps + '}';
    }
  }

  public CaptureFormat captureFormat;

    public boolean followEncodeDimensionRatio;

    public CameraCapturerConfiguration(CAMERA_DIRECTION cameraDirection) {
    this.cameraDirection = cameraDirection;
    this.captureFormat = new CaptureFormat();
    this.followEncodeDimensionRatio = true;
  }

    public CameraCapturerConfiguration(CaptureFormat captureFormat) {
    this.captureFormat = captureFormat;
    this.cameraDirection = CAMERA_DIRECTION.CAMERA_FRONT;
    this.followEncodeDimensionRatio = true;
  }

    public CameraCapturerConfiguration(
      CAMERA_DIRECTION cameraDirection, CaptureFormat captureFormat) {
    this.cameraDirection = cameraDirection;
    this.captureFormat = captureFormat;
    this.followEncodeDimensionRatio = true;
  }

  @CalledByNative
  public int getCameraDirection() {
    return cameraDirection.value;
  }

  @CalledByNative
  public CaptureFormat getCaptureFormat() {
    return captureFormat;
  }

  @CalledByNative
  public boolean isFollowEncodeDimensionRatio() {
    return followEncodeDimensionRatio;
  }

  @Override
  public String toString() {
    return "CameraCapturerConfiguration{"
        + "cameraDirection=" + cameraDirection + ", captureDimensions=" + captureFormat
        + ", followEncodeDimensionRatio=" + followEncodeDimensionRatio + '}';
  }
}</codeblock>
      <codeblock props="ios mac" outputclass="language-objectivec">__attribute__((visibility("default"))) @interface AgoraCameraCapturerConfiguration: NSObject
#if TARGET_OS_IOS
@property (assign, nonatomic) AgoraCameraDirection cameraDirection;
#endif
#elif TARGET_OS_MAC
@property (copy, nonatomic) NSString * _Nullable deviceId;
@property(assign, nonatomic) CGSize dimensions;
@property(assign, nonatomic) int frameRate;
@property(assign, nonatomic) BOOL followEncodeDimensionRatio;
@end</codeblock>
      <codeblock props="cpp" outputclass="language-cpp">struct CameraCapturerConfiguration {
  #if defined(__ANDROID__) || (defined(__APPLE__) &amp;&amp; TARGET_OS_IOS)
    CAMERA_DIRECTION cameraDirection;
#else
    char deviceId[MAX_DEVICE_ID_LENGTH];
#endif
    VideoFormat format;
  bool followEncodeDimensionRatio;
  CameraCapturerConfiguration() : followEncodeDimensionRatio(true) {
#if defined(__ANDROID__) || (defined(__APPLE__) &amp;&amp; TARGET_OS_IOS)
  cameraDirection = CAMERA_REAR;
#else
  memset(deviceId, 0, sizeof(deviceId));
#endif
  }
};</codeblock>
      <codeblock props="electron" outputclass="language-typescript">export class CameraCapturerConfiguration {
  
  cameraDirection?: CameraDirection;
  
  deviceId?: string;
  
  format?: VideoFormat;

  followEncodeDimensionRatio?: boolean;

}</codeblock>
      <codeblock props="unity" outputclass="language-csharp">public class CameraCapturerConfiguration
    {
        public CameraCapturerConfiguration()
        {
            deviceId = "";
            cameraDirection = CAMERA_DIRECTION.CAMERA_FRONT;
            format = new VideoFormat();
            this.followEncodeDimensionRatio = true;
        }

        public CameraCapturerConfiguration(string deviceId, VideoFormat format,
            CAMERA_DIRECTION cameraDirection, bool followEncodeDimensionRatio)
        {
            this.deviceId = deviceId;
            this.format = format;
            this.cameraDirection = cameraDirection;
            this.followEncodeDimensionRatio = followEncodeDimensionRatio;
        }

        public string deviceId { set; get; }
        public VideoFormat format { set; get; }
        public bool followEncodeDimensionRatio { set; get; }
        public CAMERA_DIRECTION cameraDirection { set; get; }
    }</codeblock>
      <codeblock props="rn" outputclass="language-typescript">export class CameraCapturerConfiguration {
  
  cameraDirection?: CameraDirection;
  
  deviceId?: string;
  
  format?: VideoFormat;

  followEncodeDimensionRatio?: boolean;

}</codeblock>
      <codeblock props="flutter" outputclass="language-dart">class CameraCapturerConfiguration {
  const CameraCapturerConfiguration(
      {this.cameraDirection,
      this.deviceId,
      this.format,
      this.followEncodeDimensionRatio});

  @JsonKey(name: 'cameraDirection')
  final CameraDirection? cameraDirection;

  @JsonKey(name: 'deviceId')
  final String? deviceId;

  @JsonKey(name: 'format')
  final VideoFormat? format;

  @JsonKey(name: 'followEncodeDimensionRatio')
  final bool? followEncodeDimensionRatio;

  factory CameraCapturerConfiguration.fromJson(Map&lt;String, dynamic&gt; json) =&gt;
      _$CameraCapturerConfigurationFromJson(json);

  Map&lt;String, dynamic&gt; toJson() =&gt; _$CameraCapturerConfigurationToJson(this);
}</codeblock>            
            <codeblock props="reserve" outputclass="language-cpp" /></p>
    </section>
    <section id="parameters">
            <title><text conref="../conref/conref_api_metadata.dita#conref_api_metadata/property" /></title>
            <parml>
            <plentry>
                <pt>isCaptureWindow</pt>
                <pd>Whether to capture the window on the screen:<ul id="ul_ln3_hwd_mqb">
                    <li><codeph><ph keyref="true" /></codeph>: Capture the window.</li>
                    <li><codeph><ph keyref="false" /></codeph>: (Default) Capture the screen, not the window.</li>
                    </ul></pd>
            </plentry>
            <plentry>
                <pt>displayId</pt>
                <pd>(macOS only) The display ID of the screen.<note id="note_w12_4wd_mqb" type="attention">This parameter takes effect only when you want to capture the screen on macOS.</note></pd>
            </plentry>
            <plentry>
                <pt>screenRect</pt>
                <pd>(Windows only) The relative position of the shared screen to the virtual screen.<note type="attention" id="note_ifh_swd_mqb">This parameter takes effect only when you want to capture the screen on Windows.</note></pd>
            </plentry>
            <plentry>
                <pt>windowId</pt>
                <pd>(For Windows and macOS only) Window ID.<note type="attention">This parameter takes effect only when you want to capture the window.</note></pd>
            </plentry>
            <plentry>
                <pt props="cpp electron rn flutter">params</pt>
                <pt props="unity">parameters</pt>
                <pd>(For Windows and macOS only) The screen capture configuration. See <xref keyref="ScreenCaptureParameters" />.</pd>
            </plentry>
            <plentry>
                <pt>regionRect</pt>
                <pd>
                    <p>(For Windows and macOS only) The relative position of the shared region to the whole screen. See <xref keyref="Rectangle" />.</p>
                    <p>If you do not set this parameter, the SDK shares the whole screen. If the region you set exceeds the boundary of the screen, only the region within in the screen is shared. If you setwidth or height in <apiname keyref="Rectangle" /> as 0, the whole screen is shared.</p>
                </pd>
            </plentry>
            </parml> </section>
    </refbody>
</reference>
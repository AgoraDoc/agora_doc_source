<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="callback_ivideoframeobserver_getvideoformatpreference">
    <title><ph keyref="getVideoFormatPreference"/></title>
    <shortdesc id="short"><ph id="shortdesc">Sets the format of the raw video data output by the SDK.</ph></shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm keyref="getVideoFormatPreference"/>
            </keywords>
        </metadata>
    </prolog>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">int getVideoFormatPreference();
</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">- (AgoraVideoFormat)getVideoFormatPreference;
</codeblock>
            <codeblock props="cpp unreal" outputclass="language-cpp">virtual VIDEO_PIXEL_FORMAT getVideoFormatPreference() { return VIDEO_PIXEL_DEFAULT; }</codeblock>
         <codeblock props="bp" outputclass="language-cpp">DECLARE_DYNAMIC_MULTICAST_DELEGATE(FGetVideoFormatPreference);</codeblock>
            <codeblock props="electron" outputclass="language-typescript"/>
            <codeblock props="unity cs" outputclass="language-csharp">public virtual VIDEO_OBSERVER_FRAME_TYPE GetVideoFormatPreference()
        {
            return VIDEO_OBSERVER_FRAME_TYPE.FRAME_TYPE_RGBA;
        }</codeblock>
            <codeblock props="rn" outputclass="language-typescript"/>
           <codeblock props="flutter" outputclass="language-dart"/> 
            <codeblock props="reserve" outputclass="language-cpp"></codeblock></p>
        </section>
        <section id="detailed_desc">
            <p>You need to register the callback when calling the <xref keyref="registerVideoFrameObserver"/> method. After you successfully register the video frame observer, the SDK triggers this callback each time it receives a video frame. You need to set your preferred video data in the return value of this callback.</p>
        </section>
        <section id="return_values">
            <title>Returns</title>
            <p><xref keyref="VIDEO_PIXEL_FORMAT"/><ph>Sets the video format. </ph>See .<ph props="cpp bp unreal apple"></ph></p>
            <p>在默认情况下，原始视频像素格式 (<ph keyref="VIDEO_PIXEL_DEFAULT"/>) 存在以下类型：
                <ul><li props="cpp bp unreal">在 Android 平台上，默认的视频帧类型可能为 I420Buffer 或 TextureBuffer。 自 v4.2.3 起，TextureBuffer 类型的纹理格式不再包括 OES 格式，仅为 RGB 格式。 你需要在处理视频数据时增加对 I420、RGB 纹理格式的适配。</li>
                <li props="android">默认的视频帧类型可能为 I420Buffer 或 TextureBuffer。 自 v4.2.3 起，TextureBuffer 类型的纹理格式不再包括 OES 格式，仅为 RGB 格式。 你需要在处理视频数据时增加对 I420、RGB 纹理格式的适配。</li>
                <li props="cpp unreal bp">在 iOS 和 macOS 平台上，默认的视频帧类型可能为 I420 或 CVPixelBufferRef。</li>
                <li props="apple">默认的视频帧类型可能为 I420 或 CVPixelBufferRef。</li>
                <li props="cpp unreal bp">在 Windows 平台上，默认为 YUV420。</li></ul></p>
            <p props="android">
            <ul>
            <li><ph keyref="VIDEO_PIXEL_DEFAULT"/>(0): Raw video.</li>
            <li><ph keyref="VIDEO_PIXEL_I420"/>(1): I420.</li>
            <li props="hide"><ph keyref="VIDEO_PIXEL_BGRA"/>(2): BGRA.</li>
            <li props="hide"><ph keyref="VIDEO_PIXEL_NV21"/>(3): NV21.</li>
            <li><ph keyref="VIDEO_PIXEL_RGBA"/>(4): RGBA.</li>
            <li props="hide"><ph keyref="VIDEO_PIXEL_NV12"/>(8): NV12.</li>
            <li props="hide"><ph keyref="VIDEO_TEXTURE_2D"/>(10): TEXTURE_2D.</li>
            <li><ph keyref="VIDEO_PIXEL_I422"/>(16): I422.</li>
            </ul></p>
        </section>
    </refbody>
</reference>

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="class_videoencoderconfiguration">
    <title><ph keyref="VideoEncoderConfiguration"/></title>
    <shortdesc id="short"><ph id="shortdesc">Video encoder configurations.</ph></shortdesc>
    <refbody>
        <section id="prototype">
            <p outputclass="codeblock">
            <codeblock props="android" outputclass="language-java">public class VideoEncoderConfiguration {

  public VideoDimensions dimensions;
  public int frameRate;
  public int minFrameRate;
  public int bitrate;
  public int minBitrate;
  public ORIENTATION_MODE orientationMode;
  public DEGRADATION_PREFERENCE degradationPrefer;
  public MIRROR_MODE_TYPE mirrorMode;
}</codeblock>
            <codeblock props="ios mac" outputclass="language-objectivec">__attribute__((visibility("default"))) @interface AgoraVideoEncoderConfiguration : NSObject
@property(assign, nonatomic) CGSize dimensions;
@property(assign, nonatomic) AgoraVideoCodecType codecType;
@property(assign, nonatomic) AgoraVideoFrameRate frameRate;
@property(assign, nonatomic) NSInteger bitrate;
@property(assign, nonatomic) NSInteger minBitrate;
@property(assign, nonatomic) AgoraVideoOutputOrientationMode orientationMode;
@property(assign, nonatomic) AgoraVideoMirrorMode mirrorMode;
@property (assign, nonatomic) AgoraDegradationPreference degradationPreference;

- (instancetype _Nonnull)initWithSize:(CGSize)size
                            frameRate:(AgoraVideoFrameRate)frameRate
                              bitrate:(NSInteger)bitrate
                      orientationMode:(AgoraVideoOutputOrientationMode)orientationMode
                           mirrorMode:(AgoraVideoMirrorMode)mirrorMode;

- (instancetype _Nonnull)initWithWidth:(NSInteger)width
                                height:(NSInteger)height
                             frameRate:(AgoraVideoFrameRate)frameRate
                               bitrate:(NSInteger)bitrate
                       orientationMode:(AgoraVideoOutputOrientationMode)orientationMode
                            mirrorMode:(AgoraVideoMirrorMode)mirrorMode;
@end</codeblock>
            <codeblock props="cpp" outputclass="language-cpp">struct VideoEncoderConfiguration {
  VIDEO_CODEC_TYPE codecType;
  VideoDimensions dimensions;
  int frameRate;
  int bitrate;
  int minBitrate;
  ORIENTATION_MODE orientationMode;
  DEGRADATION_PREFERENCE degradationPreference;
  VIDEO_MIRROR_MODE_TYPE mirrorMode;

  VideoEncoderConfiguration(const VideoDimensions&amp; d, int f, int b, ORIENTATION_MODE m, VIDEO_MIRROR_MODE_TYPE mirror = VIDEO_MIRROR_MODE_DISABLED)
      : codecType(VIDEO_CODEC_H264),
        dimensions(d),
        frameRate(f),
        bitrate(b),
        minBitrate(DEFAULT_MIN_BITRATE),
        orientationMode(m),
        degradationPreference(MAINTAIN_QUALITY),
        mirrorMode(mirror) {}
  VideoEncoderConfiguration(int width, int height, int f, int b, ORIENTATION_MODE m, VIDEO_MIRROR_MODE_TYPE mirror = VIDEO_MIRROR_MODE_DISABLED)
      : codecType(VIDEO_CODEC_H264),
        dimensions(width, height),
        frameRate(f),
        bitrate(b),
        minBitrate(DEFAULT_MIN_BITRATE),
        orientationMode(m),
        degradationPreference(MAINTAIN_QUALITY),
        mirrorMode(mirror) {}
  VideoEncoderConfiguration(const VideoEncoderConfiguration&amp; config)
      : codecType(config.codecType),
        dimensions(config.dimensions),
        frameRate(config.frameRate),
        bitrate(config.bitrate),
        minBitrate(config.minBitrate),
        orientationMode(config.orientationMode),
        degradationPreference(config.degradationPreference),
        mirrorMode(config.mirrorMode) {}
  VideoEncoderConfiguration()
      : codecType(VIDEO_CODEC_H264),
        dimensions(FRAME_WIDTH_640, FRAME_HEIGHT_360),
        frameRate(FRAME_RATE_FPS_15),
        bitrate(STANDARD_BITRATE),
        minBitrate(DEFAULT_MIN_BITRATE),
        orientationMode(ORIENTATION_MODE_ADAPTIVE),
        degradationPreference(MAINTAIN_QUALITY),
        mirrorMode(VIDEO_MIRROR_MODE_DISABLED) {}
};</codeblock>
            <codeblock props="electron" outputclass="language-typescript">export class VideoEncoderConfiguration {
  codecType?: VideoCodecType
  dimensions?: VideoDimensions
  frameRate?: number
  bitrate?: number
  minBitrate?: number
  orientationMode?: OrientationMode
  degradationPreference?: DegradationPreference
  mirrorMode?: VideoMirrorModeType
}</codeblock>
            <codeblock props="unity" outputclass="language-csharp">public class VideoEncoderConfiguration
    {
        public VIDEO_CODEC_TYPE codecType { set; get; }
        public VideoDimensions dimensions { set; get; }
        public int frameRate { set; get; }
        public int bitrate { set; get; }
        public int minBitrate { set; get; }
        public ORIENTATION_MODE orientationMode { set; get; }
        public DEGRADATION_PREFERENCE degradationPreference { set; get; }
        public VIDEO_MIRROR_MODE_TYPE mirrorMode { set; get; }
        public VideoEncoderConfiguration(ref VideoDimensions d, int f, int b, ORIENTATION_MODE m, VIDEO_MIRROR_MODE_TYPE mirror = VIDEO_MIRROR_MODE_TYPE.VIDEO_MIRROR_MODE_DISABLED)
        {
            codecType = VIDEO_CODEC_TYPE.VIDEO_CODEC_H264;
            dimensions = d;
            frameRate = f;
            bitrate = b;
            minBitrate = (int)BITRATE.DEFAULT_MIN_BITRATE;
            orientationMode = m;
            degradationPreference = DEGRADATION_PREFERENCE.MAINTAIN_QUALITY;
            mirrorMode = mirror;
        }


        public VideoEncoderConfiguration(int width, int height, int f, int b, ORIENTATION_MODE m, VIDEO_MIRROR_MODE_TYPE mirror = VIDEO_MIRROR_MODE_TYPE.VIDEO_MIRROR_MODE_DISABLED)
        {
            codecType = VIDEO_CODEC_TYPE.VIDEO_CODEC_H264;
            dimensions = new VideoDimensions(width, height);
            frameRate = f;
            bitrate = b;
            minBitrate = (int)BITRATE.DEFAULT_MIN_BITRATE;
            orientationMode = m;
            degradationPreference = DEGRADATION_PREFERENCE.MAINTAIN_QUALITY;
            mirrorMode = mirror;
        }


        public VideoEncoderConfiguration(ref VideoEncoderConfiguration config)
        {
            codecType = config.codecType;
            dimensions = config.dimensions;
            frameRate = config.frameRate;
            bitrate = config.bitrate;
            minBitrate = config.minBitrate;
            orientationMode = config.orientationMode;
            degradationPreference = config.degradationPreference;
            mirrorMode = config.mirrorMode;
        }


        public VideoEncoderConfiguration()
        {
            codecType = VIDEO_CODEC_TYPE.VIDEO_CODEC_H264;
            dimensions = new VideoDimensions((int)FRAME_WIDTH.FRAME_WIDTH_640, (int)FRAME_HEIGHT.FRAME_HEIGHT_360);
            frameRate = (int)FRAME_RATE.FRAME_RATE_FPS_15;
            bitrate = (int)BITRATE.STANDARD_BITRATE;
            minBitrate = (int)BITRATE.DEFAULT_MIN_BITRATE;
            orientationMode = ORIENTATION_MODE.ORIENTATION_MODE_ADAPTIVE;
            degradationPreference = DEGRADATION_PREFERENCE.MAINTAIN_QUALITY;
            mirrorMode = VIDEO_MIRROR_MODE_TYPE.VIDEO_MIRROR_MODE_DISABLED;
        }
    }
        </codeblock>
            <codeblock props="rn" outputclass="language-typescript">export class VideoEncoderConfiguration {
  codecType?: VideoCodecType;
  dimensions?: VideoDimensions;
  frameRate?: number;
  bitrate?: number;
  minBitrate?: number;
  orientationMode?: OrientationMode;
  degradationPreference?: DegradationPreference;
  mirrorMode?: VideoMirrorModeType;
}</codeblock>
            <codeblock props="flutter" outputclass="language-dart">class VideoEncoderConfiguration {
  const VideoEncoderConfiguration(
      {this.codecType,
      this.dimensions,
      this.frameRate,
      this.bitrate,
      this.minBitrate,
      this.orientationMode,
      this.degradationPreference,
      this.mirrorMode});

  @JsonKey(name: 'codecType')
  final VideoCodecType? codecType;
  @JsonKey(name: 'dimensions')
  final VideoDimensions? dimensions;
  @JsonKey(name: 'frameRate')
  final int? frameRate;
  @JsonKey(name: 'bitrate')
  final int? bitrate;
  @JsonKey(name: 'minBitrate')
  final int? minBitrate;
  @JsonKey(name: 'orientationMode')
  final OrientationMode? orientationMode;
  @JsonKey(name: 'degradationPreference')
  final DegradationPreference? degradationPreference;
  @JsonKey(name: 'mirrorMode')
  final VideoMirrorModeType? mirrorMode;
  factory VideoEncoderConfiguration.fromJson(Map&lt;String, dynamic> json) =>
      _$VideoEncoderConfigurationFromJson(json);
  Map&lt;String, dynamic> toJson() => _$VideoEncoderConfigurationToJson(this);
}</codeblock> </p>
        </section>
        <section id="parameters">
            <title><text
            conref="../conref/conref_api_metadata.dita#conref_api_metadata/property"
            /></title>
            <parml>
            <plentry>
                <pt>dimensions</pt>
                <pd>
                    <p props="android cpp unity electron rn flutter">The dimensions of the encoded video (px). See <xref keyref="VideoDimensions" />. This parameter measures the video encoding quality in the format of length × width. The default value is 640 × 360. You can set a custom value.</p>
                    <p props="ios mac">The resolution (px) of the video encoding, which is used to measure the encoding quality, expressed in length x width, the default value is 640 x 360. Users can set the resolution by themselves, or directly select the desired resolution from the following list:<ul>
                    <li>AgoraVideoDimension120x120: The video resolution is 120*120.</li>
                    <li>AgoraVideoDimension160x120: The video resolution is 160*120.</li>
                    <li>AgoraVideoDimension180x180: The video resolution is 180*180.</li>
                    <li>AgoraVideoDimension240x180: The video resolution is 240*180.</li>
                    <li>AgoraVideoDimension320x180: The video resolution is 320*180.</li>
                    <li>AgoraVideoDimension240x240: The video resolution is 240*240.</li>
                    <li>AgoraVideoDimension320x240: The video resolution is 320*240.</li>
                    <li>AgoraVideoDimension424x240: The video resolution is 424*240.</li>
                    <li>AgoraVideoDimension360x360: The video resolution is 360*360.</li>
                    <li>AgoraVideoDimension480x360: The video resolution is 480*360.</li>
                    <li>AgoraVideoDimension640x360: The video resolution is 640*360.</li>
                    <li>AgoraVideoDimension480x480: The video resolution is 480*480.</li>
                    <li>AgoraVideoDimension640x480: The video resolution is 640*480.</li>
                    <li>AgoraVideoDimension840x480: Video resolution is 840*480</li>
                    <li>AgoraVideoDimension960x720: The video resolution is 960*720.</li>
                    <li>AgoraVideoDimension1280x720: The video resolution is 1280*720.</li>
                    <li>AgoraVideoDimension1920x1080: The video resolution is 1920 * 1080 (macOS only).</li>
                    <li props="hide"
                        >AgoraVideoDimension2540x1440: The video resolution is 2540*1440 (macOS only).</li>
                    <li props="hide"
                        >AgoraVideoDimension3840x2160: The video resolution is 3840 * 2160 (macOS only).</li>
                    </ul>
                    <note type="attention">
                    <ul>
                    <li>Whether the video can reach 720P resolution depends on the performance of the device and may not be possible on devices with lower performance. If the 720P resolution is used and the performance of the device cannot keep up, the frame rate may be too low.</li>
                    <li>iPhone does not support resolutions above 720P.</li>
                    </ul> </note> </p>
                </pd>
            </plentry>
            <plentry>
                <pt props="ios mac cpp unity electron rn flutter">codecType</pt>
                <pd props="ios mac cpp unity electron rn flutter">
                    <p>The codec type of the local video stream. See <xref keyref="VIDEO_CODEC_TYPE" />.</p>
                </pd>
            </plentry>
            <plentry>
                <pt>frameRate</pt>
                <pd>
                    <p>The frame rate (fps) of the encoding video frame. The default value is 15. See <xref keyref="FRAME_RATE"/>.</p>
                </pd>
            </plentry>
            <plentry props="native">
                <pt>minFramerate</pt>
                <pd>The minimum encoding frame rate of the video. The default value is -1.</pd>
            </plentry>
            <plentry>
                <pt>bitrate</pt>
                <pd>
                    <p><ph>The encoding bitrate (Kbps) of the video. </ph>See .<ph props="unity"><xref
                    keyref="BITRATE"/></ph></p>
                    <ul props="native flutter">
                    <li><option keyref="STANDARD_BITRATE"
                        />: (Recommended) Standard bitrate mode. In this mode, the video bitrate is twice the base bitrate.</li>
                    <li><option keyref="COMPATIBLE_BITRATE"
                        />: Adaptive bitrate mode. In this mode, the video bitrate is the same as the base bitrate. If you choose this mode in the interactive streaming profile, the video frame rate may be lower than the set value.</li>
                    </ul></pd>
            </plentry>
            <plentry>
                <pt>minBitrate</pt>
                <pd>
                    <p>The minimum encoding bitrate (Kbps) of the video.</p>
                    <p>The SDK automatically adjusts the encoding bitrate to adapt to the network conditions. Using a value greater than the default value forces the video encoder to output high-quality images but may cause more packet loss and sacrifice the smoothness of the video transmission. Unless you have special requirements for image quality, Agora does not recommend changing this value.</p>
                    <note type="attention">This parameter only applies to the interactive streaming profile.</note> </pd>
            </plentry>
            <plentry>
                <pt>orientationMode</pt>
                <pd>The orientation mode of the encoded video. See <xref keyref="ORIENTATION_MODE"/>.</pd>
            </plentry>
            <plentry>
                <pt>degradationPreference</pt>
                <pd>Video degradation preference under limited bandwidth. For more details, see <xref keyref="DEGRADATION_PREFERENCE"
                    />.</pd>
            </plentry>
            <plentry>
                <pt>mirrorMode</pt>
                <pd>
                    <p>Whether to enable mirroring mode when sending encoded video, only affects the video images seen by remote users. See <xref
                    keyref="VIDEO_MIRROR_MODE_TYPE"/>.</p>
                    <note type="attention">By default, the video is not mirrored.</note> </pd>
            </plentry>
            </parml> </section>
    </refbody>
</reference>
